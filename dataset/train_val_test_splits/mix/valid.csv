sentence,terms,source,label
карпов системы программирования удк ббк печатается по решению редакционно- издательского совета факультета вычислительной математики и кибернетики мгу им. м.,системы программирования,sys,1
системы программирования: учебное пособие.,системы программирования,sys,1
"элементы теории трансляции"") по курсу системы программирования , который читается на факультете вм и к мгу им. м.",системы программирования,sys,1
"элементы теории трансляции"") по курсу системы программирования , который читается на факультете вм и к мгу им. м.",трансляции,sys,1
"в течение всего времени в курсе излагались основы построения систем программирования и тенденции их развития, однако, в ранее выпущенных пособиях эти темы, давшие название всему курсу, отражения не получили.",систем программирования,sys,1
"в основе курса изучение комплексной системы программирования, обеспечивающей поддержку всего жизненного цикла программных продуктов, начиная от их проектирования и заканчивая их сопровождением в процессе эксплуатации.",системы программирования,sys,1
"в основе курса изучение комплексной системы программирования, обеспечивающей поддержку всего жизненного цикла программных продуктов, начиная от их проектирования и заканчивая их сопровождением в процессе эксплуатации.",программных продуктов,sys,1
"в основе курса изучение комплексной системы программирования, обеспечивающей поддержку всего жизненного цикла программных продуктов, начиная от их проектирования и заканчивая их сопровождением в процессе эксплуатации.",цикла программных продуктов,sys,1
жизненный цикл программного продукта 5 1.1.,цикл программного продукта,sys,1
жизненный цикл программного продукта 5 1.1.,программного продукта,sys,1
основные требования к системам программирования 11 1.3.,системам программирования,sys,1
основные компоненты систем программирования 12 2.,систем программирования,sys,1
классическая система программирования 16 2.1.,система программирования,sys,1
общая схема работы систем программирования 17 2.2.,систем программирования,sys,1
интегрированная среда разработки 17 3.,среда разработки,sys,1
компоненты классической системы программирования 21 3.1.,системы программирования,sys,1
редакторы текстов 21 3.1.1 .,редакторы текстов,sys,1
виды текстовых редакторов 21 3.1.2 .,текстовых редакторов,sys,1
лексический анализ на лету 23 3.2.,лексический анализ,sys,1
"трансляторы, компиляторы, интерпретаторы 24 3.2.1 .",интерпретаторы,sys,1
"трансляторы, компиляторы, интерпретаторы 24 3.2.1 .",трансляторы,sys,1
"трансляторы, компиляторы, интерпретаторы 24 3.2.1 .",компиляторы,sys,1
схемы работы трансляторов 25 3.2.2 .,трансляторов,sys,1
смешанная стратегия трансляции 26 3.3.,трансляции,sys,1
смешанная стратегия трансляции 26 3.3.,стратегия трансляции,sys,1
"компилятор, как основной компонент системы программирования 27 3.3.1 .",системы программирования,sys,1
"компилятор, как основной компонент системы программирования 27 3.3.1 .",компилятор,sys,1
общая схема работы компилятора 27 3.3.1.,компилятора,sys,1
основные компоненты компилятора и фазы компиляции 27 3.3.1.,компиляции,sys,1
основные компоненты компилятора и фазы компиляции 27 3.3.1.,фазы компиляции,sys,1
основные компоненты компилятора и фазы компиляции 27 3.3.1.,компилятора,sys,1
однопроходный компилятор 30 3.3.2 .,компилятор,sys,1
задачи семантического анализа 33 3.3.2.,семантического анализа,sys,1
проверка контекстных условий 34 3.3.2.,контекстных условий,sys,1
оптимизация в компиляторах 41 3.3.4.,компиляторах,sys,1
машинно-независимая оптимизация 43 3.3.4.,машинно-независимая оптимизация,sys,1
машинно-зависимая оптимизация 48 3.3.5 .,машинно-зависимая оптимизация,sys,1
основные методы динамического распределения памяти 51 3.3.6 .,динамического распределения,sys,1
основные методы динамического распределения памяти 51 3.3.6 .,распределения памяти,sys,1
генерация кода 57 3.4.,генерация кода,sys,1
"редакторы связей: назначение, принципы работы 60 3.5.",редакторы связей,sys,1
"загрузчики: основные функции, принципы работы 62 3.6.",загрузчики,sys,1
статические библиотеки 63 3.6.2 .,статические библиотеки,sys,1
"библиотеки функций, процедур и макроопределений 66 3.6.3.",библиотеки функций,sys,1
"библиотеки функций, процедур и макроопределений 66 3.6.3.",макроопределений,sys,1
библиотеки классов 67 3.6.3.,библиотеки классов,sys,1
библиотеки компонентов 68 3.6.3.,библиотеки компонентов,sys,1
критерии проектирования стандартных библиотек 69 3.7.,стандартных библиотек,sys,1
системы управления версиями программных комплексов 72 3.9.,программных комплексов,sys,1
средства отладки и тестирования программ 75 3.1 0.,тестирования программ,sys,1
средства отладки и тестирования программ 75 3.1 0.,отладки,sys,1
средства отладки и тестирования программ 75 3.1 0.,тестирования,sys,1
профилировщики 79 3.1 1.,профилировщики,sys,1
краткий обзор современных систем программирования 82 4.1.,систем программирования,sys,1
компонентный подход и визуальное программирование 82 4.2.,визуальное программирование,sys,1
системы программирования компании borland 83 4.2.1 .,системы программирования,sys,1
системы программирования компании microsoft 88 4.3.1 .,системы программирования,sys,1
системы программирования ос unix и linux 93 4.5.,системы программирования,sys,1
системы программирования компании ibm 98 4.6.1 .,системы программирования,sys,1
комплексная система программирования rational software 98 4.6.2 .,система программирования,sys,1
интегрированная среда разработки eclipse 99 4.6.3 .,среда разработки,sys,1
системы программирования эвм zseries 100 5.,системы программирования,sys,1
системы клиент-сервер 103 5.2.,сервер,sys,1
серверы приложений и сетевые службы 111 6.,серверы,sys,1
средства автоматического грамматического разбора 11 4 6.1.,грамматического разбора,sys,1
построение лексических анализаторов по регулярным выражениям 11 4 6.2.,анализаторов,sys,1
построение лексических анализаторов по регулярным выражениям 11 4 6.2.,лексических анализаторов,sys,1
построение лексических анализаторов по регулярным выражениям 11 4 6.2.,регулярным выражениям,sys,1
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",синтаксических анализаторов,sys,1
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",анализаторов,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",программным обеспечением,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",программного продукта,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",системам программирования,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",программных средств,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",системой программирования,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",прикладным программным обеспечением,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",программно-аппаратного обеспечения,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",комплекс программных средств,sys,1
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",цикл программного продукта,sys,1
"для обозначения результатов труда программистов обычно использование следующих терминов: программа, программный продукт и системный (или интегрированный) программный продукт.",программный продукт,sys,1
"программным продуктом называется такая программа, которая работает без авторского присутствия в рамках некоторого набора операционных сред.",программным продуктом,sys,1
"программный продукт может исполняться, тестироваться и модифицироваться без участия автора (он отчужден от автора).",программный продукт,sys,1
качество программного продукта должно быть существенно выше качества обычной программы.,программного продукта,sys,1
"для программных продуктов разрабатывается документация, необходимая для пользователей, чтобы они могли работать с программным продуктом в целях решения собственных задач, и разработчиков, модифицирующих продукт.",программным продуктом,sys,1
"для программных продуктов разрабатывается документация, необходимая для пользователей, чтобы они могли работать с программным продуктом в целях решения собственных задач, и разработчиков, модифицирующих продукт.",программных продуктов,sys,1
"программный продукт должен быть настраиваемым, причем эта настройка должна выполняться путем задания некоторых параметров настройки.",программный продукт,sys,1
системный (интегрированный) программный продукт есть комплекс программных продуктов (пакет).,программных продуктов,sys,1
системный (интегрированный) программный продукт есть комплекс программных продуктов (пакет).,программный продукт,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",интерфейсами,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",программного продукта,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",прикладное программное обеспечение,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",системы программирования,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",программное обеспечение,sys,1
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",программных продуктов,sys,1
"например, подготовив сложную электронную таблицу (excel), ее легко презентовать в наглядном виде (powerpoint).",электронную таблицу,sys,1
"этапы жизненного цикла работа с программой и над программой (а значит и использование системы программирования) продолжается на протяжении всей жизни программ, которая у любой из них состоит из трех фаз фазы разработки, фазы использования и фазы сопровождения: разработка может вестись коллективом разработчиков новых продуктов.",системы программирования,sys,1
использование программных продуктов часто ведется совсем другими людьми.,программных продуктов,sys,1
"во-первых, в большой программе всегда имеется некоторое количество ошибок, которые не выявляются при тестировании.",тестировании,sys,1
"во-вторых, программа должна развиваться: появляются новые потребности, пожелания, к вычислительным машинам подключаются новые виды внешних устройств, с которыми программа должна научиться взаимодействовать.",вычислительным машинам,sys,1
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",программного обеспечения,sys,1
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",систем программирования,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",кодирование,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",тестирование,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",верификация,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",компоновка,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",модели жизненного цикла,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",отладка,sys,1
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",программного комплекса,sys,1
"выработанная система понятий должна использоваться для описания объектов автоматизации, их сходства с другими объектами и их своеобразия, то есть отличий от объектов, остающихся за рамками осуществляемого проекта разработки программного обеспечения.",программного обеспечения,sys,1
"выработанная система понятий должна использоваться для описания объектов автоматизации, их сходства с другими объектами и их своеобразия, то есть отличий от объектов, остающихся за рамками осуществляемого проекта разработки программного обеспечения.",разработки программного обеспечения,sys,1
"чтобы добиться хотя бы частичной формализации, разрабатываются специальные программные средства, в частности, языки описания требований.",программные средства,sys,1
"для их построения входные данные разбиваются на группы, представители которых обрабатываются программным продуктом практически одинаково.",программным продуктом,sys,1
"языки спецификаций, применяемые для формулирования требований (язык clu один из первых таких языков, к этим же языкам относится язык диаграмм взаимодействия msc, язык sdl и другие).",языки спецификаций,sys,1
"при проектировании сложных программных комплексов их обычно стараются разложить на некоторое число относительно небольших подсистем, каждую из которых можно отладить независимо от других ( автономно ).",программных комплексов,sys,1
"выбор подсистем часто зависит от разработчика и существенно влияет как на сложность процесса проектирования, так и на конечное качество программного продукта.",программного продукта,sys,1
"алгоритмическая декомпозиция разделяет программную систему по алгоритмам, в ней используемым.",алгоритмическая декомпозиция,sys,1
"алгоритмическая декомпозиция разделяет программную систему по алгоритмам, в ней используемым.",программную систему,sys,1
такой метод декомпозиции ассоциируется со структурным программированием и методом проектирования сверху-вниз .,структурным программированием,sys,1
каждый отдельный полученный в результате модуль системы выполняет какой-либо один этапов работы общего системного процесса.,модуль,sys,1
"объектно-ориентированная декомпозиция связана с выделением отдельных объектов, которые способны воспринимать направляемые им сообщения и отвечать выполнением тех или иных ответных действий.",объектно-ориентированная декомпозиция,sys,1
"активную роль в таком подходе приобретают данные программ, то есть объекты.",данные программ,sys,1
"если алгоритмическая декомпозиция концентрируется на последовательности происходящих событий, то декомпозиция по объектам фиксируется на этих объектах и на событиях, происходящих в системе и вызывающих действия.",алгоритмическая декомпозиция,sys,1
на основе объектно- ориентированной декомпозиции сложные программные системы удается строить путем эволюционного развития небольших подсистем.,программные системы,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",интерфейсы,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",модуля программы,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",алгоритмической декомпозиции,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",модуля,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",модуле,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",модуле программы,sys,1
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",модулей,sys,1
"написание текста чаще называется программированием или кодированием, этот этап заканчивается, когда в наличии оказывается текст программы на некотором языке программирования.",кодированием,sys,1
"для написания текста программ чаще всего выбирается язык, соответствующий методам, выбиравшимся при анализе и формировании требований к программному продукту и проведении декомпозиции строящейся системы.",программному продукту,sys,1
"в частности, объектно- ориентированная декомпозиция особенно полезна при последующем программировании на объектно-ориентированном языке.",объектно-ориентированном языке,sys,1
верификацией программы называется процесс ее проверки на правильность.,верификацией,sys,1
верификацией программы называется процесс ее проверки на правильность.,верификацией программы,sys,1
"существуют специальные теоретические методы верификации программ, примером таких методов может служить валидация доказательство правильности программ с использованием логических методов.",верификации программ,sys,1
"существуют специальные теоретические методы верификации программ, примером таких методов может служить валидация доказательство правильности программ с использованием логических методов.",верификации,sys,1
"наиболее широко применяются эвристические методы верификации, основанные на тестировании.",верификации,sys,1
"наиболее широко применяются эвристические методы верификации, основанные на тестировании.",тестировании,sys,1
тестирование программы есть процесс обнаружения дефектов в созданных программах.,тестирование,sys,1
тестирование программы есть процесс обнаружения дефектов в созданных программах.,тестирование программы,sys,1
"во время тестирования выявляется несоответствие программы исходным требованиям и спецификациям по тестам, то есть программам с заранее известными ответами.",тестирования,sys,1
"отладка программ это выявление причин дефектов, а также их устранение.",отладка,sys,1
"отладка программ это выявление причин дефектов, а также их устранение.",отладка программ,sys,1
отладка начинается после обнаружения дефектов.,отладка,sys,1
"иногда на этапе отладки приходится устранять не только причины дефектов, но и дефекты в данных, возникшие при работе неверных программ.",отладки,sys,1
"результатом тестирования и отладки является доказательство, что все выявленные на данном комплекте тестов ошибки исправлены, а других ошибок не обнаружено.",отладки,sys,1
"результатом тестирования и отладки является доказательство, что все выявленные на данном комплекте тестов ошибки исправлены, а других ошибок не обнаружено.",тестирования,sys,1
"этап компоновки представляет собой интеграционный процесс комплексирования (комбинирования), то есть связывания отдельных частей программы в одну большую систему программного обеспечения.",программного обеспечения,sys,1
"этап компоновки представляет собой интеграционный процесс комплексирования (комбинирования), то есть связывания отдельных частей программы в одну большую систему программного обеспечения.",компоновки,sys,1
"обычно после компоновки проводится этап комплексного тестирования программных систем, на котором проверяется правильность взаимодействия всех автономно разработанных составных частей между собой.",компоновки,sys,1
"обычно после компоновки проводится этап комплексного тестирования программных систем, на котором проверяется правильность взаимодействия всех автономно разработанных составных частей между собой.",тестирования,sys,1
"обычно после компоновки проводится этап комплексного тестирования программных систем, на котором проверяется правильность взаимодействия всех автономно разработанных составных частей между собой.",программных систем,sys,1
"правильная организация процессов верификации, тестирования и документирования имеет особое значение для последующего внедрения, тиражирования и сопровождения создаваемых программ.",верификации,sys,1
"правильная организация процессов верификации, тестирования и документирования имеет особое значение для последующего внедрения, тиражирования и сопровождения создаваемых программ.",тестирования,sys,1
внедрением называется работа по привлечению заказчика к использованию созданного программного продукта.,программного продукта,sys,1
"на этом этапе возникает множество организационных проблем по обучению 14 пользователей, тестированию работоспособности и устойчивости программы при работе в конкретной организации и конкретной операционной среде.",тестированию,sys,1
во время сопровождения программного продукта можно наблюдать продолжение контактов пользователей и разработчиков.,программного продукта,sys,1
во время сопровождения программного продукта можно наблюдать продолжение контактов пользователей и разработчиков.,сопровождения программного продукта,sys,1
"чаще встречается каскадная схема, в которой можно наблюдать замыкание процесса и проведение повторного анализа требований после проведения его тестирования.",каскадная схема,sys,1
"чаще встречается каскадная схема, в которой можно наблюдать замыкание процесса и проведение повторного анализа требований после проведения его тестирования.",тестирования,sys,1
каскадная схема является одним из вариантов итеративных схем разработки программного обеспечения.,каскадная схема,sys,1
каскадная схема является одним из вариантов итеративных схем разработки программного обеспечения.,программного обеспечения,sys,1
каскадная схема является одним из вариантов итеративных схем разработки программного обеспечения.,разработки программного обеспечения,sys,1
буквальное следование каскадной схеме разработки приводит к существенному запаздыванию получения результатов.,каскадной схеме,sys,1
"согласование результатов с пользователями производится только в точках, планируемых после завершения каждого этапа работ, требования к программному обеспечению зафиксированы в техническом задании на все время разработки.",программному обеспечению,sys,1
"каскадная схема хорошо пригодна для моделирования процессов разработки такого программного обеспечения, для которого с самого начала удается достаточно точно и полно сформулировать все требования, с тем, чтобы затем предоставить разработчикам свободу выбора наиболее подходящих технических методов реализации.",каскадная схема,sys,1
"каскадная схема хорошо пригодна для моделирования процессов разработки такого программного обеспечения, для которого с самого начала удается достаточно точно и полно сформулировать все требования, с тем, чтобы затем предоставить разработчикам свободу выбора наиболее подходящих технических методов реализации.",программного обеспечения,sys,1
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",программного обеспечения,sys,1
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",модель жизненного цикла,sys,1
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",разработки программного обеспечения,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",программного продукта,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",тестирование,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",компоновка,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",каскадной схемы,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",программного обеспечения,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",каскадная схемы,sys,1
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",разработки программного обеспечения,sys,1
"например, международный стандарт iso/iec 15504 (spice) standard for information technology software process assessment (оценка процессов разработки и поддержки программного обеспечения) определяет правила оценки процессов жизненного цикла.",программного обеспечения,sys,1
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",программного обеспечения,sys,1
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",программном обеспечении,sys,1
"основные требования к системам программирования важнейшим из требований, которые предъявляются системам программирования, является требование согласованности интерфейсов и непротиворечивости результатов работы компонентов этих систем.",интерфейсов,sys,1
"основные требования к системам программирования важнейшим из требований, которые предъявляются системам программирования, является требование согласованности интерфейсов и непротиворечивости результатов работы компонентов этих систем.",системам программирования,sys,1
"именно это согласование превращает наборы системных программ в единую систему, нацеленную на решение своей основной задачи поддержку единого процесса подготовки программ.",системных программ,sys,1
"в мире существуют немного систем программирования, которые обеспечивали бы поддержкой весь процесс проектирования, разработки и сопровождения программных продуктов.",систем программирования,sys,1
"в мире существуют немного систем программирования, которые обеспечивали бы поддержкой весь процесс проектирования, разработки и сопровождения программных продуктов.",программных продуктов,sys,1
"в мире существуют немного систем программирования, которые обеспечивали бы поддержкой весь процесс проектирования, разработки и сопровождения программных продуктов.",сопровождения программных продуктов,sys,1
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",тестирование,sys,1
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",отладка,sys,1
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",компоновка,sys,1
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",верификация,sys,1
"невозможно представить себе систему программирования, в которой отсутствовали бы трансляторы.",систему программирования,sys,1
"невозможно представить себе систему программирования, в которой отсутствовали бы трансляторы.",трансляторы,sys,1
"уже давно обязательным компонентом считается редактор связей (компоновщик), позволяющий объединять раздельно созданные модули в единую программу.",компоновщик,sys,1
"уже давно обязательным компонентом считается редактор связей (компоновщик), позволяющий объединять раздельно созданные модули в единую программу.",модули,sys,1
"уже давно обязательным компонентом считается редактор связей (компоновщик), позволяющий объединять раздельно созданные модули в единую программу.",редактор связей,sys,1
наличие системных библиотек также является обязательным требованием к составу систем программирования.,системных библиотек,sys,1
наличие системных библиотек также является обязательным требованием к составу систем программирования.,систем программирования,sys,1
среди современных систем программирования уже трудно найти системы без интерактивных отладчиков и справочных систем.,отладчиков,sys,1
среди современных систем программирования уже трудно найти системы без интерактивных отладчиков и справочных систем.,систем программирования,sys,1
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",систем программирования,sys,1
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",проектирования программ,sys,1
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",программному продукту,sys,1
"можно ожидать, что в будущем, по мере внедрения автоматизированных технологий разработки программного обеспечения, системы, предназначенные для автоматизации различных стадий общего процесса проектирования и разработки, будут объединяться в единые комплексы.",программного обеспечения,sys,1
"можно ожидать, что в будущем, по мере внедрения автоматизированных технологий разработки программного обеспечения, системы, предназначенные для автоматизации различных стадий общего процесса проектирования и разработки, будут объединяться в единые комплексы.",разработки программного обеспечения,sys,1
все большую важность в последнее время приобретает требование удобства работы с системами программирования и отдельными их компонентами.,системами программирования,sys,1
"важными являются возможности по поддержке работы в различных режимах, а также по поддержке ведения в системе нескольких разных проектов разработки программного обеспечения.",программного обеспечения,sys,1
"важными являются возможности по поддержке работы в различных режимах, а также по поддержке ведения в системе нескольких разных проектов разработки программного обеспечения.",разработки программного обеспечения,sys,1
"от систем программирования требуется поддерживать как режим отладки программ, так и режим получения наиболее эффективного варианта программ.",отладки,sys,1
"от систем программирования требуется поддерживать как режим отладки программ, так и режим получения наиболее эффективного варианта программ.",систем программирования,sys,1
"от систем программирования требуется поддерживать как режим отладки программ, так и режим получения наиболее эффективного варианта программ.",отладки программ,sys,1
"основные компоненты систем программирования содержание работ, производимых на отдельных этапах, базируется на результатах других этапов, все этапы должны быть согласованы между собой.",систем программирования,sys,1
"для достижения этого согласования необходимо вести базу данных проекта, что позволяет сохранять информацию о проекте и причинах принятия тех или иных решений при проектировании, а также контролировать его внутреннюю согласованность: изменения в составе требований должны приводить к указаниям на места проекта, в которых эти требования использованы.",базу данных,sys,1
"все изменения, которые вносятся в проект, должны быть корректными, то есть не должны нарушать общие требования к проектируемому программному продукту.",программному продукту,sys,1
"содержимое базы проекта используется не только системой программирования, но и находящейся и функционирующей рядом системой управления проектом.",системой программирования,sys,1
"так же, как и система программирования, система управления проектом ведет свою работу на протяжении всего жизненного цикла проекта.",система программирования,sys,1
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",программного продукта,sys,1
"наиболее известным программным продуктом, позволяющим осуществлять управление разработкой проектами, является компонент пакета офисных программ microsoft office, который носит название microsoft project.",программным продуктом,sys,1
"на этапе анализа и формулирования требований (и планирования проекта) необходимо иметь возможность использовать формальные языки описания требований, проводить анализ этих требований и их непротиворечивости, осуществлять моделирование проектируемой системы, используя поведенческие 19 модели, а также выявлять необоснованно завышенные требования к программному обеспечению.",формальные языки,sys,1
"на этапе анализа и формулирования требований (и планирования проекта) необходимо иметь возможность использовать формальные языки описания требований, проводить анализ этих требований и их непротиворечивости, осуществлять моделирование проектируемой системы, используя поведенческие 19 модели, а также выявлять необоснованно завышенные требования к программному обеспечению.",программному обеспечению,sys,1
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",языках спецификаций,sys,1
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",программные средства,sys,1
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",систем программирования,sys,1
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",графические редакторы,sys,1
"на этапе проектирования также возникают текстовые и графические материалы, поэтому в системах программирования также необходимы текстовые и графические редакторы.",графические редакторы,sys,1
"на этапе проектирования также возникают текстовые и графические материалы, поэтому в системах программирования также необходимы текстовые и графические редакторы.",системах программирования,sys,1
"если используется объектно-ориентированный подход к проектированию и объектно-ориентированная декомпозиция, полезными оказываются средства, позволяющие разработчикам автоматически строить визуальные описания классов объектов, просматривать их и согласованно редактировать.",объектно-ориентированная декомпозиция,sys,1
"поскольку этап проектирования опирается на результаты первого этапа, уже на этом этапе широко используется база данных проекта.",база данных,sys,1
этап программирования (кодирования) многими ошибочно называется этапом разработки программ.,кодирования,sys,1
на этапе написания программ (кодирования) в системах программирования нужно иметь средства автоматизации (пусть частичной) написания программ.,системах программирования,sys,1
"некоторые системы программирования включают в свой состав компоненты, облегчающие процесс написания программ и автоматически генерирующие заготовки программ, которые впоследствии превращаются программистами в полноценные программы.",системы программирования,sys,1
"например, при создании программ, взаимодействующих друг с другом с помощью брокеров запросов объектов, требуется перед программированием составить описание интерфейсов программных компонентов.",интерфейсов,sys,1
"например, при создании программ, взаимодействующих друг с другом с помощью брокеров запросов объектов, требуется перед программированием составить описание интерфейсов программных компонентов.",программных компонентов,sys,1
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",интерфейсов,sys,1
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",компилятором,sys,1
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",трансляция,sys,1
помощь в автоматизации графического интерфейса пользователя (graphical user interface gui).,графического интерфейса,sys,1
помощь в автоматизации графического интерфейса пользователя (graphical user interface gui).,интерфейса,sys,1
"поскольку, независимо от решаемой задачи, сами пользовательские интерфейсы для разных задач могут быть похожими, полезны генераторы графических интерфейсов.",интерфейсов,sys,1
"поскольку, независимо от решаемой задачи, сами пользовательские интерфейсы для разных задач могут быть похожими, полезны генераторы графических интерфейсов.",интерфейсы,sys,1
"поскольку, независимо от решаемой задачи, сами пользовательские интерфейсы для разных задач могут быть похожими, полезны генераторы графических интерфейсов.",графических интерфейсов,sys,1
"поскольку, независимо от решаемой задачи, сами пользовательские интерфейсы для разных задач могут быть похожими, полезны генераторы графических интерфейсов.",пользовательские интерфейсы,sys,1
"лучше иметь синтаксически ориентированные текстовые редакторы, которые обеспечивают подсветку служебных слов, обеспечивают работу с функциональной клавиатурой, позволяющей вводить сложные языковые конструкции одним нажатием на клавишу, проверяют баланс скобок.",текстовые редакторы,sys,1
"трансляторы (используются также на других этапах разработки, например, при тестировании и отладке).",тестировании,sys,1
"трансляторы (используются также на других этапах разработки, например, при тестировании и отладке).",трансляторы,sys,1
"трансляторы (используются также на других этапах разработки, например, при тестировании и отладке).",отладке,sys,1
"средства компоновки больших программ, которые на основе отдельно транслируемых фрагментов (модулей) и компонентов библиотек создают исполняемые программы (редакторы связей).",редакторы связей,sys,1
"средства компоновки больших программ, которые на основе отдельно транслируемых фрагментов (модулей) и компонентов библиотек создают исполняемые программы (редакторы связей).",модулей,sys,1
"средства компоновки больших программ, которые на основе отдельно транслируемых фрагментов (модулей) и компонентов библиотек создают исполняемые программы (редакторы связей).",исполняемые программы,sys,1
"средства компоновки больших программ, которые на основе отдельно транслируемых фрагментов (модулей) и компонентов библиотек создают исполняемые программы (редакторы связей).",компоновки,sys,1
"некоторое время назад в состав систем программирования включались загрузчики программы, обеспечивающие настройку программ на адреса в памяти вычислительной машины и размещение программ в этой памяти, однако, сейчас загрузчики из компонентов систем программирования превратились в компоненты операционных систем.",памяти вычислительной машины,sys,1
"некоторое время назад в состав систем программирования включались загрузчики программы, обеспечивающие настройку программ на адреса в памяти вычислительной машины и размещение программ в этой памяти, однако, сейчас загрузчики из компонентов систем программирования превратились в компоненты операционных систем.",операционных систем,sys,1
"некоторое время назад в состав систем программирования включались загрузчики программы, обеспечивающие настройку программ на адреса в памяти вычислительной машины и размещение программ в этой памяти, однако, сейчас загрузчики из компонентов систем программирования превратились в компоненты операционных систем.",систем программирования,sys,1
"некоторое время назад в состав систем программирования включались загрузчики программы, обеспечивающие настройку программ на адреса в памяти вычислительной машины и размещение программ в этой памяти, однако, сейчас загрузчики из компонентов систем программирования превратились в компоненты операционных систем.",загрузчики,sys,1
"некоторое время назад в состав систем программирования включались загрузчики программы, обеспечивающие настройку программ на адреса в памяти вычислительной машины и размещение программ в этой памяти, однако, сейчас загрузчики из компонентов систем программирования превратились в компоненты операционных систем.",вычислительной машины,sys,1
"этап программирования во многом сформировал современное представление о том, какие системы программирования нужны для создания высококачественного программного обеспечения.",программного обеспечения,sys,1
"этап программирования во многом сформировал современное представление о том, какие системы программирования нужны для создания высококачественного программного обеспечения.",системы программирования,sys,1
"при этом развитие систем программирования приводит к тому, что в их состав включается все большее количество компонентов, имеющих отношение не только (и не столько) непосредственно к этапу программирования, но и к другим этапам.",систем программирования,sys,1
"этап компоновки есть этап формирования полной программы или программного комплекса из некоторого количества автономно запрограммированных, автономно отлаженных и автономно протестированных компонентов.",программного комплекса,sys,1
"этап компоновки есть этап формирования полной программы или программного комплекса из некоторого количества автономно запрограммированных, автономно отлаженных и автономно протестированных компонентов.",компоновки,sys,1
"для компоновки программ используется часть инструментария, применяемого также на этапе программирования (прежде всего, редакторы связей).",редакторы связей,sys,1
"для компоновки программ используется часть инструментария, применяемого также на этапе программирования (прежде всего, редакторы связей).",компоновки программ,sys,1
"для компоновки программ используется часть инструментария, применяемого также на этапе программирования (прежде всего, редакторы связей).",компоновки,sys,1
"кроме того, для использования на этом этапе создается специальный инструментарий, в котором особую важность имеют средства контроля версий программных компонентов.",программных компонентов,sys,1
"21 важную роль в получении высококачественного программного продукта играют средства, применяемые на этапах отладки и тестирования программ.",тестирования программ,sys,1
"21 важную роль в получении высококачественного программного продукта играют средства, применяемые на этапах отладки и тестирования программ.",отладки,sys,1
"21 важную роль в получении высококачественного программного продукта играют средства, применяемые на этапах отладки и тестирования программ.",программного продукта,sys,1
"21 важную роль в получении высококачественного программного продукта играют средства, применяемые на этапах отладки и тестирования программ.",тестирования,sys,1
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",отладчики,sys,1
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",систем программирования,sys,1
"наиболее удобные отладчики работают в терминах классов, объектов, переменных, используя семантику и терминологию пользователей.",отладчики,sys,1
"генераторы тестов, позволяющие формировать входные данные для трансляторов.",генераторы тестов,sys,1
"генераторы тестов, позволяющие формировать входные данные для трансляторов.",трансляторов,sys,1
"генераторы тестов также способны генерировать тесты, содержащие ошибочные конструкции, что позволяет проверять диагностические средства трансляторов.",генераторы тестов,sys,1
"генераторы тестов также способны генерировать тесты, содержащие ошибочные конструкции, что позволяет проверять диагностические средства трансляторов.",трансляторов,sys,1
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",интерфейсов,sys,1
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",графических интерфейсов,sys,1
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",интерфейсом,sys,1
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",тестирования,sys,1
средства анализа уровня тестового покрытия (применяются при тестировании программ методом белого ящика ).,тестировании программ,sys,1
средства анализа уровня тестового покрытия (применяются при тестировании программ методом белого ящика ).,тестировании,sys,1
"д. многие современные системы программирования предоставляют развитые средства этапа документирования создаваемых программных продуктов, сложность которых постоянно возрастает, что, в свою очередь, делает все более важной хорошую документацию.",системы программирования,sys,1
"д. многие современные системы программирования предоставляют развитые средства этапа документирования создаваемых программных продуктов, сложность которых постоянно возрастает, что, в свою очередь, делает все более важной хорошую документацию.",программных продуктов,sys,1
"к документации программных продуктов следует относить не только пользовательскую документацию, предназначенную для фазы использования, но также техническую документацию для сопровождения программных продуктов.",сопровождения программных продуктов,sys,1
"к документации программных продуктов следует относить не только пользовательскую документацию, предназначенную для фазы использования, но также техническую документацию для сопровождения программных продуктов.",программных продуктов,sys,1
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",программных продуктов,sys,1
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",систему программирования,sys,1
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",система программирования,sys,1
иногда системы программирования строятся без какого-либо интегрирующего звена.,системы программирования,sys,1
"первые операционные системы могли позволить пользователям-программистам запускать компоненты систем программирования только в диалоге, последовательно, одну за другой, или собирая приказы на запуск этих компонентов в одном пакетном задании.",систем программирования,sys,1
"первые операционные системы могли позволить пользователям-программистам запускать компоненты систем программирования только в диалоге, последовательно, одну за другой, или собирая приказы на запуск этих компонентов в одном пакетном задании.",операционные системы,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",командные процессоры,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",файлы,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",командные файлы,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",процессоры,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",операционных систем,sys,1
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",системных программ,sys,1
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",командных процессоров,sys,1
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",процессоров,sys,1
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",систем программирования,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",командные процессоры,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",файлы,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",интерпретаторы,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",процессоры,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",командном языке,sys,1
"специализированные командные процессоры (координатор make или командный интерпретатор shell) представляли собой интерпретаторы, на вход которым подавались файлы, записанные на особом командном языке.",интерпретатор,sys,1
"на этом языке кодировалась вся последовательность действий, необходимых для порождения результирующего исполняемого файла.",файла,sys,1
"на этом языке кодировалась вся последовательность действий, необходимых для порождения результирующего исполняемого файла.",исполняемого файла,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",файлы,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",файла,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",командного процессора,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",систем программирования,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",процессора,sys,1
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",библиотеки программ,sys,1
"удобны координаторы make тем, что позволяют отслеживать зависимости в больших наборах файлов, составляющих цельную программу, что упрощает процесс сборки проектов.",файлов,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",программными средствами,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",система программирования,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",проектирования программ,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",макроопределений,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",трансляторы,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",модулей,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",автоматизированного проектирования,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",системы программирования,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",программных комплексов,sys,1
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",компоновки,sys,1
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",программных продуктов,sys,1
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",цикла программных продуктов,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",компиляторы,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",систем программирования,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",тестирования,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",макрогенераторы,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",редакторы связей,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",редакторы текстов,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",системы программирования,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",профилировщики,sys,1
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",ассемблеры,sys,1
интегрированная среда разработки основной тенденций развития систем программирования является тенденция интеграции компонентов в единое системное окружение.,системное окружение,sys,1
интегрированная среда разработки основной тенденций развития систем программирования является тенденция интеграции компонентов в единое системное окружение.,систем программирования,sys,1
интегрированная среда разработки основной тенденций развития систем программирования является тенденция интеграции компонентов в единое системное окружение.,среда разработки,sys,1
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",среды разработки,sys,1
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",системы программирования,sys,1
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",интегрированные среды,sys,1
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",систем программирования,sys,1
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",командной строкой,sys,1
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",систем программирования,sys,1
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",системных программ,sys,1
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",операционной системы,sys,1
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",операционной системе,sys,1
система текстового редактирова ния макрогенерат ор компоновщ ик (редактор связей) выполнени е ассемблер готовая програм ма исходна я програм объектн ый модуль компилято р динамичес кая загрузчик (в составе ос) библиоте ки отладчи к ...,модуль,sys,1
система текстового редактирова ния макрогенерат ор компоновщ ик (редактор связей) выполнени е ассемблер готовая програм ма исходна я програм объектн ый модуль компилято р динамичес кая загрузчик (в составе ос) библиоте ки отладчи к ...,загрузчик,sys,1
система текстового редактирова ния макрогенерат ор компоновщ ик (редактор связей) выполнени е ассемблер готовая програм ма исходна я програм объектн ый модуль компилято р динамичес кая загрузчик (в составе ос) библиоте ки отладчи к ...,редактор связей,sys,1
система текстового редактирова ния макрогенерат ор компоновщ ик (редактор связей) выполнени е ассемблер готовая програм ма исходна я програм объектн ый модуль компилято р динамичес кая загрузчик (в составе ос) библиоте ки отладчи к ...,ассемблер,sys,1
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,файлов,sys,1
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,командных файлов,sys,1
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,систем программирования,sys,1
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",компилятора,sys,1
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",файлах,sys,1
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",файле,sys,1
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",операционной системы,sys,1
"\..\exe\cpu -x0x86 -d-s0xfe000 -b0x4005ab -e0x400900 -zt40.n40 - k0x0 -f0x0 -ot40.se0 del t40.?40 особенно эффективна работа в режиме командного файла при выполнении массовых подготовок версий одной программы, отличающихся каким-либо важным параметром, например, паролем, блокирующим несанкционированный запуск готовой программы.",файла,sys,1
"\..\exe\cpu -x0x86 -d-s0xfe000 -b0x4005ab -e0x400900 -zt40.n40 - k0x0 -f0x0 -ot40.se0 del t40.?40 особенно эффективна работа в режиме командного файла при выполнении массовых подготовок версий одной программы, отличающихся каким-либо важным параметром, например, паролем, блокирующим несанкционированный запуск готовой программы.",командного файла,sys,1
процесс подготовки большого числа почти одинаковых программ проводится в пакетном режиме работы операционной системы без оперативного контроля со стороны оператора и даже без его присутствия.,операционной системы,sys,1
все большее распространение получают интегрированные системы программирования.,интегрированные системы,sys,1
все большее распространение получают интегрированные системы программирования.,системы программирования,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",отладчика,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",текстовых редакторов,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",среда разработки,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",системы программирования,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",редактора связей,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",командного языка,sys,1
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",компилятора,sys,1
не требуется от пользователя и знания языка управления заданиями операционной системы.,операционной системы,sys,1
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",интерфейс,sys,1
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",графический интерфейс,sys,1
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",файлы,sys,1
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",командный файл,sys,1
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",файл,sys,1
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",компиляторов,sys,1
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",текстовых редакторов,sys,1
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",системы программирования,sys,1
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",отладчиков,sys,1
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",редакторов связей,sys,1
"естественным следствием внедрения в практику интегрированных систем программирования явилось перенесение технологических приемов, использованных при их разработке на разработку того программного обеспечения, которая выполняется с их помощью.",программного обеспечения,sys,1
"естественным следствием внедрения в практику интегрированных систем программирования явилось перенесение технологических приемов, использованных при их разработке на разработку того программного обеспечения, которая выполняется с их помощью.",систем программирования,sys,1
"программистам стали предоставлять графический пользовательский интерфейс, ставший вскоре после своего появления неотъемлемой составной частью многих современных операционных систем и графических оболочек.",интерфейс,sys,1
"программистам стали предоставлять графический пользовательский интерфейс, ставший вскоре после своего появления неотъемлемой составной частью многих современных операционных систем и графических оболочек.",пользовательский интерфейс,sys,1
"программистам стали предоставлять графический пользовательский интерфейс, ставший вскоре после своего появления неотъемлемой составной частью многих современных операционных систем и графических оболочек.",графический пользовательский интерфейс,sys,1
"программистам стали предоставлять графический пользовательский интерфейс, ставший вскоре после своего появления неотъемлемой составной частью многих современных операционных систем и графических оболочек.",операционных систем,sys,1
"в состав систем программирования стали включаться библиотеки, обеспечивающие поддержку графического интерфейса.",графического интерфейса,sys,1
"в состав систем программирования стали включаться библиотеки, обеспечивающие поддержку графического интерфейса.",систем программирования,sys,1
"в состав систем программирования стали включаться библиотеки, обеспечивающие поддержку графического интерфейса.",интерфейса,sys,1
"описание библиотек выполнялось с помощью прикладных программных интерфейсов, позволявших стандартизовать взаимодействие с операционными системами.",интерфейсов,sys,1
"описание библиотек выполнялось с помощью прикладных программных интерфейсов, позволявших стандартизовать взаимодействие с операционными системами.",прикладных программных интерфейсов,sys,1
"описание библиотек выполнялось с помощью прикладных программных интерфейсов, позволявших стандартизовать взаимодействие с операционными системами.",операционными системами,sys,1
"описание библиотек выполнялось с помощью прикладных программных интерфейсов, позволявших стандартизовать взаимодействие с операционными системами.",программных интерфейсов,sys,1
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,отладки,sys,1
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,системы программирования,sys,1
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,отладки программ,sys,1
"тесные связи между отдельными компонентами помогают отладчику так представить информацию о ходе выполнения программы, что отладка оказывается значительно более простым мероприятием, чем это обычно бывает.",отладчику,sys,1
"тесные связи между отдельными компонентами помогают отладчику так представить информацию о ходе выполнения программы, что отладка оказывается значительно более простым мероприятием, чем это обычно бывает.",отладка,sys,1
большинство систем программирования ориентированы на работу с каким-либо одним языком программирования.,систем программирования,sys,1
"например, в системе программирования visual c++ компании microsoft при работе с программой в одном из окон интегрированной системы демонстрируется полная иерархия классов, относящаяся к активному проекту.",интегрированной системы,sys,1
"например, в системе программирования visual c++ компании microsoft при работе с программой в одном из окон интегрированной системы демонстрируется полная иерархия классов, относящаяся к активному проекту.",системе программирования,sys,1
"при редактировании и отладке это позволяет легко отыскивать в тексте места определения объектов, проверять способы использования объектов на соответствие определениям, отлаживать не только процедуры обработки объектов, но и сами данные и их структуры.",отладке,sys,1
27 интегрированные среды имеются не только в системах microsoft windows для персональных компьютеров.,интегрированные среды,sys,1
в семействе систем под условным наименованием unix уже давно функционирует система оконного пользовательского интерфейса x window system.,пользовательского интерфейса,sys,1
в семействе систем под условным наименованием unix уже давно функционирует система оконного пользовательского интерфейса x window system.,интерфейса,sys,1
в эту систему заложена идея разделения функций отображения информации на экране по принципу функции клиента и функции сервера.,сервера,sys,1
"сервер выполняет саму отрисовку, управляет дисплеем, а клиент выполняет вычисления и связывается с сервером при необходимости отобразить их результаты на экране.",сервером,sys,1
"сервер выполняет саму отрисовку, управляет дисплеем, а клиент выполняет вычисления и связывается с сервером при необходимости отобразить их результаты на экране.",сервер,sys,1
"взаимодействие клиентов и серверов осуществляется на основе сетевых протоколов, что значительно облегчает работу в многопользовательском и многоэкранном режимах, а также повышает уровень безопасности взаимодействия.",сетевых протоколов,sys,1
"взаимодействие клиентов и серверов осуществляется на основе сетевых протоколов, что значительно облегчает работу в многопользовательском и многоэкранном режимах, а также повышает уровень безопасности взаимодействия.",серверов,sys,1
"многие программные компоненты системы unix получили возможность работать не только в режиме командной строки, но и в интегрированной среде x window.",командной строки,sys,1
"многие программные компоненты системы unix получили возможность работать не только в режиме командной строки, но и в интегрированной среде x window.",режиме командной строки,sys,1
"многие программные компоненты системы unix получили возможность работать не только в режиме командной строки, но и в интегрированной среде x window.",программные компоненты,sys,1
"для интерфейса x window созданы многочисленные диспетчеры окон, самым известным из которых является, по-видимому, диспетчер motif, с помощью которого для работы с окнами интерфейса возникают дополнительные возможности.",интерфейса,sys,1
"это свободно распространяемый пользовательский интерфейс, обладающий развитым визуальным редактором, к которому могут подключаться как коммерческие, так и свободно распространяемые модули, реализующие различные функции.",интерфейс,sys,1
"это свободно распространяемый пользовательский интерфейс, обладающий развитым визуальным редактором, к которому могут подключаться как коммерческие, так и свободно распространяемые модули, реализующие различные функции.",модули,sys,1
"это свободно распространяемый пользовательский интерфейс, обладающий развитым визуальным редактором, к которому могут подключаться как коммерческие, так и свободно распространяемые модули, реализующие различные функции.",пользовательский интерфейс,sys,1
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",кодирования,sys,1
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",системы программирования,sys,1
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",проектированием программ,sys,1
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",системы программирования,sys,1
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",компиляторами,sys,1
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",систем программирования,sys,1
редакторы текстов 3.1.1.,редакторы текстов,sys,1
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",автоматизированного проектирования,sys,1
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",текстовых редакторов,sys,1
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",системы программирования,sys,1
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",редактор текста,sys,1
текстовый редактор является наиболее частым начальным элементом процесса создания программы.,текстовый редактор,sys,1
"он позволяет готовить и вносить изменения в тексты исходных программ, однако в современных системах программирования его функции стали еще более широкими.",системах программирования,sys,1
текстовые редакторы стали основой интегрированных сред разработки.,сред разработки,sys,1
текстовые редакторы стали основой интегрированных сред разработки.,текстовые редакторы,sys,1
"известным примером текстового редактора является редактор vi, входящий в состав стандартной системы программирования операционной системы unix.",системы программирования,sys,1
"известным примером текстового редактора является редактор vi, входящий в состав стандартной системы программирования операционной системы unix.",текстового редактора,sys,1
"известным примером текстового редактора является редактор vi, входящий в состав стандартной системы программирования операционной системы unix.",операционной системы,sys,1
"редакторы называются текстовыми, поскольку они предназначены для редактирования и хранения в архиве любой текстовой информации от текстов программ до документации по вычислительной системе.",вычислительной системе,sys,1
"текстовые редакторы делятся на две категории по видам запуска, они бывают пакетными и диалоговыми.",текстовые редакторы,sys,1
пакетные редакторы не требуют непосредственного присутствия программиста для своей работы.,пакетные редакторы,sys,1
"пакетные редакторы особенно удобны при пакетном формировании нескольких версий одних и тех же программ, отличающихся некоторыми важными параметрами, которые должны быть учтены непосредственно в тексте программы.",пакетные редакторы,sys,1
"запуск пакетного редактора может осуществляться из командной строки или с помощью командного файла, но в любом случае файл с заданием на редактирование должен быть подготовлен заранее.",файла,sys,1
"запуск пакетного редактора может осуществляться из командной строки или с помощью командного файла, но в любом случае файл с заданием на редактирование должен быть подготовлен заранее.",командной строки,sys,1
"запуск пакетного редактора может осуществляться из командной строки или с помощью командного файла, но в любом случае файл с заданием на редактирование должен быть подготовлен заранее.",файл,sys,1
"запуск пакетного редактора может осуществляться из командной строки или с помощью командного файла, но в любом случае файл с заданием на редактирование должен быть подготовлен заранее.",командного файла,sys,1
"запуск пакетного редактора может осуществляться из командной строки или с помощью командного файла, но в любом случае файл с заданием на редактирование должен быть подготовлен заранее.",пакетного редактора,sys,1
"одним из видов контекстного пакетного редактирования является макроподстановка, то есть редактирование текста по найденным в нем шаблонам.",пакетного редактирования,sys,1
"одним из видов контекстного пакетного редактирования является макроподстановка, то есть редактирование текста по найденным в нем шаблонам.",макроподстановка,sys,1
"иногда такое редактирование текста встраивается непосредственно в компилятор, что имеет некоторые преимущества, связанные с повышением эффективности общего 29 процесса обработки текста программы.",компилятор,sys,1
"процесс макрообработки текстов концептуально делится на две фазы первая из них это ввод макроопределений, вторая фаза состоит в обработке макровызовов.",макроопределений,sys,1
вид макровызовов и макроопределений также вносит различия в макропроцессоры.,макропроцессоры,sys,1
вид макровызовов и макроопределений также вносит различия в макропроцессоры.,макроопределений,sys,1
"в одних макропроцессорах (более традиционных) макроопределения напоминают определения функций и их формальных параметров, а макровызовы напоминают операции вызова функций с фактическими параметрами.",макроопределения,sys,1
"в одних макропроцессорах (более традиционных) макроопределения напоминают определения функций и их формальных параметров, а макровызовы напоминают операции вызова функций с фактическими параметрами.",макропроцессорах,sys,1
"примерами таких макропроцессоров могут служить препроцессоры, встроенные в компиляторы некоторых языков программирования (pl/1, си, си++, различные языки ассемблера).",ассемблера,sys,1
"примерами таких макропроцессоров могут служить препроцессоры, встроенные в компиляторы некоторых языков программирования (pl/1, си, си++, различные языки ассемблера).",языки ассемблера,sys,1
"примерами таких макропроцессоров могут служить препроцессоры, встроенные в компиляторы некоторых языков программирования (pl/1, си, си++, различные языки ассемблера).",макропроцессоров,sys,1
"другие макропроцессоры считают макровызовом произвольную строку текста, соответствующую некоторому заранее определенному шаблону, причем правила описания шаблонов могут достаточно сложными, а сами шаблоны могут быть параметризованными.",макропроцессоры,sys,1
существует большое количество универсальных макропроцессоров или макрогенераторов.,макрогенераторов,sys,1
существует большое количество универсальных макропроцессоров или макрогенераторов.,макропроцессоров,sys,1
"в некоторых разработках они использовались для повышения мобильности программного обеспечения, то есть его переносимости из одного операционного окружения в другое.",операционного окружения,sys,1
"в некоторых разработках они использовались для повышения мобильности программного обеспечения, то есть его переносимости из одного операционного окружения в другое.",программного обеспечения,sys,1
"диалоговые редакторы отличаются от пакетных редакторов тем, что для них готовить задание на редактирование не требуется.",пакетных редакторов,sys,1
"в результате формируется исправленный текст, который можно снова записать в системный архив, использовав прежнее имя файла или задав новое имя, сохранив предыдущий вариант в архиве.",файла,sys,1
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",файлов,sys,1
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",процессоры,sys,1
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",текстовый процессор,sys,1
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",процессор,sys,1
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",текстовые процессоры,sys,1
"появление интегрированной среды разработки позволило интегрировать в них и текстовые редакторы, точнее диалоговые экранные редакторы текстов.",интегрированной среды,sys,1
"появление интегрированной среды разработки позволило интегрировать в них и текстовые редакторы, точнее диалоговые экранные редакторы текстов.",редакторы текстов,sys,1
"появление интегрированной среды разработки позволило интегрировать в них и текстовые редакторы, точнее диалоговые экранные редакторы текстов.",среды разработки,sys,1
"появление интегрированной среды разработки позволило интегрировать в них и текстовые редакторы, точнее диалоговые экранные редакторы текстов.",текстовые редакторы,sys,1
"редакторы тестов стали теснее взаимодействовать с компиляторами, а затем и с отладчиками программ.",компиляторами,sys,1
"редакторы тестов стали теснее взаимодействовать с компиляторами, а затем и с отладчиками программ.",отладчиками программ,sys,1
"редакторы тестов стали теснее взаимодействовать с компиляторами, а затем и с отладчиками программ.",отладчиками,sys,1
"тем самым, текстовым редакторам передаются некоторые функции лексических и синтаксических анализаторов.",текстовым редакторам,sys,1
"тем самым, текстовым редакторам передаются некоторые функции лексических и синтаксических анализаторов.",синтаксических анализаторов,sys,1
"тем самым, текстовым редакторам передаются некоторые функции лексических и синтаксических анализаторов.",анализаторов,sys,1
"некоторые системы программирования имеют особую структуру, предполагающую ввод исходной информации в виде графических объектов с помощью графического пользовательского интерфейса.",пользовательского интерфейса,sys,1
"некоторые системы программирования имеют особую структуру, предполагающую ввод исходной информации в виде графических объектов с помощью графического пользовательского интерфейса.",системы программирования,sys,1
"некоторые системы программирования имеют особую структуру, предполагающую ввод исходной информации в виде графических объектов с помощью графического пользовательского интерфейса.",графического пользовательского интерфейса,sys,1
"некоторые системы программирования имеют особую структуру, предполагающую ввод исходной информации в виде графических объектов с помощью графического пользовательского интерфейса.",интерфейса,sys,1
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,лексический анализ,sys,1
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,лексического анализа,sys,1
"одновременно с вводом текста программы с помощью текстового редактора система программирования отыскивает в этом тексте лексемы по правилам того языка программирования, на работу с которым она в данный момент настроена.",лексемы,sys,1
"одновременно с вводом текста программы с помощью текстового редактора система программирования отыскивает в этом тексте лексемы по правилам того языка программирования, на работу с которым она в данный момент настроена.",система программирования,sys,1
"одновременно с вводом текста программы с помощью текстового редактора система программирования отыскивает в этом тексте лексемы по правилам того языка программирования, на работу с которым она в данный момент настроена.",текстового редактора,sys,1
"д. более развитые системы строят таблицы идентификаторов и констант, которые передаются компилятору, входящему в систему программирования.",таблицы идентификаторов,sys,1
"д. более развитые системы строят таблицы идентификаторов и констант, которые передаются компилятору, входящему в систему программирования.",систему программирования,sys,1
"д. более развитые системы строят таблицы идентификаторов и констант, которые передаются компилятору, входящему в систему программирования.",компилятору,sys,1
этим достигается интеграция текстового редактора с лексическим анализатором компилятора.,лексическим анализатором,sys,1
этим достигается интеграция текстового редактора с лексическим анализатором компилятора.,анализатором,sys,1
этим достигается интеграция текстового редактора с лексическим анализатором компилятора.,текстового редактора,sys,1
этим достигается интеграция текстового редактора с лексическим анализатором компилятора.,компилятора,sys,1
"кроме самой лексемы, 31 разработчику может быть предоставлена информация о ней, например, перечень доступных методов для типа или экземпляра класса, что избавляет от необходимости лишний раз заглядывать в документацию, и снижает вероятность ошибок при вводе текста.",лексемы,sys,1
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",синтаксическим анализатором,sys,1
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",системы программирования,sys,1
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",текстовый редактор,sys,1
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",анализатором,sys,1
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",компилятора,sys,1
"подсказка возникает на экране в том случае, когда разработчик ввел какую-то часть исходного текста, определенную лексическим анализатором как начало некоторого заслуживающего внимания фрагмента.",лексическим анализатором,sys,1
"подсказка возникает на экране в том случае, когда разработчик ввел какую-то часть исходного текста, определенную лексическим анализатором как начало некоторого заслуживающего внимания фрагмента.",анализатором,sys,1
"подсказки делаются лишь на основании лексического и синтаксического анализа, а этого не всегда достаточно для полного понимания ситуации, поэтому подсказки не всегда оказываются правильными.",синтаксического анализа,sys,1
"текстовые редакторы интегрируются также с отладчиками, для которых они позволяют расставлять в программе точки останова, показывать значения переменных во время приостановки работы программы и выполнять другие полезные действия.",отладчиками,sys,1
"текстовые редакторы интегрируются также с отладчиками, для которых они позволяют расставлять в программе точки останова, показывать значения переменных во время приостановки работы программы и выполнять другие полезные действия.",текстовые редакторы,sys,1
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",интерпретаторы,sys,1
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",программного продукта,sys,1
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",трансляторы,sys,1
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",компиляторы,sys,1
"сам результат может быть получен только при работе аппаратуры вычислительной системы, которой для работы должна быть передана программа в своем исходном или переработанном виде, а также входные данные, требующиеся программе при ее работе.",вычислительной системы,sys,1
первый из этих способов почти не требует системы программирования и связан с кодированием программ непосредственно на машинном языке.,системы программирования,sys,1
первый из этих способов почти не требует системы программирования и связан с кодированием программ непосредственно на машинном языке.,машинном языке,sys,1
первый из этих способов почти не требует системы программирования и связан с кодированием программ непосредственно на машинном языке.,кодированием,sys,1
"в настоящее время можно считать, что ни одна вычислительная система не воспринимает напрямую программы, подготавливаемые к исполнению людьми: все программы для получения результата их работы должны пройти предварительную обработку.",вычислительная система,sys,1
"второй вариант, в котором программирование ведется на языке программирования, не совпадающем с машинным языком вычислительной системы, требует наличия системы программирования.",машинным языком,sys,1
"второй вариант, в котором программирование ведется на языке программирования, не совпадающем с машинным языком вычислительной системы, требует наличия системы программирования.",вычислительной системы,sys,1
"второй вариант, в котором программирование ведется на языке программирования, не совпадающем с машинным языком вычислительной системы, требует наличия системы программирования.",системы программирования,sys,1
"в состав системы программирования включаются несколько компонентов, важнейшим из которых является компонент, ответственный за преобразование исходной программы к виду, в котором она может быть понята вычислительной системой.",вычислительной системой,sys,1
"в состав системы программирования включаются несколько компонентов, важнейшим из которых является компонент, ответственный за преобразование исходной программы к виду, в котором она может быть понята вычислительной системой.",системы программирования,sys,1
"эти компоненты называются трансляторами, то есть программами, которые переводят исходную программу, написанную на некотором исходном (входном) языке, в другую программу, эквивалентную первой.",трансляторами,sys,1
процесс перевода с исходного языка на объектный язык охватывает сразу три программы и называется трансляцией: 1.,объектный язык,sys,1
процесс перевода с исходного языка на объектный язык охватывает сразу три программы и называется трансляцией: 1.,трансляцией,sys,1
"во время трансляции вычислительная система выполняет программу транслятора (программа no 1, транслирующая).",транслятора,sys,1
"во время трансляции вычислительная система выполняет программу транслятора (программа no 1, транслирующая).",вычислительная система,sys,1
"во время трансляции вычислительная система выполняет программу транслятора (программа no 1, транслирующая).",трансляции,sys,1
транслятор обрабатывает конкретную последовательность предложений входного языка.,транслятор,sys,1
"результатом работы транслятора также является программа, строится она по синтаксическим правилам выходного языка, ее семантика определяется семантикой выходного языка (программа no 3, результирующая).",транслятора,sys,1
эквивалентность программ означает совпадение их смысла с точки зрения (семантики) входного языка (для входной программы) и (семантики) выходного языка (для объектной программы).,объектной программы,sys,1
схемы работы трансляторов степень преобразования программ трансляторами может быть различной.,трансляторов,sys,1
"программы, которые обрабатывают тексты на таких языках, называются ассемблерами.",ассемблерами,sys,1
"несмотря на большую разницу в аппаратуре разных вычислительных машин, их языки ассемблера часто очень похожи друг на друга, отличаясь только представлением самих машинных команд.",вычислительных машин,sys,1
"несмотря на большую разницу в аппаратуре разных вычислительных машин, их языки ассемблера часто очень похожи друг на друга, отличаясь только представлением самих машинных команд.",ассемблера,sys,1
"несмотря на большую разницу в аппаратуре разных вычислительных машин, их языки ассемблера часто очень похожи друг на друга, отличаясь только представлением самих машинных команд.",машинных команд,sys,1
"несмотря на большую разницу в аппаратуре разных вычислительных машин, их языки ассемблера часто очень похожи друг на друга, отличаясь только представлением самих машинных команд.",языки ассемблера,sys,1
"для языков ассемблера разработан стандарт, в котором специально указано, что все подобные языки должны обрабатываться соответствующими ассемблерами на основе принципа один-в-один .",ассемблера,sys,1
"для языков ассемблера разработан стандарт, в котором специально указано, что все подобные языки должны обрабатываться соответствующими ассемблерами на основе принципа один-в-один .",языков ассемблера,sys,1
"для языков ассемблера разработан стандарт, в котором специально указано, что все подобные языки должны обрабатываться соответствующими ассемблерами на основе принципа один-в-один .",ассемблерами,sys,1
другой вид трансляторов компиляторы.,трансляторов,sys,1
другой вид трансляторов компиляторы.,компиляторы,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",ассемблера,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",трансляции,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",машинный язык,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",язык ассемблера,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",объектным языком,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",вычислительной машины,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",транслятор,sys,1
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",компилятор,sys,1
"вычислительная система, для которой ведется компиляция, называется целевой вычислительной системой.",вычислительной системой,sys,1
"вычислительная система, для которой ведется компиляция, называется целевой вычислительной системой.",вычислительная система,sys,1
"вычислительная система, для которой ведется компиляция, называется целевой вычислительной системой.",компиляция,sys,1
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",объектной программы,sys,1
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",операционная система,sys,1
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",компилятор,sys,1
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",операционном окружении,sys,1
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",интерпретацией,sys,1
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",компилятор,sys,1
"интерпретация выполняется программой, называемой интерпретатором.",интерпретатором,sys,1
"интерпретация выполняется программой, называемой интерпретатором.",интерпретация,sys,1
"при интерпретации некоторой программы она размещается не в той области памяти вычислительной машины, которая предназначена для выполняемых программ, а там, где обычно размещаются исходные данные выполняемых программ.",интерпретации,sys,1
"при интерпретации некоторой программы она размещается не в той области памяти вычислительной машины, которая предназначена для выполняемых программ, а там, где обычно размещаются исходные данные выполняемых программ.",вычислительной машины,sys,1
"при интерпретации некоторой программы она размещается не в той области памяти вычислительной машины, которая предназначена для выполняемых программ, а там, где обычно размещаются исходные данные выполняемых программ.",памяти вычислительной машины,sys,1
"в отличие от компилятора интерпретатор некоторого исходного языка выполняет действия, которые этой программой предписываются (для этого интерпретатору необходимо передавать еще и входные данные программы).",данные программы,sys,1
"в отличие от компилятора интерпретатор некоторого исходного языка выполняет действия, которые этой программой предписываются (для этого интерпретатору необходимо передавать еще и входные данные программы).",интерпретатору,sys,1
"в отличие от компилятора интерпретатор некоторого исходного языка выполняет действия, которые этой программой предписываются (для этого интерпретатору необходимо передавать еще и входные данные программы).",компилятора,sys,1
"в отличие от компилятора интерпретатор некоторого исходного языка выполняет действия, которые этой программой предписываются (для этого интерпретатору необходимо передавать еще и входные данные программы).",интерпретатор,sys,1
"интерпретатор не порождает объектную программу, которая впоследствии должна выполняться, а выполняет ее сам.",интерпретатор,sys,1
"интерпретатор не порождает объектную программу, которая впоследствии должна выполняться, а выполняет ее сам.",объектную программу,sys,1
это и есть принципиальное отличие интерпретатора от компилятора.,интерпретатора,sys,1
это и есть принципиальное отличие интерпретатора от компилятора.,компилятора,sys,1
"итогом работы интерпретатора является результат, определяемый смыслом исходной программы, если исходная программа правильна синтаксически и семантически, либо сообщение об ошибке, в противном случае.",интерпретатора,sys,1
в процессе интерпретации участвуют только две программы (программа интерпретатора и исходная программа) и два набора данных (входные данные программы и ее результат): 3.2.2.,интерпретации,sys,1
в процессе интерпретации участвуют только две программы (программа интерпретатора и исходная программа) и два набора данных (входные данные программы и ее результат): 3.2.2.,интерпретатора,sys,1
в процессе интерпретации участвуют только две программы (программа интерпретатора и исходная программа) и два набора данных (входные данные программы и ее результат): 3.2.2.,данные программы,sys,1
"смешанная стратегия трансляции иногда интерпретатор сначала производит преобразование исходной программы в некоторое внутреннее представление, которое затем программно интерпретируется.",трансляции,sys,1
"смешанная стратегия трансляции иногда интерпретатор сначала производит преобразование исходной программы в некоторое внутреннее представление, которое затем программно интерпретируется.",интерпретатор,sys,1
"смешанная стратегия трансляции иногда интерпретатор сначала производит преобразование исходной программы в некоторое внутреннее представление, которое затем программно интерпретируется.",стратегия трансляции,sys,1
"такой подход называется смешанной стратегией трансляции, это наиболее часто возникающая на практике ситуация.",трансляции,sys,1
"такой подход называется смешанной стратегией трансляции, это наиболее часто возникающая на практике ситуация.",стратегией трансляции,sys,1
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",ассемблеров,sys,1
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",интерпретаторах,sys,1
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",языки ассемблеров,sys,1
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",интерпретации,sys,1
именно поэтому интерпретаторы также относят к трансляторам.,трансляторам,sys,1
именно поэтому интерпретаторы также относят к трансляторам.,интерпретаторы,sys,1
"в этом смысле термин транслятор является самым общим и обозначает, как компиляторы и ассемблеры, так и интерпретаторы.",интерпретаторы,sys,1
"в этом смысле термин транслятор является самым общим и обозначает, как компиляторы и ассемблеры, так и интерпретаторы.",транслятор,sys,1
"в этом смысле термин транслятор является самым общим и обозначает, как компиляторы и ассемблеры, так и интерпретаторы.",компиляторы,sys,1
"в этом смысле термин транслятор является самым общим и обозначает, как компиляторы и ассемблеры, так и интерпретаторы.",ассемблеры,sys,1
"некоторые интерпретаторы построены так, что исполняют исходную программу последовательно, по мере поступления программы на вход интерпретатора.",интерпретаторы,sys,1
"некоторые интерпретаторы построены так, что исполняют исходную программу последовательно, по мере поступления программы на вход интерпретатора.",интерпретатора,sys,1
"пользователю при этом не надо ждать завершения интерпретации, чтобы увидеть первые исходна я програм интерпретат ор входные результа набтор данных no 2 программа no 1 программа no 2 набор данных no 1 35 результаты работы программы, он может получать результаты постепенно, по мере работы интерпретатора.",интерпретации,sys,1
"пользователю при этом не надо ждать завершения интерпретации, чтобы увидеть первые исходна я програм интерпретат ор входные результа набтор данных no 2 программа no 1 программа no 2 набор данных no 1 35 результаты работы программы, он может получать результаты постепенно, по мере работы интерпретатора.",интерпретатора,sys,1
не все языки программирования допускают такое построение интерпретаторов.,интерпретаторов,sys,1
"для того, чтобы это было возможно, язык должен одновременно допускать возможность существования однопроходного компилятора для этого языка.",компилятора,sys,1
"скорость выполнения программы интерпретаторами во много раз меньше, чем при использовании компиляторов.",компиляторов,sys,1
"скорость выполнения программы интерпретаторами во много раз меньше, чем при использовании компиляторов.",интерпретаторами,sys,1
"кроме того, при интерпретации исходная программа должна подвергаться разбору всякий раз при ее выполнении, а при компиляции разбор выполняется только один раз, после чего используется уже не исходный текст, а объектный файл с готовой программой.",компиляции,sys,1
"кроме того, при интерпретации исходная программа должна подвергаться разбору всякий раз при ее выполнении, а при компиляции разбор выполняется только один раз, после чего используется уже не исходный текст, а объектный файл с готовой программой.",файл,sys,1
"кроме того, при интерпретации исходная программа должна подвергаться разбору всякий раз при ее выполнении, а при компиляции разбор выполняется только один раз, после чего используется уже не исходный текст, а объектный файл с готовой программой.",интерпретации,sys,1
"однако интерпретаторы обладают независимостью от архитектуры целевой вычислительной системы, в то время, как при компиляции готовые программы всегда ориентированы на эту архитектуру.",компиляции,sys,1
"однако интерпретаторы обладают независимостью от архитектуры целевой вычислительной системы, в то время, как при компиляции готовые программы всегда ориентированы на эту архитектуру.",вычислительной системы,sys,1
"однако интерпретаторы обладают независимостью от архитектуры целевой вычислительной системы, в то время, как при компиляции готовые программы всегда ориентированы на эту архитектуру.",интерпретаторы,sys,1
"разнородность оборудования, с которой постоянно приходится сталкиваться в глобальных информационных сетях, например, в сети интернет, препятствует использованию компиляторов, но способствует развитию систем, интерпретирующих тексты исходных программ, либо систем с двойной технологией компиляции и интерпретации, в которых, в зависимости от требований пользователя исходная программа либо компилируется, либо интерпретируется.",компиляции,sys,1
"разнородность оборудования, с которой постоянно приходится сталкиваться в глобальных информационных сетях, например, в сети интернет, препятствует использованию компиляторов, но способствует развитию систем, интерпретирующих тексты исходных программ, либо систем с двойной технологией компиляции и интерпретации, в которых, в зависимости от требований пользователя исходная программа либо компилируется, либо интерпретируется.",интерпретации,sys,1
"разнородность оборудования, с которой постоянно приходится сталкиваться в глобальных информационных сетях, например, в сети интернет, препятствует использованию компиляторов, но способствует развитию систем, интерпретирующих тексты исходных программ, либо систем с двойной технологией компиляции и интерпретации, в которых, в зависимости от требований пользователя исходная программа либо компилируется, либо интерпретируется.",компиляторов,sys,1
"смешанная стратегия трансляции применяется в системах, работающих в сети интернет, программы для которых пишутся на языке java.",трансляции,sys,1
"смешанная стратегия трансляции применяется в системах, работающих в сети интернет, программы для которых пишутся на языке java.",стратегия трансляции,sys,1
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",компиляции,sys,1
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",компиляторов,sys,1
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",системы программирования,sys,1
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",компиляции программ,sys,1
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",компилятор,sys,1
"это количество может меняться от одного до нескольких десятков, на их количество, кроме свойств исходного языка, могут влиять также свойства операционного окружения, в котором работает компилятор.",операционного окружения,sys,1
"это количество может меняться от одного до нескольких десятков, на их количество, кроме свойств исходного языка, могут влиять также свойства операционного окружения, в котором работает компилятор.",компилятор,sys,1
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",внешней памяти,sys,1
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",компилятором,sys,1
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",внешнюю память,sys,1
"во время одного прохода может выполняться сразу несколько фаз компиляции, но случается, что одна фаза компиляции (например, синтаксический анализ) выполняется за несколько проходов.",компиляции,sys,1
"во время одного прохода может выполняться сразу несколько фаз компиляции, но случается, что одна фаза компиляции (например, синтаксический анализ) выполняется за несколько проходов.",синтаксический анализ,sys,1
"во время одного прохода может выполняться сразу несколько фаз компиляции, но случается, что одна фаза компиляции (например, синтаксический анализ) выполняется за несколько проходов.",фаза компиляции,sys,1
"во время одного прохода может выполняться сразу несколько фаз компиляции, но случается, что одна фаза компиляции (например, синтаксический анализ) выполняется за несколько проходов.",фаз компиляции,sys,1
36 в настоящее время практически все компиляторы языков программирования просматривают сам исходный текст только один раз.,компиляторы языков,sys,1
36 в настоящее время практически все компиляторы языков программирования просматривают сам исходный текст только один раз.,компиляторы,sys,1
"чтобы построить такое внутреннее представление программы, в компиляторе строятся сложные таблицы, в которые заносятся сведения, извлекаемые из текста программы на первом и единственном его просмотре.",компиляторе,sys,1
общая схема работы компилятора на следующей странице изображена схема работы компилятора языка программирования.,компилятора языка,sys,1
общая схема работы компилятора на следующей странице изображена схема работы компилятора языка программирования.,компилятора,sys,1
"сплошные стрелки на этом рисунке указывают порядок работы компилятора, а пунктирные линии потоки информации.",компилятора,sys,1
основные компоненты компилятора и фазы компиляции информационные таблицы.,компиляции,sys,1
основные компоненты компилятора и фазы компиляции информационные таблицы.,фазы компиляции,sys,1
основные компоненты компилятора и фазы компиляции информационные таблицы.,компилятора,sys,1
"при анализе программы из имеющихся в ней описаний, заголовков процедур, блоков, циклов и других структурных операторов извлекается информация, которая должна сохраняться для использования на последующих фазах компиляции.",компиляции,sys,1
"при анализе программы из имеющихся в ней описаний, заголовков процедур, блоков, циклов и других структурных операторов извлекается информация, которая должна сохраняться для использования на последующих фазах компиляции.",анализе программы,sys,1
вся эта информация размещается в информационных таблицах компилятора.,таблицах компилятора,sys,1
вся эта информация размещается в информационных таблицах компилятора.,компилятора,sys,1
"конкретная информация зависит от исходного языка, от объектного языка и сложности транслятора.",объектного языка,sys,1
"конкретная информация зависит от исходного языка, от объектного языка и сложности транслятора.",транслятора,sys,1
"кроме таблицы идентификаторов ( имен ) обычно строится таблица констант, в которую включаются все константы, использованные в программе, и заносятся их адреса в объектной программе.",таблицы идентификаторов,sys,1
"кроме таблицы идентификаторов ( имен ) обычно строится таблица констант, в которую включаются все константы, использованные в программе, и заносятся их адреса в объектной программе.",объектной программе,sys,1
перед началом работы с программой компилятору необходимо провести инициирующие мероприятия.,компилятору,sys,1
к таковым относятся ввод и обработка режимов запуска компилятора и первичное заполнение таблиц исходной информацией.,компилятора,sys,1
фазы анализа программ.,фазы анализа,sys,1
фазы анализа программ.,анализа программ,sys,1
на этапе анализа в компиляторе выполняется распознавание текста исходной программы и заполнение информационных таблиц.,компиляторе,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",компиляции,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",контроль контекстных условий,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",генерация команд,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",распределение памяти,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",лексический анализ,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",машинно-зависимая оптимизация,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",фазы оптимизации,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",компилятор языка,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",фазы анализа,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",лексемы,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",таблица имен,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",контекстных условий,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",регистров,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",анализа программ,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",семантический анализ,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",оптимизации программ,sys,1
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",компилятор,sys,1
"получая на вход исходную программу как последовательность символов входного языка ( цепочку ), компилятор должен проверить, принадлежит ли она входному языку, а также определить правила, по которым эта последовательность строилась.",компилятор,sys,1
"анализ часто подразделяется на лексический, синтаксический и семантический анализ.",семантический анализ,sys,1
лексический анализатор (сканер).,анализатор,sys,1
лексический анализатор (сканер).,лексический анализатор,sys,1
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",лексического анализатора,sys,1
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",анализатора,sys,1
"задачей лексического анализатора является замена разнообразных элементов текста стандартно выглядящими лексемами, которые в дальнейшем будет легче обрабатывать в других частях компилятора.",лексемами,sys,1
"задачей лексического анализатора является замена разнообразных элементов текста стандартно выглядящими лексемами, которые в дальнейшем будет легче обрабатывать в других частях компилятора.",лексического анализатора,sys,1
"задачей лексического анализатора является замена разнообразных элементов текста стандартно выглядящими лексемами, которые в дальнейшем будет легче обрабатывать в других частях компилятора.",компилятора,sys,1
"задачей лексического анализатора является замена разнообразных элементов текста стандартно выглядящими лексемами, которые в дальнейшем будет легче обрабатывать в других частях компилятора.",анализатора,sys,1
"лексический анализ сопровождается исключением незначащих фрагментов текстов программ, например, комментариев.",лексический анализ,sys,1
подробнее задачи и проблемы лексического анализа рассматриваются в пособии формальные грам матики и языки.,лексического анализа,sys,1
элементы теории трансляции .,трансляции,sys,1
синтаксический и семантический анализаторы.,семантический анализаторы,sys,1
синтаксический и семантический анализаторы.,анализаторы,sys,1
"программа должна быть проверена на синтаксическую и семантическую правильность (должно быть проверено соблюдение контекстных условий), разделена на составные части, для каждой из которых должно быть сформировано внутреннее представление.",семантическую правильность,sys,1
"программа должна быть проверена на синтаксическую и семантическую правильность (должно быть проверено соблюдение контекстных условий), разделена на составные части, для каждой из которых должно быть сформировано внутреннее представление.",контекстных условий,sys,1
"в таблицы транслятора должна быть занесена вся информация, которую можно извлечь из обрабатываемой программы.",транслятора,sys,1
подробнее задачи и проблемы синтаксического и семантического анализа рассматриваются в разделе 3.3.2 и в пособии формальные граммати ки и языки.,семантического анализа,sys,1
"внутреннее представление исходной программы в компиляторе в наибольшей степени зависит от той обработки, которой должна подвергнуться программа.",компиляторе,sys,1
"некоторые виды внутреннего представления больше подходят для фиксации структуры компилируемой программы, другие ориентированы на проведение оптимизирующих преобразований, третьи наиболее удобны при синтезе (генерации) результата компиляции.",компиляции,sys,1
"некоторые виды внутреннего представления больше подходят для фиксации структуры компилируемой программы, другие ориентированы на проведение оптимизирующих преобразований, третьи наиболее удобны при синтезе (генерации) результата компиляции.",оптимизирующих преобразований,sys,1
более подробно внутреннее представление программ в компиляторах рассматривается в разделе 3.3.3 и в пособии формальные грамматик и и языки.,компиляторах,sys,1
фазы оптимизации программ.,оптимизации программ,sys,1
оптимизация важнейшая задача компилятора.,компилятора,sys,1
оптимизация программ может проводиться в интересах различных свойств программ.,оптимизация программ,sys,1
более подробно проблемы оптимизации программ в компиляторах рассматриваются в разделе 3.3.4.,компиляторах,sys,1
более подробно проблемы оптимизации программ в компиляторах рассматриваются в разделе 3.3.4.,оптимизации программ,sys,1
второй главной работой компилятора является генерация результирующей программы.,компилятора,sys,1
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",ассемблера,sys,1
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",языком ассемблера,sys,1
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",компилятора,sys,1
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",машинных команд,sys,1
"в случае машинных команд распознавателем этой последовательности символов будет выступать целевая вычислительная система, для которой создается результирующая программа.",вычислительная система,sys,1
"в случае машинных команд распознавателем этой последовательности символов будет выступать целевая вычислительная система, для которой создается результирующая программа.",машинных команд,sys,1
распределение памяти и регистров.,регистров,sys,1
распределение памяти и регистров.,распределение памяти,sys,1
"даже в ассемблерах можно встретить фрагменты, выполняющие в том или ином виде распределение памяти и регистров.",ассемблерах,sys,1
"даже в ассемблерах можно встретить фрагменты, выполняющие в том или ином виде распределение памяти и регистров.",регистров,sys,1
"даже в ассемблерах можно встретить фрагменты, выполняющие в том или ином виде распределение памяти и регистров.",распределение памяти,sys,1
"тем более, подобные действия по формированию зон или блоков памяти, определению смещений в этих зонах, приписке регистров некоторым элементам данных, необходимы в компиляторах.",компиляторах,sys,1
"тем более, подобные действия по формированию зон или блоков памяти, определению смещений в этих зонах, приписке регистров некоторым элементам данных, необходимы в компиляторах.",регистров,sys,1
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",регистрам,sys,1
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",байтов,sys,1
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",компоновка,sys,1
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",регистрам специального назначения,sys,1
более детально распределение памяти рассматривается в разделе 3.3.5.,распределение памяти,sys,1
генерация команд и машинно-зависимая оптимизация.,генерация команд,sys,1
генерация команд и машинно-зависимая оптимизация.,машинно-зависимая оптимизация,sys,1
"этап генерации команд (кода) проводится в компиляторах, однако иногда этот этап присутствует и в интерпретаторах.",генерации команд,sys,1
"этап генерации команд (кода) проводится в компиляторах, однако иногда этот этап присутствует и в интерпретаторах.",интерпретаторах,sys,1
"этап генерации команд (кода) проводится в компиляторах, однако иногда этот этап присутствует и в интерпретаторах.",компиляторах,sys,1
на этом этапе производится окончательное преобразование внутреннего представления транслируемой программы к записи на машинном языке или на языке ассемблера.,ассемблера,sys,1
на этом этапе производится окончательное преобразование внутреннего представления транслируемой программы к записи на машинном языке или на языке ассемблера.,машинном языке,sys,1
на этом этапе производится окончательное преобразование внутреннего представления транслируемой программы к записи на машинном языке или на языке ассемблера.,языке ассемблера,sys,1
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",интерпретаторе,sys,1
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",трансляции,sys,1
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",стратегией трансляции,sys,1
"однако возникновение программы, готовой к интерпретации или выполнению в результате работы только компилятора, возможно не всегда.",интерпретации,sys,1
"однако возникновение программы, готовой к интерпретации или выполнению в результате работы только компилятора, возможно не всегда.",компилятора,sys,1
"многие современные языки, среди которых си, си++, java, предлагают другую концепцию программы, основанную на понятии единицы трансляции .",трансляции,sys,1
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",системы программирования,sys,1
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",компилятора,sys,1
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",редактором связей,sys,1
40 в подобных случаях интерпретацию программы также нельзя проводить непосредственно после ее компиляции.,компиляции,sys,1
40 в подобных случаях интерпретацию программы также нельзя проводить непосредственно после ее компиляции.,интерпретацию,sys,1
более детально проблемы генерации кода рассматриваются в разделе 3.3.6.,генерации кода,sys,1
однопроходный компилятор разобранная схема работы компилятора является концептуальной.,компилятора,sys,1
однопроходный компилятор разобранная схема работы компилятора является концептуальной.,компилятор,sys,1
"многие компиляторы, однако, построены с отступлениями (иногда значительными) от рассмотренной схемы.",компиляторы,sys,1
"фазы компиляции могут разбиваться на отдельные составляющие или, напротив, объединяться друг с другом.",компиляции,sys,1
"фазы компиляции могут разбиваться на отдельные составляющие или, напротив, объединяться друг с другом.",фазы компиляции,sys,1
одним из критериев является объем доступной оперативной памяти.,оперативной памяти,sys,1
"если памяти недостаточно, разработчикам приходится разбивать процесс компиляции на части, передавая информацию от одной части к другой через внешнюю память, в которую записывается промежуточное представление транслируемой программы.",компиляции,sys,1
"если памяти недостаточно, разработчикам приходится разбивать процесс компиляции на части, передавая информацию от одной части к другой через внешнюю память, в которую записывается промежуточное представление транслируемой программы.",внешнюю память,sys,1
"существуют и другие критерии, например, планируемая скорость работы транслятора, степень оптимизации программ.",транслятора,sys,1
"существуют и другие критерии, например, планируемая скорость работы транслятора, степень оптимизации программ.",оптимизации программ,sys,1
"при выполнении каждого прохода компилятору доступна вся информация, накопленная в информационных таблицах на предыдущих проходах.",компилятору,sys,1
"при выполнении каждого прохода компилятору доступна вся информация, накопленная в информационных таблицах на предыдущих проходах.",прохода компилятору,sys,1
при выполнении очередного прохода компилятор может также вновь обратиться к исходному тексту программы.,прохода компилятор,sys,1
при выполнении очередного прохода компилятор может также вновь обратиться к исходному тексту программы.,компилятор,sys,1
"пользователю становятся доступными только результаты самого последнего прохода в виде объектной программы, сформированной компилятором, никакие промежуточные результаты компиляции пользователю не видны.",компиляции,sys,1
"пользователю становятся доступными только результаты самого последнего прохода в виде объектной программы, сформированной компилятором, никакие промежуточные результаты компиляции пользователю не видны.",компилятором,sys,1
"пользователю становятся доступными только результаты самого последнего прохода в виде объектной программы, сформированной компилятором, никакие промежуточные результаты компиляции пользователю не видны.",объектной программы,sys,1
"поскольку процедуры чтения из внешней памяти и записи на внешнюю память имеют относительно невысокую скорость, разработчики компиляторов всегда стремятся уменьшить количество проходов в своих компиляторах.",внешней памяти,sys,1
"поскольку процедуры чтения из внешней памяти и записи на внешнюю память имеют относительно невысокую скорость, разработчики компиляторов всегда стремятся уменьшить количество проходов в своих компиляторах.",компиляторах,sys,1
"поскольку процедуры чтения из внешней памяти и записи на внешнюю память имеют относительно невысокую скорость, разработчики компиляторов всегда стремятся уменьшить количество проходов в своих компиляторах.",внешнюю память,sys,1
"поскольку процедуры чтения из внешней памяти и записи на внешнюю память имеют относительно невысокую скорость, разработчики компиляторов всегда стремятся уменьшить количество проходов в своих компиляторах.",компиляторов,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",синтаксического анализатора,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",анализатор,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",сопрограмма,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",компилятора,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",лексический анализатор,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",трансляции,sys,1
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",анализатора,sys,1
аналогично может работать программа семантического анализа и генератора команд.,семантического анализа,sys,1
в современных компиляторах лексический и синтаксический анализаторы это взаимосвязанные части общего процесса.,синтаксический анализаторы,sys,1
в современных компиляторах лексический и синтаксический анализаторы это взаимосвязанные части общего процесса.,компиляторах,sys,1
в современных компиляторах лексический и синтаксический анализаторы это взаимосвязанные части общего процесса.,анализаторы,sys,1
возможны два принципиально различных метода организации взаимосвязи лексического и синтаксического анализа последовательный и параллельный.,синтаксического анализа,sys,1
при последовательном варианте лексический анализатор просматривает весь текст исходной программы от начала до конца и преобразует его в таблицу лексем.,анализатор,sys,1
при последовательном варианте лексический анализатор просматривает весь текст исходной программы от начала до конца и преобразует его в таблицу лексем.,лексический анализатор,sys,1
"таблица лексем заполняется вся и полностью, компилятор использует ее для последующих фаз компиляции, но не изменяет.",компиляции,sys,1
"таблица лексем заполняется вся и полностью, компилятор использует ее для последующих фаз компиляции, но не изменяет.",компилятор,sys,1
"таблица лексем заполняется вся и полностью, компилятор использует ее для последующих фаз компиляции, но не изменяет.",фаз компиляции,sys,1
"если в процессе работы лексический анализатор не смог правильно определить тип лексемы, считается, что программа содержит ошибку.",лексемы,sys,1
"если в процессе работы лексический анализатор не смог правильно определить тип лексемы, считается, что программа содержит ошибку.",анализатор,sys,1
"если в процессе работы лексический анализатор не смог правильно определить тип лексемы, считается, что программа содержит ошибку.",лексический анализатор,sys,1
получающийся в данном случае компилятор никогда не может быть однопроходным.,компилятор,sys,1
последовательная работа лексического и синтаксического анализаторов представляет собой самый простой вариант их взаимодействия.,анализаторов,sys,1
последовательная работа лексического и синтаксического анализаторов представляет собой самый простой вариант их взаимодействия.,синтаксического анализаторов,sys,1
"она проще в реализации и в определенных условиях обеспечивает более высокую скорость работы компилятора, чем параллельное взаимодействие.",компилятора,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",лексический анализ,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",лексемой,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",анализатор,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",лексический анализатор,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",семантический анализатор,sys,1
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",объектная программа,sys,1
лексический анализатор выделяет очередную лексему в исходном тексте и сразу передает ее синтаксическому анализатору.,лексему,sys,1
лексический анализатор выделяет очередную лексему в исходном тексте и сразу передает ее синтаксическому анализатору.,анализатору,sys,1
лексический анализатор выделяет очередную лексему в исходном тексте и сразу передает ее синтаксическому анализатору.,синтаксическому анализатору,sys,1
лексический анализатор выделяет очередную лексему в исходном тексте и сразу передает ее синтаксическому анализатору.,анализатор,sys,1
лексический анализатор выделяет очередную лексему в исходном тексте и сразу передает ее синтаксическому анализатору.,лексический анализатор,sys,1
"после того, как синтаксический анализатор успешно выполнит разбор очередной законченной конструкции исходного языка (обычно такой конструкцией является отдельный оператор исходного языка), лексический анализатор помещает найденные лексемы в таблицу лексем и в таблицу идентификаторов, а затем продолжает разбор дальше в том же порядке.",лексический анализатор,sys,1
"после того, как синтаксический анализатор успешно выполнит разбор очередной законченной конструкции исходного языка (обычно такой конструкцией является отдельный оператор исходного языка), лексический анализатор помещает найденные лексемы в таблицу лексем и в таблицу идентификаторов, а затем продолжает разбор дальше в том же порядке.",синтаксический анализатор,sys,1
"после того, как синтаксический анализатор успешно выполнит разбор очередной законченной конструкции исходного языка (обычно такой конструкцией является отдельный оператор исходного языка), лексический анализатор помещает найденные лексемы в таблицу лексем и в таблицу идентификаторов, а затем продолжает разбор дальше в том же порядке.",анализатор,sys,1
"после того, как синтаксический анализатор успешно выполнит разбор очередной законченной конструкции исходного языка (обычно такой конструкцией является отдельный оператор исходного языка), лексический анализатор помещает найденные лексемы в таблицу лексем и в таблицу идентификаторов, а затем продолжает разбор дальше в том же порядке.",таблицу идентификаторов,sys,1
параллельное взаимодействие лексического и синтаксического анализаторов строится по такой схеме: преобразование входного языка.,анализаторов,sys,1
параллельное взаимодействие лексического и синтаксического анализаторов строится по такой схеме: преобразование входного языка.,синтаксического анализаторов,sys,1
"вторая задача лексического анализатора есть выполнение действий, связанных с обнаружением и распознаванием той или иной лексемы.",лексемы,sys,1
"вторая задача лексического анализатора есть выполнение действий, связанных с обнаружением и распознаванием той или иной лексемы.",лексического анализатора,sys,1
"вторая задача лексического анализатора есть выполнение действий, связанных с обнаружением и распознаванием той или иной лексемы.",анализатора,sys,1
"фактически ее решение приводит к тому, что с конечным автоматом, лежащим в основе лексического анализатора, ассоциируют не только входной язык, но и выходной.",лексического анализатора,sys,1
"фактически ее решение приводит к тому, что с конечным автоматом, лежащим в основе лексического анализатора, ассоциируют не только входной язык, но и выходной.",анализатора,sys,1
"автомат должен не только распознать правильную лексему на входе, но и породить связанную с ней последовательность символов на выходе.",лексему,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",лексемой,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",лексемы,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",таблица имен,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",анализатор,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",лексема,sys,1
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",лексический анализатор,sys,1
"он должен уметь выполнять такие действия, как запись выделенной лексемы в таблицу лексем, поиск ее в таблице идентификаторов или в таблице констант, а также запись нового имени или новой константы в соответствующую таблицу.",лексемы,sys,1
"он должен уметь выполнять такие действия, как запись выделенной лексемы в таблицу лексем, поиск ее в таблице идентификаторов или в таблице констант, а также запись нового имени или новой константы в соответствующую таблицу.",лексем,sys,1
"он должен уметь выполнять такие действия, как запись выделенной лексемы в таблицу лексем, поиск ее в таблице идентификаторов или в таблице констант, а также запись нового имени или новой константы в соответствующую таблицу.",таблице идентификаторов,sys,1
"он должен уметь выполнять такие действия, как запись выделенной лексемы в таблицу лексем, поиск ее в таблице идентификаторов или в таблице констант, а также запись нового имени или новой константы в соответствующую таблицу.",таблицу лексем,sys,1
часто подобные действия выполняются непосредственно при обнаружении лексемы в исходном тексте.,лексемы,sys,1
"выбирая тот или иной способ представления таблиц в программах компилятора, следует руководствоваться следующими требованиями к ним: структура таблиц должна обеспечивать эффективность поиска в таблицах; структура таблиц должна обеспечивать эффективность вставок в таблицы (имеются в виду, как вставки новых элементов, так и вставки новой информации в ранее имевшиеся записи); структура таблиц должна обеспечивать возможность динамического роста объемов таблиц.",компилятора,sys,1
влияет на программу реального лексического анализатора и необходимость отслеживать возможные ошибки в тексте исходных программ.,лексического анализатора,sys,1
влияет на программу реального лексического анализатора и необходимость отслеживать возможные ошибки в тексте исходных программ.,анализатора,sys,1
"анализатор должен принимать меры для максимально более полной локализации ошибок, причем не только лексических, но также и синтаксических и семантических.",анализатор,sys,1
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,компиляции,sys,1
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,семантический анализ,sys,1
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,стадий компиляции,sys,1
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,семантического анализа,sys,1
"со стороны лексического анализатора ему передаются все созданные таблицы (идентификаторов, констант и т. д.)",лексического анализатора,sys,1
"со стороны лексического анализатора ему передаются все созданные таблицы (идентификаторов, констант и т. д.)",анализатора,sys,1
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",синтаксического разбора,sys,1
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",анализатора,sys,1
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",синтаксического анализатора,sys,1
эти результаты представляются на выходе синтаксического анализатора в одной из форм внутреннего представления программ в компиляторе.,анализатора,sys,1
эти результаты представляются на выходе синтаксического анализатора в одной из форм внутреннего представления программ в компиляторе.,компиляторе,sys,1
эти результаты представляются на выходе синтаксического анализатора в одной из форм внутреннего представления программ в компиляторе.,синтаксического анализатора,sys,1
"обычно на этапе семантического анализа используются некоторые варианты синтаксических деревьев, построенных в результате синтаксического разбора.",синтаксических деревьев,sys,1
"обычно на этапе семантического анализа используются некоторые варианты синтаксических деревьев, построенных в результате синтаксического разбора.",семантического анализа,sys,1
"обычно на этапе семантического анализа используются некоторые варианты синтаксических деревьев, построенных в результате синтаксического разбора.",синтаксического разбора,sys,1
"такое древовидное представление программы удобно для проведения семантического анализа потому, что для анализа семантики компилируемой программы важно знать именно общую структуру этой программы.",семантического анализа,sys,1
семантический анализ в свою очередь тоже может разделяться на отдельные стадии.,семантический анализ,sys,1
одна из них вполне может совмещаться с синтаксическим анализом и проводится параллельно с ним.,синтаксическим анализом,sys,1
"другая стадия выполняется позднее, когда завершен синтаксический анализ последней конструкции программы и начинается подготовка к генерации объектной программы.",синтаксический анализ,sys,1
"другая стадия выполняется позднее, когда завершен синтаксический анализ последней конструкции программы и начинается подготовка к генерации объектной программы.",объектной программы,sys,1
"другая стадия выполняется позднее, когда завершен синтаксический анализ последней конструкции программы и начинается подготовка к генерации объектной программы.",генерации объектной программы,sys,1
"первая часть выполняется после завершения синтаксического анализа очередной конструкции входного языка (процедуры, функции, блока операторов и т. п.) на 44 основе имеющихся в информационных таблицах данных.",синтаксического анализа,sys,1
вторая часть связана с проведением полного семантического анализа всей программы.,семантического анализа,sys,1
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",семантического анализатора,sys,1
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",контекстных условий,sys,1
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",анализатора,sys,1
"проверки, выполняемые семантическим анализатором, называются статическими проверками.",анализатором,sys,1
"проверки, выполняемые семантическим анализатором, называются статическими проверками.",семантическим анализатором,sys,1
"проверки, выполняемые семантическим анализатором, называются статическими проверками.",статическими проверками,sys,1
"они отличаются от динамических проверок, выполняемых в процессе работы программы.",динамических проверок,sys,1
проверка контекстных условий по виду (синтаксической записи) большинства операторов нельзя утверждать их семантическую правильность или ошибочность.,семантическую правильность,sys,1
проверка контекстных условий по виду (синтаксической записи) большинства операторов нельзя утверждать их семантическую правильность или ошибочность.,контекстных условий,sys,1
проверка семантических соглашений и контекстных условий заключается в сопоставлении входных цепочек исходной программы с требованиями семантики языка программирования.,контекстных условий,sys,1
"такие соглашения есть в каждом языке, проверять их на этапе синтаксического анализа невозможно.",синтаксического анализа,sys,1
обычными видами статических проверок в компиляторах являются 1.,статических проверок,sys,1
обычными видами статических проверок в компиляторах являются 1.,компиляторах,sys,1
"компилятор обязан сообщить об ошибке, если в программе предписано выполнить некоторую операцию с несовместимым с ней операндом, например, произвести сложение указателей.",компилятор,sys,1
передача управления за пределы синтаксических конструкций должна производиться только в разрешенные места программы.,синтаксических конструкций,sys,1
"компилятор должен проверять, что во всех местах использовано одинаковое имя.",компилятор,sys,1
"например, в языке ада 45 процедура блок или цикл может иметь имя, которое должно находиться и в начале, и в конце синтаксической конструкции.",синтаксической конструкции,sys,1
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",условном операторе,sys,1
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",контекстным условиям,sys,1
"семантический анализатор должен фиксировать все случаи нарушения семантических соглашений и условий, найденные им в программе, и выдавать сообщения о семантических ошибках в программе.",анализатор,sys,1
"семантический анализатор должен фиксировать все случаи нарушения семантических соглашений и условий, найденные им в программе, и выдавать сообщения о семантических ошибках в программе.",семантический анализатор,sys,1
"д. однако большинство реальных языков программирования допускает некоторые вольности при записи выражений, гарантируя, что в компиляторах будут предприняты меры по согласованию типов.",компиляторах,sys,1
"задача семантического анализатора состоит в поиске всех мест, где нужно выполнить подобные преобразования типов и вставить во внутреннее представление явные команды преобразования.",семантического анализатора,sys,1
"задача семантического анализатора состоит в поиске всех мест, где нужно выполнить подобные преобразования типов и вставить во внутреннее представление явные команды преобразования.",анализатора,sys,1
"иногда эти преобразования тривиальны и состоят из одной-двух команд, а иногда они выполняются встроенными библиотечными функциями.",библиотечными функциями,sys,1
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",байтов,sys,1
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",регистров,sys,1
"д. все это означает, что действия, выполняемые при семантическом анализе компилируемой программы, существенным образом влияют на порождаемые компилятором объектные программы.",объектные программы,sys,1
"д. все это означает, что действия, выполняемые при семантическом анализе компилируемой программы, существенным образом влияют на порождаемые компилятором объектные программы.",компилятором,sys,1
"д. все это означает, что действия, выполняемые при семантическом анализе компилируемой программы, существенным образом влияют на порождаемые компилятором объектные программы.",семантическом анализе,sys,1
"проверка правил программирования многие современные компиляторы не только проверяют ограничения и требования, выставляемые семантикой языка, но также выполняют дополнительные проверки, способствуя выработке правильного стиля программирования.",компиляторы,sys,1
"результат вычисления функции должен быть определен при любом ходе ее выполнения (например, независимо от выбора исполняемых ветвей в условных операторах).",условных операторах,sys,1
47 условные операторы (всех разновидностей) должны предусматривать возможность хода выполнения программы по любой из своих ветвей.,условные операторы,sys,1
разнесение имен по пространствам именования распределение использованных в программе идентификаторов по пространствам именования есть одна из важных задач этапа семантического анализа.,семантического анализа,sys,1
"на этапе лексического анализа разрешить все эти проблемы абсолютно невозможно там уникальность имен определяется только их записью как последовательности букв, цифр и других разрешенных символов.",лексического анализа,sys,1
на более поздних стадиях компиляции одинаково записываемые имена необходимо заменять на новые уникальные в пределах всей программы.,компиляции,sys,1
на более поздних стадиях компиляции одинаково записываемые имена необходимо заменять на новые уникальные в пределах всей программы.,стадиях компиляции,sys,1
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",модулей,sys,1
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",объектно-ориентированных языках,sys,1
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",модулей программы,sys,1
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",компиляторов,sys,1
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",редакторами связей,sys,1
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",систем программирования,sys,1
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",объектной программе,sys,1
для таких имен в конкретных системах программирования могут существовать собственные соглашения именования.,системах программирования,sys,1
"такие имена должны быть уникальными на уровне библиотек, в которые они могут попадать после завершения компиляции.",компиляции,sys,1
"внутреннее представление программ дополнительную сложность задаче компиляции придает тот факт, что из-за серьезных различий между входным и выходным языками провести непосредственное преобразование из одного языка в другой не всегда представляется возможным.",компиляции,sys,1
"даже синтаксический анализ исходного текста приходится делать поэтапно, разбивая его на лексическую и собственно синтаксическую часть.",синтаксический анализ,sys,1
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",компиляторах,sys,1
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",компилятора,sys,1
"к основным свойствам языков внутреннего представления программ можно отнести такие: языки внутреннего представления позволяют фиксировать синтаксическую структуру исходной программы; текст на языках внутреннего представления можно автоматически генерировать во время синтаксического анализа; конструкции языков внутреннего представления относительно просто транслируются в объектный код, либо достаточно эффективно интерпретируются.",синтаксического анализа,sys,1
"к основным свойствам языков внутреннего представления программ можно отнести такие: языки внутреннего представления позволяют фиксировать синтаксическую структуру исходной программы; текст на языках внутреннего представления можно автоматически генерировать во время синтаксического анализа; конструкции языков внутреннего представления относительно просто транслируются в объектный код, либо достаточно эффективно интерпретируются.",объектный код,sys,1
легче всего синтаксическому анализатору организовать внутреннее (а для себя выходное) представление в виде дерева синтаксического разбора.,синтаксического разбора,sys,1
легче всего синтаксическому анализатору организовать внутреннее (а для себя выходное) представление в виде дерева синтаксического разбора.,анализатору,sys,1
легче всего синтаксическому анализатору организовать внутреннее (а для себя выходное) представление в виде дерева синтаксического разбора.,дерева синтаксического разбора,sys,1
легче всего синтаксическому анализатору организовать внутреннее (а для себя выходное) представление в виде дерева синтаксического разбора.,синтаксическому анализатору,sys,1
"однако дерево разбора содержит огромное количество избыточной информации: в нем присутствуют даже нетерминальные символы, не несущие никакой полезной информации.",нетерминальные символы,sys,1
в основе каждого из видов внутреннего представления программ лежит некоторый метод представления синтаксического дерева.,синтаксического дерева,sys,1
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",инфиксная запись,sys,1
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",компиляторах,sys,1
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",префиксная запись,sys,1
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",синтаксическое дерево,sys,1
язык ассемблера целевой или абстрактной машины.,язык ассемблера,sys,1
язык ассемблера целевой или абстрактной машины.,ассемблера,sys,1
"в одном компиляторе может использоваться любая из этих форм, обычно выбираются несколько разных видов внутреннего представления программ для разных стадий компиляции.",компиляции,sys,1
"в одном компиляторе может использоваться любая из этих форм, обычно выбираются несколько разных видов внутреннего представления программ для разных стадий компиляции.",стадий компиляции,sys,1
"в одном компиляторе может использоваться любая из этих форм, обычно выбираются несколько разных видов внутреннего представления программ для разных стадий компиляции.",компиляторе,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",синтаксический разбор,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",объектной программы,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",генерация объектной программы,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",проходе компилятора,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",семантический анализ,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",оптимизации программ,sys,1
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",компилятора,sys,1
"списки это структуры представления программ, которые можно наиболее просто и эффективно строить на этапе синтаксического анализа.",синтаксического анализа,sys,1
"обычно списки используются для представления синтаксических деревьев таких структур, вершинами которых являются операции, а листьями операнды.",синтаксических деревьев,sys,1
"структура синтаксических деревьев наиболее точно отражает синтаксис языка программирования, на котором была написана исходная программа.",синтаксических деревьев,sys,1
"обычно перед построением синтаксических деревьев в грамматиках языка избавляются от ц е п н ы х п р а в и л в и д а a b, г д е a и b нетерминальные символы.",синтаксических деревьев,sys,1
"обычно перед построением синтаксических деревьев в грамматиках языка избавляются от ц е п н ы х п р а в и л в и д а a b, г д е a и b нетерминальные символы.",нетерминальные символы,sys,1
"в тех случаях, когда синтаксическому дереву соответствует последовательность операций, порождающая в результате команды объектной программы, такое дерево называют деревом операций.",деревом операций,sys,1
"в тех случаях, когда синтаксическому дереву соответствует последовательность операций, порождающая в результате команды объектной программы, такое дерево называют деревом операций.",объектной программы,sys,1
"в тех случаях, когда синтаксическому дереву соответствует последовательность операций, порождающая в результате команды объектной программы, такое дерево называют деревом операций.",синтаксическому дереву,sys,1
"дерево операций строится непосредственно и автоматически из дерева вывода, порождаемого синтаксическим анализатором.",синтаксическим анализатором,sys,1
"дерево операций строится непосредственно и автоматически из дерева вывода, порождаемого синтаксическим анализатором.",анализатором,sys,1
"дерево операций строится непосредственно и автоматически из дерева вывода, порождаемого синтаксическим анализатором.",дерево операций,sys,1
"для этого из него удаляются цепочки нетерминальных символов, а также узлы, не несущие семантической нагрузки при генерации объектной программы (например, скобки, меняющие порядок операций): 50 грамматика исходного языка не имеет никакого влияния на то, какой узел в дереве будет операцией, а какой операндом.",объектной программы,sys,1
"для этого из него удаляются цепочки нетерминальных символов, а также узлы, не несущие семантической нагрузки при генерации объектной программы (например, скобки, меняющие порядок операций): 50 грамматика исходного языка не имеет никакого влияния на то, какой узел в дереве будет операцией, а какой операндом.",нетерминальных символов,sys,1
"для этого из него удаляются цепочки нетерминальных символов, а также узлы, не несущие семантической нагрузки при генерации объектной программы (например, скобки, меняющие порядок операций): 50 грамматика исходного языка не имеет никакого влияния на то, какой узел в дереве будет операцией, а какой операндом.",генерации объектной программы,sys,1
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",компиляции,sys,1
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",деревом операций,sys,1
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",объектной программы,sys,1
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",стадиях компиляции,sys,1
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",генерации объектной программы,sys,1
многие оптимизирующие компиляторы выбирают именно древовидные структуры для внутреннего представления программ.,компиляторы,sys,1
недостатком деревьев является сложность их преобразования в линейную последовательность команд объектной программы.,объектной программы,sys,1
"тетрады представляют собой запись операций в форме четырех составляющих: операции, двух операндов и результата операции: <операция>(<операнд1>,<операнд2>,<результат>) тетрады составляют линейную последовательность команд, как в следующей записи арифметического выражения a=b c+d b 10 в виде последовательности тетрад: + b c d b 10 a = представление арифметического выражения языка си++ a = b c + d b 10 в виде дерева операций (один из возможных 51 1 b c t1 2 + t1 d t2 3 b 10 t3 4 - t2 t3 t4 5 = t4 ? a при вычислении выражения, записанного в форме тетрад, они вычисляются последовательно одна за другой, без каких-либо приоритетов.",дерева операций,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",архитектуры вычислительной системы,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",объектной программы,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",компиляция,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",язык ассемблера,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",вычислительной системы,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",языка ассемблера,sys,1
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",ассемблера,sys,1
"некоторые сложности при работе с тетрадами могут возникать потому, что у вычислительных машин редко встречаются трехадресные системы команд.",вычислительных машин,sys,1
"триады представляют собой запись операций в форме из трех составляющих: операции и двух операндов: <операция>(<операнд1>,<операнд2>) особенностью триад является то, что один или оба операнда в триаде могут быть ссылками на другую триаду в том случае, если в качестве операнда данной триады выступает результат выполнения другой триады, например, так в виде триад можно записать арифметическое выражение a=b c+d b 10: 1 b c 2 + 1 d 3 b 10 4 - 2 3 5 = a 4 ссылка на триады в реальных компиляторах обычно реализуется настоящим указателем, что делает триады списочной структурой и облегчает процессы преобразования триад.",компиляторах,sys,1
"такое свойство триад приводит к необходимости использования в компиляторах специальных алгоритмов распределения памяти для хранения 52 промежуточных результатов, поскольку в отличие от тетрад, какие- либо явные временные переменные в триадах не используются.",компиляторах,sys,1
"такое свойство триад приводит к необходимости использования в компиляторах специальных алгоритмов распределения памяти для хранения 52 промежуточных результатов, поскольку в отличие от тетрад, какие- либо явные временные переменные в триадах не используются.",распределения памяти,sys,1
"триады требуют меньше памяти для представления программ и имеют в этом преимущество перед тетрадами, к тому же триады ближе к двухадресным машинным командам, чем тетрады, поэтому их легче преобразовывать к окончательному виду объектной программы.",объектной программы,sys,1
"триады требуют меньше памяти для представления программ и имеют в этом преимущество перед тетрадами, к тому же триады ближе к двухадресным машинным командам, чем тетрады, поэтому их легче преобразовывать к окончательному виду объектной программы.",машинным командам,sys,1
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",вычислительных машин,sys,1
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",трансляции,sys,1
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",объектный код,sys,1
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",регистров,sys,1
инфиксная запись.,инфиксная запись,sys,1
"запись операций и операндов в традиционном виде применяется только в программах, подаваемых на вход компиляторов.",компиляторов,sys,1
префиксная запись.,префиксная запись,sys,1
префиксная запись иначе называется польской записью или прямой польской записью.,прямой польской записью,sys,1
префиксная запись иначе называется польской записью или прямой польской записью.,префиксная запись,sys,1
префиксная запись иначе называется польской записью или прямой польской записью.,польской записью,sys,1
"некоторое неудобство прямой польской записи, которое привело к использованию обратной записи, состоит в том, что операторы в ней следуют не в том порядке, в каком они должны выполняться в вычислительной машине: = a - + b c d b 10 постфиксная (инверсная, обратная, суффиксная) запись.",прямой польской записи,sys,1
"некоторое неудобство прямой польской записи, которое привело к использованию обратной записи, состоит в том, что операторы в ней следуют не в том порядке, в каком они должны выполняться в вычислительной машине: = a - + b c d b 10 постфиксная (инверсная, обратная, суффиксная) запись.",вычислительной машине,sys,1
"некоторое неудобство прямой польской записи, которое привело к использованию обратной записи, состоит в том, что операторы в ней следуют не в том порядке, в каком они должны выполняться в вычислительной машине: = a - + b c d b 10 постфиксная (инверсная, обратная, суффиксная) запись.",польской записи,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",обратной польской записи,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",прямой польской записи,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",инверсная польская запись,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",инфиксной записи,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",полиз,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",польская запись,sys,1
"в отличие от прямой польской записи инверсная польская запись (полиз) обладает следующими важными свойствами: операнды в обратной польской записи следуют в том же порядке, в каком они следуют в инфиксной записи.",польской записи,sys,1
"операции в обратной польской записи следуют в том порядке, в каком они должны вычисляться (слева направо).",обратной польской записи,sys,1
"операции в обратной польской записи следуют в том порядке, в каком они должны вычисляться (слева направо).",польской записи,sys,1
обратная польская запись является наиболее удобным видом представления программ в компиляторах.,компиляторах,sys,1
обратная польская запись является наиболее удобным видом представления программ в компиляторах.,обратная польская запись,sys,1
обратная польская запись является наиболее удобным видом представления программ в компиляторах.,польская запись,sys,1
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",полиз,sys,1
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",трансляции,sys,1
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",компиляторах,sys,1
"программы, представленные в виде полиз трудно поддаются анализу, поэтому оптимизирующие компиляторы создают полиз после проведения глобальных оптимизирующих преобразований, когда требуется преобразовать уже оптимизированную древовидную 53 структуру в линейную.",полиз,sys,1
"программы, представленные в виде полиз трудно поддаются анализу, поэтому оптимизирующие компиляторы создают полиз после проведения глобальных оптимизирующих преобразований, когда требуется преобразовать уже оптимизированную древовидную 53 структуру в линейную.",оптимизирующих преобразований,sys,1
"программы, представленные в виде полиз трудно поддаются анализу, поэтому оптимизирующие компиляторы создают полиз после проведения глобальных оптимизирующих преобразований, когда требуется преобразовать уже оптимизированную древовидную 53 структуру в линейную.",компиляторы,sys,1
работа с обратной польской записью в компиляторах подробно рассмотрена в пособии формальные грамма тики и языки.,компиляторах,sys,1
работа с обратной польской записью в компиляторах подробно рассмотрена в пособии формальные грамма тики и языки.,обратной польской записью,sys,1
работа с обратной польской записью в компиляторах подробно рассмотрена в пособии формальные грамма тики и языки.,польской записью,sys,1
язык ассемблера и машинные команды.,язык ассемблера,sys,1
язык ассемблера и машинные команды.,ассемблера,sys,1
язык ассемблера и машинные команды.,машинные команды,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",машинный язык,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",язык ассемблера,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",машинных команд,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",ассемблера,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",компилятора,sys,1
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",транслятора,sys,1
"однако некоторые компиляторы преобразованием программ к такому виду не заканчивают свою работу, а лишь продолжают ее.",компиляторы,sys,1
"иногда в компиляторах, даже очень сложных и проводящих глубокую оптимизацию, тоже возникает потребность на некотором этапе преобразования транслируемой программы перевести программу к виду, более приближенному к ее окончательному представлению.",компиляторах,sys,1
при этом запись на языке ассемблера может не сразу оказаться наиболее удобным представлением.,ассемблера,sys,1
при этом запись на языке ассемблера может не сразу оказаться наиболее удобным представлением.,языке ассемблера,sys,1
"от языка ассемблера он отличается тем, что в нем могут не приниматься во внимание некоторые архитектурные особенности целевой машины, в частности, для псевдокода является обычным предположение о том, что объектная машина обладает неограниченной памятью и бесконечным числом регистров общего назначения.",ассемблера,sys,1
"от языка ассемблера он отличается тем, что в нем могут не приниматься во внимание некоторые архитектурные особенности целевой машины, в частности, для псевдокода является обычным предположение о том, что объектная машина обладает неограниченной памятью и бесконечным числом регистров общего назначения.",языка ассемблера,sys,1
"от языка ассемблера он отличается тем, что в нем могут не приниматься во внимание некоторые архитектурные особенности целевой машины, в частности, для псевдокода является обычным предположение о том, что объектная машина обладает неограниченной памятью и бесконечным числом регистров общего назначения.",регистров,sys,1
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",распределения памяти,sys,1
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",машинно-зависимой оптимизации,sys,1
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",регистров,sys,1
оптимизация в компиляторах переход от трансляции всей программы как целого к трансляции последовательности относительно независимых операторов (в синтаксическом плане в контекстно-свободных грамматиках операторы действительно не зависят друг от друга),компиляторах,sys,1
оптимизация в компиляторах переход от трансляции всей программы как целого к трансляции последовательности относительно независимых операторов (в синтаксическом плане в контекстно-свободных грамматиках операторы действительно не зависят друг от друга),трансляции,sys,1
описанные ранее методы анализа программ и генерации этих программ на других языках позволяют решить главную задачу компиляции отыскать эквивалентное представление исходной программы в терминах выходного языка.,компиляции,sys,1
описанные ранее методы анализа программ и генерации этих программ на других языках позволяют решить главную задачу компиляции отыскать эквивалентное представление исходной программы в терминах выходного языка.,анализа программ,sys,1
"под оптимизацией программ имеется в виду обработка, связанная с переупорядочением и изменением операций в компилируемой программе в целях получения более эффективной объектной программы.",оптимизацией программ,sys,1
"под оптимизацией программ имеется в виду обработка, связанная с переупорядочением и изменением операций в компилируемой программе в целях получения более эффективной объектной программы.",объектной программы,sys,1
"54 оптимизация программ вынужденная мера, прибегать к которой приходится потому, что компилятор не в состоянии выполнить семантический анализ всей исходной программы как единого объекта, оценить и понять смысл программы.",семантический анализ,sys,1
"54 оптимизация программ вынужденная мера, прибегать к которой приходится потому, что компилятор не в состоянии выполнить семантический анализ всей исходной программы как единого объекта, оценить и понять смысл программы.",компилятор,sys,1
"54 оптимизация программ вынужденная мера, прибегать к которой приходится потому, что компилятор не в состоянии выполнить семантический анализ всей исходной программы как единого объекта, оценить и понять смысл программы.",оптимизация программ,sys,1
оптимизация программ проводится в компиляторах в различных местах: первичную оптимизацию может проводить сам пользователь (пометка i).,компиляторах,sys,1
оптимизация программ проводится в компиляторах в различных местах: первичную оптимизацию может проводить сам пользователь (пометка i).,оптимизация программ,sys,1
"некоторые системы программирования предлагают поддержку пользовательской оптимизации, в частности, имеют в своем составе профилировщики, помогающие выявить те фрагменты программ, которые для своего выполнения требуют максимальной доли времени работы программы.",системы программирования,sys,1
"некоторые системы программирования предлагают поддержку пользовательской оптимизации, в частности, имеют в своем составе профилировщики, помогающие выявить те фрагменты программ, которые для своего выполнения требуют максимальной доли времени работы программы.",профилировщики,sys,1
"к таким техническим характеристикам относят обычно две: объем памяти, необходимый для выполнения объектной программы (для хранения данных и самих команд программы), и скорость выполнения программы (ее быстродействие).",объектной программы,sys,1
"при выборе используемых в компиляторе оптимизирующих преобразований руководствуются следующими критериями: все преобразования должны быть эквивалентными (для всех наборов данных, даже неправильных).",компиляторе,sys,1
"при выборе используемых в компиляторе оптимизирующих преобразований руководствуются следующими критериями: все преобразования должны быть эквивалентными (для всех наборов данных, даже неправильных).",оптимизирующих преобразований,sys,1
"время компиляции от включения оптимизирующих преобразований всегда растет, но иногда это не очень важно.",компиляции,sys,1
"время компиляции от включения оптимизирующих преобразований всегда растет, но иногда это не очень важно.",оптимизирующих преобразований,sys,1
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",компилятора,sys,1
некоторые преобразования считаются удовлетворяющими этим критериям и рекомендуются для включения в любой компилятор.,компилятор,sys,1
"другие преобразования, основанные на сложном анализе потока управления и потока данных, а также на использовании результатов этого анализа при модификации программ, требуют дополнительного анализа представительного набора реальных программ на данном языке программирования.",потока управления,sys,1
"различаются два основных вида оптимизации: машинно-независимая оптимизация, то есть проведение преобразований исходной программы (в форме некоторого внутреннего представления), не зависящих от выходного языка компилятора (без учета конкретных свойств объектной машины).",компилятора,sys,1
"различаются два основных вида оптимизации: машинно-независимая оптимизация, то есть проведение преобразований исходной программы (в форме некоторого внутреннего представления), не зависящих от выходного языка компилятора (без учета конкретных свойств объектной машины).",машинно-независимая оптимизация,sys,1
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",компиляции,sys,1
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",компилятора,sys,1
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",машинно-зависимая оптимизация,sys,1
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",фазе компиляции,sys,1
этот вид оптимизации обычно проводится одновременно с генерацией объектной программы или уже после этой генерации на дополнительной стадии (пометка iii на рисунке).,генерацией объектной программы,sys,1
этот вид оптимизации обычно проводится одновременно с генерацией объектной программы или уже после этой генерации на дополнительной стадии (пометка iii на рисунке).,объектной программы,sys,1
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",машинно-независимая оптимизация,sys,1
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",вычислительной системы,sys,1
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",объектная программа,sys,1
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",архитектуры вычислительной системы,sys,1
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",центральных процессоров,sys,1
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",машинно-зависимой оптимизации,sys,1
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",вычислительных систем,sys,1
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",процессоров,sys,1
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",регистров,sys,1
"обычно оптимизирующим преобразованиям подвергается внутреннее представление программы, а не текст на исходном языке.",оптимизирующим преобразованиям,sys,1
"машинно-независимая оптимизация основные преобразования машинно-зависимой оптимизации выполняются для отдельных выражений, линейных участков программ, циклов, вызовов процедур и функций.",машинно-зависимой оптимизации,sys,1
"машинно-независимая оптимизация основные преобразования машинно-зависимой оптимизации выполняются для отдельных выражений, линейных участков программ, циклов, вызовов процедур и функций.",машинно-независимая оптимизация,sys,1
"для проведения оптимизации программы делят на линейные участки, то есть на выполняемые по порядку последовательности операций.",оптимизации программы,sys,1
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",компиляции,sys,1
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",стадии компиляции,sys,1
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",компиляции,sys,1
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",компилятор,sys,1
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",макрорасширений,sys,1
"компилятор может изменять характер и порядок следования операций на основании известных алгебраических и логических тождеств, например, заменять выражение a=b c+b d выражением a=b (c+d).",компилятор,sys,1
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",компиляции,sys,1
"иногда компиляторам удается таким образом переставить следующие друг за другом операции, что без изменения смысла программы удается применить какие-либо другие преобразования.",компиляторам,sys,1
"даже если выражение из констант получить не удается, перестановка операций может привести к 58 экономии временных переменных, которые порождаются компилятором для хранения промежуточных результатов вычислений.",компилятором,sys,1
удаление недостижимых фрагментов программы часто требует глобального анализа программы для определения достижимости .,анализа программы,sys,1
"в основе такого анализа лежат идеи теории графов, связанные с анализом потока управления и потока данных.",потока управления,sys,1
"если это разрешается правилами языка, компиляторы так строят внутренние представления логических выражений, чтобы их вычисления прекращались сразу же, как только значение всего выражения становится предопределенным.",компиляторы,sys,1
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",центральных процессоров,sys,1
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",процессоров,sys,1
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",регистрами,sys,1
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",регистрами центральных процессоров,sys,1
"этот метод приводит к сокращению времени на передачу параметров и возвращаемого результата, на команды передачи управления, захвата памяти в стеке и другие вспомогательные операции.",захвата памяти,sys,1
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,регистры процессора,sys,1
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,машинно-зависимой оптимизации,sys,1
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,процессора,sys,1
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,регистры,sys,1
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",вычислительной системе,sys,1
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",регистры,sys,1
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",компиляторе,sys,1
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",регистров,sys,1
"во-первых, он сильно зависит от особенностей конкретной архитектуры вычислительной машины.",вычислительной машины,sys,1
"в некоторых языках программирования программисты имеют возможность явно указывать, какие переменные следует размещать на регистрах (в си++ с помощью ключевого слова register).",регистрах,sys,1
"подобные указания имеют для компиляторов рекомендательный характер, но часто помогают получить хорошо оптимизированные программы.",компиляторов,sys,1
для вычислительных машин с векторной архитектурой оптимизация циклов становится машинно-зависимой.,вычислительных машин,sys,1
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",регистров,sys,1
"все такие переменные заменяются компилятором на одну, значения других вычисляются с помощью коэффициентов.",компилятором,sys,1
"в тех вычислительных системах, в которых время выполнения операции умножения превышает время выполнения сложения, удается добиться немалого эффекта.",вычислительных системах,sys,1
"слияние смежных циклов с независимыми внутренними операторами s1 и s2 позволяет снизить накладные расходы на организацию циклической работы: for (i = 0; i < n; i ++) { s1 } for (i = 0; i < n; i ++) { s1; s2 } for (i = 0; i < n; i ++) { s2 } замену циклов последовательностями операций можно выполнять для циклов, кратность которых известна уже на стадии компиляции.",компиляции,sys,1
"слияние смежных циклов с независимыми внутренними операторами s1 и s2 позволяет снизить накладные расходы на организацию циклической работы: for (i = 0; i < n; i ++) { s1 } for (i = 0; i < n; i ++) { s1; s2 } for (i = 0; i < n; i ++) { s2 } замену циклов последовательностями операций можно выполнять для циклов, кратность которых известна уже на стадии компиляции.",стадии компиляции,sys,1
"расщепление цикла может оказаться полезным в случае наличия в теле цикла условных операторов: for (i = 0; i < n; i ++) if (x < y) {if (x < y) { s1; } for (i = 0; i < n; i ++) { s1; } else { s2; } } else for (i = 0; i < n; i ++) { s2; } развертывание цикла позволяет в определенных случаях уменьшить число проверок условий завершения цикла, а также создать предпосылки для последующего распараллеливания выполнения операций: for (i = 0; i < n; i ++) for (i = 0; i < n; i += 2) { a [i] = b [i] c [i]; } {a [i] = b [i] c [i]; a [i+1] = b [i+1] c [i+1]; } кажущиеся правильными преобразования не всегда ведут к построению эквивалентной программы.",условных операторов,sys,1
"машинно-зависимая оптимизация машинно-зависимые методы оптимизации ориентированы на конкретную архитектуру вычислительной системы, то есть на совокупность аппаратных и программных составляющих, а также взаимосвязи между ними.",вычислительной системы,sys,1
"машинно-зависимая оптимизация машинно-зависимые методы оптимизации ориентированы на конкретную архитектуру вычислительной системы, то есть на совокупность аппаратных и программных составляющих, а также взаимосвязи между ними.",машинно-зависимая оптимизация,sys,1
"машинно-зависимая оптимизация машинно-зависимые методы оптимизации ориентированы на конкретную архитектуру вычислительной системы, то есть на совокупность аппаратных и программных составляющих, а также взаимосвязи между ними.",архитектуру вычислительной системы,sys,1
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",потока управления,sys,1
"одним из важнейших аспектов является учет распространенной особенности многих вычислительных архитектур, строящихся на программно доступных регистрах.",вычислительных архитектур,sys,1
"одним из важнейших аспектов является учет распространенной особенности многих вычислительных архитектур, строящихся на программно доступных регистрах.",регистрах,sys,1
"среди этих регистров одни могут быть специально выделены для выполнения определенных задач (управление стеком), а другие представляют собой регистры общего назначения.",регистры,sys,1
"среди этих регистров одни могут быть специально выделены для выполнения определенных задач (управление стеком), а другие представляют собой регистры общего назначения.",регистров,sys,1
"выполнение операций над регистрами производится существенно быстрее, чем над элементами памяти, к тому же часто над элементами памяти, кроме операций пересылки, вообще нельзя выполнять никаких операций, а требуется предварительная загрузка их содержимого на регистры.",загрузка,sys,1
"выполнение операций над регистрами производится существенно быстрее, чем над элементами памяти, к тому же часто над элементами памяти, кроме операций пересылки, вообще нельзя выполнять никаких операций, а требуется предварительная загрузка их содержимого на регистры.",регистрами,sys,1
"выполнение операций над регистрами производится существенно быстрее, чем над элементами памяти, к тому же часто над элементами памяти, кроме операций пересылки, вообще нельзя выполнять никаких операций, а требуется предварительная загрузка их содержимого на регистры.",регистры,sys,1
все это ставит перед разработчиками почти всех компиляторов задачи распределения регистров и оптимизации их использования.,компиляторов,sys,1
все это ставит перед разработчиками почти всех компиляторов задачи распределения регистров и оптимизации их использования.,регистров,sys,1
"простейшим методом распределения регистров является их жесткое распределение, например, только для хранения фактических параметров процедур и/или важнейших переменных.",регистров,sys,1
"такой выбор, с одной стороны, упрощает разработку компилятора, с другой стороны, ограничивает эффективность использования регистров.",компилятора,sys,1
"такой выбор, с одной стороны, упрощает разработку компилятора, с другой стороны, ограничивает эффективность использования регистров.",регистров,sys,1
более сложным является распределение на основе анализа графа потока управления.,потока управления,sys,1
"граф потока управления строится из узлов, которыми являются базовые блоки программы (последовательности команд, имеющие один вход и один выход), и дуг, соответствующих переходам от одного базового блока к другому при наличии некоторых входных для базового блока данных.",потока управления,sys,1
такие результаты и пытаются хранить на регистрах.,регистрах,sys,1
распределение на основе раскраски графа взаимодействия регистров проводится так: число регистров полагается равным числу переменных в программе.,регистров,sys,1
"два узла (регистра) соединяются дугой, если два регистра должны хранить некоторые значения одновременно.",регистра,sys,1
"граф раскрашивается так, чтобы никакие соседние узлы не получили одинаковый цвет, при этом число цветов 63 соответствует числу реально имеющихся регистров.",регистров,sys,1
"если цветов не хватает, узлы итеративно удаляются, причем максимально долго остаются на регистрах переменные, используемые во внутренних циклах программы.",регистрах,sys,1
"поскольку при выполнении вычислений регистров может не хватать, содержимое некоторых из них приходится выгружать в память (независимо от выбранной стратегии их распределения).",регистров,sys,1
"это значит, что при вычислениях встает проблема выбора того регистра, содержимое которого можно выгрузить с минимальными потерями в производительности.",регистра,sys,1
"компилятор должен анализировать полученную им программу и выяснять, какое из значений ему понадобится для дальнейших вычислений и когда оно понадобится.",компилятор,sys,1
"обычно алгоритм выбора регистра для выгрузки работает так, что им выбирается регистр, содержимое которого понадобится позднее других (это не всегда оптимально, но несложно определяется).",регистра,sys,1
"обычно алгоритм выбора регистра для выгрузки работает так, что им выбирается регистр, содержимое которого понадобится позднее других (это не всегда оптимально, но несложно определяется).",регистр,sys,1
"аналогичным образом производится оптимизация специальных регистров сумматоров, индексных регистров, регистров базирования и других.",регистров базирования,sys,1
"аналогичным образом производится оптимизация специальных регистров сумматоров, индексных регистров, регистров базирования и других.",регистров,sys,1
"проблема распределения регистров усложняется тем, что некоторые вычислительные и/или операционные системы накладывают дополнительные ограничения на использование регистров.",регистров,sys,1
"проблема распределения регистров усложняется тем, что некоторые вычислительные и/или операционные системы накладывают дополнительные ограничения на использование регистров.",операционные системы,sys,1
"например, для некоторых операций иногда требуется сразу пара регистров, причем имеется требование к четности номера первого регистра из этой пары.",регистра,sys,1
"например, для некоторых операций иногда требуется сразу пара регистров, причем имеется требование к четности номера первого регистра из этой пары.",регистров,sys,1
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",генерации команд,sys,1
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",регистра,sys,1
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",загрузки,sys,1
"вторая команда оказывается излишней, а компилятор старается удалить из созданной последовательности команды все излишние команды.",компилятор,sys,1
"компилятор стремится снизить совокупную стоимость программы, то есть заменить дорогие команды более дешевыми , но дающими тот же результат.",компилятор,sys,1
"64 в каждой вычислительной машине могут оказаться аппаратно реализованные команды, удобные для выполнения специфических операций (машинные идиомы).",вычислительной машине,sys,1
"перед компиляторами это ставит задачу перераспределения последовательности вычислений так, чтобы рядом оказывались операции, не зависящие друг от друга (в противном случае, их нельзя будет выполнять параллельно).",компиляторами,sys,1
"если же вычислительная машина имеет два потока вычислений, лучше организовать вычисления так: ((a+b)+c)+((d+e)+f).",вычислительная машина,sys,1
"при рассмотрении полезности оптимизирующих преобразований нужно учитывать, что наибольший выигрыш возникает при участии самого программиста, причем возникает он еще на этапе выбора алгоритма, который реализуется в программе.",оптимизирующих преобразований,sys,1
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",динамического распределения,sys,1
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",распределения памяти,sys,1
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",компилятор,sys,1
"о языковых единицах речь идет потому, что выбор области памяти и распределение памяти в ней проводятся не только для объектов данных, но и для выполняемых фрагментов программ операторов, блоков, функций и процедур.",распределение памяти,sys,1
"семантика всех программ подразумевает, что при выполнении программ области памяти будут необходимы для хранения: кодов пользовательских программ; данных, необходимых для работы этих программ; кодов системных программ, обеспечивающих поддержку пользовательских программ в период их выполнения; записей о текущем состоянии процесса выполнения программ (например, записей об активации процедур).",системных программ,sys,1
"наиболее проста стратегия статического распределения памяти, в соответствии с которой память автоматически распределяется в статических областях компилятором.",компилятором,sys,1
"наиболее проста стратегия статического распределения памяти, в соответствии с которой память автоматически распределяется в статических областях компилятором.",статического распределения,sys,1
"наиболее проста стратегия статического распределения памяти, в соответствии с которой память автоматически распределяется в статических областях компилятором.",распределения памяти,sys,1
"наиболее проста стратегия статического распределения памяти, в соответствии с которой память автоматически распределяется в статических областях компилятором.",стратегия статического распределения,sys,1
"единственное, что может измениться это начальный адрес самой области, но и это изменение происходит до выполнения программы, перед загрузкой ее в память.",загрузкой,sys,1
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",компиляции,sys,1
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",стадии компиляции,sys,1
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",динамического распределения,sys,1
"при динамическом распределении возможно применение различных дисциплин, наиболее известны из которых стековая дисциплина распределения и дисциплина произвольного распределения (распределение в куче ).",динамическом распределении,sys,1
"дисциплина произвольного распределения памяти, по-существу, означает отсутствие какой-либо дисциплины в этом распределении.",распределения памяти,sys,1
"захват фрагментов памяти может осуществляться по произвольным запросам, так же производится и освобождение памяти.",освобождение памяти,sys,1
"выделение памяти в соответствии с дисциплиной произвольного распределения памяти может происходить явно самим разработчиком программы, а может осуществляться компилятором автоматически, то есть неявно.",компилятором,sys,1
"выделение памяти в соответствии с дисциплиной произвольного распределения памяти может происходить явно самим разработчиком программы, а может осуществляться компилятором автоматически, то есть неявно.",распределения памяти,sys,1
выбор той или иной стратегии и дисциплины основывается на следующих критериях: эффективность начального распределения памяти; эффективность восстановления статуса свободной памяти ;,распределения памяти,sys,1
"исходными данными для распределения памяти являются информационные таблицы компилятора, полученные на фазах анализа исходной программы.",таблицы компилятора,sys,1
"исходными данными для распределения памяти являются информационные таблицы компилятора, полученные на фазах анализа исходной программы.",распределения памяти,sys,1
"исходными данными для распределения памяти являются информационные таблицы компилятора, полученные на фазах анализа исходной программы.",компилятора,sys,1
эта информация собирается на основе обработки операторов описания объектов данных программы и пополняется при компиляции исполняемых операторов программы на основе семантических правил входного языка.,компиляции,sys,1
именно поэтому семантический анализ также должен предшествовать фазе распределения памяти.,семантический анализ,sys,1
именно поэтому семантический анализ также должен предшествовать фазе распределения памяти.,распределения памяти,sys,1
"с учетом выделенных объектов для хранения в памяти наиболее целесообразно выбирать для кодов пользовательских программ, кодов системных программ, буферов ввода/вывода: статические области памяти и стратегию статического распределения.",статического распределения,sys,1
"с учетом выделенных объектов для хранения в памяти наиболее целесообразно выбирать для кодов пользовательских программ, кодов системных программ, буферов ввода/вывода: статические области памяти и стратегию статического распределения.",стратегию статического распределения,sys,1
"с учетом выделенных объектов для хранения в памяти наиболее целесообразно выбирать для кодов пользовательских программ, кодов системных программ, буферов ввода/вывода: статические области памяти и стратегию статического распределения.",системных программ,sys,1
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",статического распределения,sys,1
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",стратегию статического распределения,sys,1
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",виртуальных функций,sys,1
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",таблиц виртуальных функций,sys,1
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",трансляции,sys,1
"динамическую стратегию со стековой дисциплиной для распределения памяти под локальные переменные; динамическую стратегию с дисциплиной произвольного распределения для переменных, создаваемых по явному запросу с помощью специальных операторов или библиотечных функций (операторы new в паскале и си++, функция malloc() в си)",библиотечных функций,sys,1
"динамическую стратегию со стековой дисциплиной для распределения памяти под локальные переменные; динамическую стратегию с дисциплиной произвольного распределения для переменных, создаваемых по явному запросу с помощью специальных операторов или библиотечных функций (операторы new в паскале и си++, функция malloc() в си)",распределения памяти,sys,1
"динамическую стратегию со стековой дисциплиной для распределения памяти под локальные переменные; динамическую стратегию с дисциплиной произвольного распределения для переменных, создаваемых по явному запросу с помощью специальных операторов или библиотечных функций (операторы new в паскале и си++, функция malloc() в си)",динамическую стратегию,sys,1
"например, для записей об активации процедур, которые содержат всю необходимую информацию для обеспечения выполнения процедур и возврата в точки вызова, в частности, фактические параметры, локальные, в том числе временные переменные, адреса возврата, значения регистров в момент входа в процедуру, ссылки на подобные записи объемлющих и вызвавших процедур.",регистров,sys,1
"динамическую стратегию со стековой дисциплиной (для языков программирования, поддерживающих рекурсивные процедуры).",динамическую стратегию,sys,1
распределение памяти нужно проводить не для всех элементов программы.,распределение памяти,sys,1
многое определяется в этом процессе реализацией компилятора и особенностями вычислительной архитектуры.,компилятора,sys,1
многое определяется в этом процессе реализацией компилятора и особенностями вычислительной архитектуры.,вычислительной архитектуры,sys,1
"например, если в системе команд машины имеется формат непосредственных данных (данных, размещаемых непосредственно в самой команде), то распределять память для некоторых целочисленных (а иногда и вещественных) констант в статической памяти не обязательно, они будут размещены в самой программе.",статической памяти,sys,1
"некоторые объекты данных программы могут при распределении памяти получить одинаковые адреса (например, две одинаковые строковые константы или две разные локальные переменные, никогда не используемые одновременно).",распределении памяти,sys,1
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",распределении памяти,sys,1
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",распределения памяти,sys,1
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",выравнивания адресов,sys,1
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",компиляторами,sys,1
все эти проблемы обычно решаются в рамках каждой конкретной вычислительной системы по-разному (возможно даже хранение данных в упакованном виде с распаковкой их значений при попытке доступа к ним).,вычислительной системы,sys,1
"глобальная область памяти выделяется один раз при инициализации объектной программы и доступна в этой программе все время, пока эта программа выполняется.",объектной программы,sys,1
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",статической памяти,sys,1
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",вычислительной системы,sys,1
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",компилятору,sys,1
"наибольшие сложности вызывает распределение динамической памяти, которая называется так потому, что ее размер не известен на стадии компиляции (независимо от того, глобальная это память, или локальная).",компиляции,sys,1
"наибольшие сложности вызывает распределение динамической памяти, которая называется так потому, что ее размер не известен на стадии компиляции (независимо от того, глобальная это память, или локальная).",стадии компиляции,sys,1
"наибольшие сложности вызывает распределение динамической памяти, которая называется так потому, что ее размер не известен на стадии компиляции (независимо от того, глобальная это память, или локальная).",динамической памяти,sys,1
неопределенность размера динамической памяти не позволяет компилятору непосредственно зафиксировать ее адрес.,компилятору,sys,1
неопределенность размера динамической памяти не позволяет компилятору непосредственно зафиксировать ее адрес.,динамической памяти,sys,1
"этого нельзя сделать даже символически, передав указание следующим компонентам системы программирования: редактор связей также не в состоянии будет определить этот адрес.",системы программирования,sys,1
"этого нельзя сделать даже символически, передав указание следующим компонентам системы программирования: редактор связей также не в состоянии будет определить этот адрес.",редактор связей,sys,1
"все, что может сделать компилятор, вставить в программу специальную подпрограмму, к которой можно будет обращаться для выделения места в динамической области памяти и освобождения этого места, когда потребность в нем исчезнет.",компилятор,sys,1
при использовании динамических объектов говорят о динамическом связывании объекта данных и области памяти.,динамическом связывании,sys,1
"в динамической области памяти могут располагаться как зоны, выделяемые пользователем (работающей программой), так и зоны, выделяемые компилятором, но и те и другие выделяются в процессе выполнения программы.",компилятором,sys,1
"69 пользователь может выделять и освобождать динамические области памяти, выполняя специальные операторы или обращаясь к библиотечным функциям (new и dispose в паскале, malloc() и free() в си, new и delete в си++).",библиотечным функциям,sys,1
"эти операторы и функции, в свою очередь, могут использовать возможности операционной системы, а могут производить распределение памяти самостоятельно в рамках статически выделенного большого участка памяти.",операционной системы,sys,1
"эти операторы и функции, в свою очередь, могут использовать возможности операционной системы, а могут производить распределение памяти самостоятельно в рамках статически выделенного большого участка памяти.",распределение памяти,sys,1
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",освобождение памяти,sys,1
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",компилятор,sys,1
"по-другому организована работа компилятора для работы с динамической памятью, ответственность за распределение которой возложена на компилятор.",динамической памятью,sys,1
"по-другому организована работа компилятора для работы с динамической памятью, ответственность за распределение которой возложена на компилятор.",компилятора,sys,1
"по-другому организована работа компилятора для работы с динамической памятью, ответственность за распределение которой возложена на компилятор.",компилятор,sys,1
"потребность автоматически распределять динамическую память возникает, когда в программе используются такие операции над данными, которые требуют перераспределения памяти, а сами операторы перераспределения в программе отсутствуют.",динамическую память,sys,1
в объектно-ориентированных языках программирования к такому перераспределению могут приводить некоторые операции над экземплярами объектов.,объектно-ориентированных языках,sys,1
"во всех таких случаях компилятор должен сформировать команды, обеспечивающие своевременное выделение памяти, необходимой для выполнения операции, а также последующее освобождение этой памяти.",компилятор,sys,1
"точная граница между двумя динамическими зонами с разными стратегиями распределения памяти не предусматривается, вместо этого системная поддержка гарантирует проведение постоянного контроля за совокупным размером двух динамических зон.",распределения памяти,sys,1
технологии динамического распределения памяти.,динамического распределения,sys,1
технологии динамического распределения памяти.,распределения памяти,sys,1
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",динамической стратегии,sys,1
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",динамической памяти,sys,1
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",вычислительной системы,sys,1
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",захвата памяти,sys,1
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",системным функциям,sys,1
одинаковые размеры выделяемых блоков памяти делают проблему фрагментации памяти практически не актуальной.,фрагментации памяти,sys,1
"второй вариант обработки явных запросов пользователей основан на более гибком подходе, при котором размер блоков не фиксируется заранее, а выбирается на основе параметров запроса и хранится в самом блоке: это позволяет оставить почти без изменения работу системы при захвате памяти, но значительно усложняет ее при освобождении, а особенно при повторном выделении, которое может потребовать склеивания смежных блоков, а иногда и уплотнения занятых участков.",захвате памяти,sys,1
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",распределением памяти,sys,1
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",управления памятью,sys,1
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",освобождение памяти,sys,1
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",компилятор,sys,1
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",процедура сборки мусора,sys,1
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",сборки мусора,sys,1
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",захватах памяти,sys,1
"если в схемах, выбираемых для обработки явных запросов, практически не возникает никаких накладных расходов, то при неявном управлении памятью без больших накладных расходов памяти обойтись не удается.",управлении памятью,sys,1
такие недостижимые циклические ссылки становятся препятствием для освобождения ставшей ненужной памяти и создают реальные проблемы для систем управления памятью.,управления памятью,sys,1
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,сборки мусора,sys,1
"этот механизм включается в момент, когда перед системой управления памяти возникает необходимость выделить фрагмент памяти такого размера, который невозможно обеспечить, не проведя уплотнения занятых блоков памяти.",управления памяти,sys,1
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",вычислительной системе,sys,1
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",сборки мусора,sys,1
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",управления памятью,sys,1
"эффективная реализация этого процесса является одной из важнейших характеристик, как систем программирования, так и программ системной поддержки.",систем программирования,sys,1
"генерация кода завершающей стадией работы компилятора является генерация кода (команд, констант и т. д.) объектной программы.",объектной программы,sys,1
"генерация кода завершающей стадией работы компилятора является генерация кода (команд, констант и т. д.) объектной программы.",компилятора,sys,1
"генерация кода завершающей стадией работы компилятора является генерация кода (команд, констант и т. д.) объектной программы.",генерация кода,sys,1
"генератор кода получает на вход промежуточное представление исходной программы и вырабатывает эквивалентную объектную программу, используя для этой цели всю информацию, накопленную к этому моменту в информационных таблицах компилятора.",таблицах компилятора,sys,1
"генератор кода получает на вход промежуточное представление исходной программы и вырабатывает эквивалентную объектную программу, используя для этой цели всю информацию, накопленную к этому моменту в информационных таблицах компилятора.",генератор кода,sys,1
"генератор кода получает на вход промежуточное представление исходной программы и вырабатывает эквивалентную объектную программу, используя для этой цели всю информацию, накопленную к этому моменту в информационных таблицах компилятора.",компилятора,sys,1
"генератор кода получает на вход промежуточное представление исходной программы и вырабатывает эквивалентную объектную программу, используя для этой цели всю информацию, накопленную к этому моменту в информационных таблицах компилятора.",объектную программу,sys,1
"73 работа генератора не зависит от того, имеется ли перед фазой генерации дополнительная фаза оптимизации, или она отсутствует.",фазой генерации,sys,1
"73 работа генератора не зависит от того, имеется ли перед фазой генерации дополнительная фаза оптимизации, или она отсутствует.",фаза оптимизации,sys,1
"математически проблема генерации эффективной объектной программы является неразрешимой, но на практике применяются достаточно эффективные эвристические подходы, дающие хорошие результаты, хотя и не абсолютно оптимальные.",объектной программы,sys,1
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",компиляции,sys,1
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",стадиях компиляции,sys,1
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",генератора кода,sys,1
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",компилятора,sys,1
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",таблиц компилятора,sys,1
"обычно таблица информации используется генератором кода для определения тех адресов объектов программы, которые они будут иметь в процессе выполнения программы.",генератором кода,sys,1
"так как перед началом генерации кода уже выполнен синтаксический разбор, отсеяны очевидно ошибочные конструкции и получено полное внутреннее представление исходной программы, во внутреннем представлении программы эти объекты обозначаются специально построенными внутренними именами, по которым записи об объектах легко отыскать в информационных таблицах, а не теми именами, которые присвоил им программист.",синтаксический разбор,sys,1
"так как перед началом генерации кода уже выполнен синтаксический разбор, отсеяны очевидно ошибочные конструкции и получено полное внутреннее представление исходной программы, во внутреннем представлении программы эти объекты обозначаются специально построенными внутренними именами, по которым записи об объектах легко отыскать в информационных таблицах, а не теми именами, которые присвоил им программист.",генерации кода,sys,1
"внутреннее представление, поступающее на вход генератора кода, может иметь различные формы.",генератора кода,sys,1
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",семантическим анализом,sys,1
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",генерация кода,sys,1
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",анализом программ,sys,1
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",генераторов кода,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",машинный код,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",компиляторы,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",машинные коды,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",язык ассемблера,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",объектных программ,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",кодирования,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",абсолютных адресах,sys,1
"реальные компиляторы готовят результаты своей работы в виде объектных программ, для кодирования которых могут использоваться такие виды языков: машинные коды в абсолютных адресах; перемещаемый машинный код; язык ассемблера целевой машины;",ассемблера,sys,1
"машинный язык в абсолютных адресах имеет свои преимущества в том, что программы на таком языке могут помещаться в фиксированные места памяти машины и немедленно выполняться.",абсолютных адресах,sys,1
"машинный язык в абсолютных адресах имеет свои преимущества в том, что программы на таком языке могут помещаться в фиксированные места памяти машины и немедленно выполняться.",машинный язык,sys,1
некоторые языки программирования (алгол-60 и паскаль) специально разрабатывались в расчете на использование подобной схемы компиляции.,компиляции,sys,1
для других языков больше подходят другие режимы работы компиляторов.,компиляторов,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",компиляции,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",файлов,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",модуля,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",машинном языке,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",кодированием,sys,1
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",объектного модуля,sys,1
множество перемещаемых объектных модулей может 74 затем связываться в единое целое и помещаться в память машины для совместного выполнения.,модулей,sys,1
множество перемещаемых объектных модулей может 74 затем связываться в единое целое и помещаться в память машины для совместного выполнения.,объектных модулей,sys,1
"такое связывание выполняется редактором связей, а размещение в памяти загрузчиком.",загрузчиком,sys,1
"такое связывание выполняется редактором связей, а размещение в памяти загрузчиком.",редактором связей,sys,1
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",модулей,sys,1
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",компиляция,sys,1
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",библиотеки программ,sys,1
"чтобы редактор связей мог провести свою часть работы по созданию полноценной самодостаточной программы, компилятор передает ему дополнительную информацию в объектных модулях.",компилятор,sys,1
"чтобы редактор связей мог провести свою часть работы по созданию полноценной самодостаточной программы, компилятор передает ему дополнительную информацию в объектных модулях.",редактор связей,sys,1
значительно облегчить процесс генерации объектной программы может использование в качестве выходного кода языка ассемблера целевой машины.,объектной программы,sys,1
значительно облегчить процесс генерации объектной программы может использование в качестве выходного кода языка ассемблера целевой машины.,языка ассемблера,sys,1
значительно облегчить процесс генерации объектной программы может использование в качестве выходного кода языка ассемблера целевой машины.,ассемблера,sys,1
значительно облегчить процесс генерации объектной программы может использование в качестве выходного кода языка ассемблера целевой машины.,генерации объектной программы,sys,1
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",компиляции,sys,1
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",ассемблера,sys,1
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",систем программирования,sys,1
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",языке ассемблера,sys,1
генерация программы на другом языке программирования часто используется при наличии компилятора с некоторого языка программирования.,компилятора,sys,1
генерация программы на другом языке программирования часто используется при наличии компилятора с некоторого языка программирования.,генерация программы,sys,1
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",компиляторов,sys,1
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",компилятора,sys,1
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",компилятор,sys,1
"например, язык фортран своим стандартом определен через ядро и дополнительные слои, которые можно отключать при компиляции, борясь за эффективность программ, но (может быть) в ущерб удобству программирования.",компиляции,sys,1
"например, язык фортран своим стандартом определен через ядро и дополнительные слои, которые можно отключать при компиляции, борясь за эффективность программ, но (может быть) в ущерб удобству программирования.",эффективность программ,sys,1
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",компиляции,sys,1
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",генератор кода,sys,1
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",компиляторе,sys,1
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",распределение памяти,sys,1
"важной дополнительной функцией генератора кода в таком процессе, заметно усложняющей весь процесс генерации в целом, является проведение одновременно с генерацией поиска стандартных последовательностей операторов по некоторым шаблонам и локальной оптимизации потока формируемых команд.",генератора кода,sys,1
"они включают в себя как общие математические операции (скалярное произведение и умножение матриц), так и сложные алгоритмы поиска и хранения (поисковый цикл монте-карло), например, так на языке си выглядит четвертый ливерморский цикл, построенный на базе фрагмента подпрограммы решения ленточных линейных уравнений: void loop4 (int n, real x [ar 1001], real y [ar 1001]) { for (int k = 6; k < ar 1001; k += (ar 1001 - 7) / 2) { int lw = k - 6; for (int j = 4; j < n; j += 5) x [k - 1] -= x [lw ++] y [j]; x [k - 1] = y [4]; } } обнаружение подобной критической последовательности операторов позволяет вместо прямой подстановки обычной последовательности команд сформировать последовательность, специфическую для данного шаблона и конкретной вычислительной архитектуры.",вычислительной архитектуры,sys,1
"редакторы связей: назначение, принципы работы конечным результатом компиляции является объектный модуль.",компиляции,sys,1
"редакторы связей: назначение, принципы работы конечным результатом компиляции является объектный модуль.",объектный модуль,sys,1
"редакторы связей: назначение, принципы работы конечным результатом компиляции является объектный модуль.",модуль,sys,1
"редакторы связей: назначение, принципы работы конечным результатом компиляции является объектный модуль.",редакторы связей,sys,1
за один запуск компилятора всегда порождается ровно один объектный модуль.,модуль,sys,1
за один запуск компилятора всегда порождается ровно один объектный модуль.,объектный модуль,sys,1
за один запуск компилятора всегда порождается ровно один объектный модуль.,компилятора,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",компиляции,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",объектный модуль,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",языке ассемблера,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",модуль,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",ассемблер,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",ассемблера,sys,1
"если какой-либо компилятор создает при компиляции с языка программирования текст на языке ассемблера, объектный модуль все равно создается, но работа по его созданию перекладывается на ассемблер.",компилятор,sys,1
"дальнейшая работа над объектными модулями проводится редактором связей, которые иногда называются компоновщиками.",объектными модулями,sys,1
"дальнейшая работа над объектными модулями проводится редактором связей, которые иногда называются компоновщиками.",модулями,sys,1
"дальнейшая работа над объектными модулями проводится редактором связей, которые иногда называются компоновщиками.",компоновщиками,sys,1
"дальнейшая работа над объектными модулями проводится редактором связей, которые иногда называются компоновщиками.",редактором связей,sys,1
"основное назначение редактора связей завершить ту часть работы, которая принципиально не могла быть выполнена компилятором, а именно, осуществить привязку нескольких модулей друг к другу.",компилятором,sys,1
"основное назначение редактора связей завершить ту часть работы, которая принципиально не могла быть выполнена компилятором, а именно, осуществить привязку нескольких модулей друг к другу.",модулей,sys,1
"основное назначение редактора связей завершить ту часть работы, которая принципиально не могла быть выполнена компилятором, а именно, осуществить привязку нескольких модулей друг к другу.",редактора связей,sys,1
"компилятор не мог выполнить такую привязку потому, что он всегда работает только с одной компилируемой программой, зная о других программных компонентах только то, что они должны существовать, а также их программные интерфейсы.",программные интерфейсы,sys,1
"компилятор не мог выполнить такую привязку потому, что он всегда работает только с одной компилируемой программой, зная о других программных компонентах только то, что они должны существовать, а также их программные интерфейсы.",интерфейсы,sys,1
"компилятор не мог выполнить такую привязку потому, что он всегда работает только с одной компилируемой программой, зная о других программных компонентах только то, что они должны существовать, а также их программные интерфейсы.",компилятор,sys,1
"компилятор не мог выполнить такую привязку потому, что он всегда работает только с одной компилируемой программой, зная о других программных компонентах только то, что они должны существовать, а также их программные интерфейсы.",программных компонентах,sys,1
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",объектных модулей,sys,1
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",программный компонент,sys,1
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",модулей,sys,1
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",компилятора,sys,1
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",редактор связей,sys,1
"эти модули могут быть получены редактором связей непосредственно от компилятора, а могут извлекаться им из библиотек, которые также указываются среди параметров запуска компоновщика.",модули,sys,1
"эти модули могут быть получены редактором связей непосредственно от компилятора, а могут извлекаться им из библиотек, которые также указываются среди параметров запуска компоновщика.",редактором связей,sys,1
"эти модули могут быть получены редактором связей непосредственно от компилятора, а могут извлекаться им из библиотек, которые также указываются среди параметров запуска компоновщика.",компоновщика,sys,1
"эти модули могут быть получены редактором связей непосредственно от компилятора, а могут извлекаться им из библиотек, которые также указываются среди параметров запуска компоновщика.",компилятора,sys,1
"редактор связей должен заново прочитать все объектные модули (как откомпилированные, так и библиотечные), необходимые для формирования одной полной программы, и выявить в них все упоминания внешних объектов (процедур, функций, констант, переменных и т. д.).",модули,sys,1
"редактор связей должен заново прочитать все объектные модули (как откомпилированные, так и библиотечные), необходимые для формирования одной полной программы, и выявить в них все упоминания внешних объектов (процедур, функций, констант, переменных и т. д.).",редактор связей,sys,1
"редактор связей должен заново прочитать все объектные модули (как откомпилированные, так и библиотечные), необходимые для формирования одной полной программы, и выявить в них все упоминания внешних объектов (процедур, функций, констант, переменных и т. д.).",объектные модули,sys,1
"внешними эти объекты являются по отношению к тому конкретному программному компоненту, в котором они упоминаются и используются, но не определяются или не реализуются.",программному компоненту,sys,1
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",модулей,sys,1
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",редактора связей,sys,1
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",объектных модулей,sys,1
"если же некоторые внешние связи остались неразрешенными, то есть соответствующие им объекты не обнаружились ни в одном из объектных модулей, поданных на редактирование, редактор связей выдает сообщение об ошибке.",модулей,sys,1
"если же некоторые внешние связи остались неразрешенными, то есть соответствующие им объекты не обнаружились ни в одном из объектных модулей, поданных на редактирование, редактор связей выдает сообщение об ошибке.",объектных модулей,sys,1
"если же некоторые внешние связи остались неразрешенными, то есть соответствующие им объекты не обнаружились ни в одном из объектных модулей, поданных на редактирование, редактор связей выдает сообщение об ошибке.",редактор связей,sys,1
"редактор связей в состоянии провести и другой контроль контроль соответствия между объектным модулем, в котором упоминается некоторое внешнее имя (используется объект с этим именем), и объектным модулем, в котором данный объект определен.",модулем,sys,1
"редактор связей в состоянии провести и другой контроль контроль соответствия между объектным модулем, в котором упоминается некоторое внешнее имя (используется объект с этим именем), и объектным модулем, в котором данный объект определен.",объектным модулем,sys,1
"редактор связей в состоянии провести и другой контроль контроль соответствия между объектным модулем, в котором упоминается некоторое внешнее имя (используется объект с этим именем), и объектным модулем, в котором данный объект определен.",редактор связей,sys,1
найти их удается только при отладке уже готовых программ.,отладке,sys,1
"задача редактора связей сформировать области (разделы, секции) памяти, которые впоследствии смогут быть размещены в памяти вычислительной машины как единое целое, в виде цельных блоков.",вычислительной машины,sys,1
"задача редактора связей сформировать области (разделы, секции) памяти, которые впоследствии смогут быть размещены в памяти вычислительной машины как единое целое, в виде цельных блоков.",памяти вычислительной машины,sys,1
"задача редактора связей сформировать области (разделы, секции) памяти, которые впоследствии смогут быть размещены в памяти вычислительной машины как единое целое, в виде цельных блоков.",редактора связей,sys,1
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",оперативную память,sys,1
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",загрузки,sys,1
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",редактор связей,sys,1
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",загрузки программы,sys,1
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",редактирования связей,sys,1
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",регистры базирования,sys,1
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",загрузки,sys,1
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",регистры,sys,1
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",модуле,sys,1
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",редактором связей,sys,1
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",редактор связей,sys,1
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",объектном модуле,sys,1
после его работы останется только осуществить прибавление начального адреса загрузки области памяти.,загрузки,sys,1
в некоторых вычислительных системах на редактор связей возлагается также обязанность проводить выравнивание адресов при компоновке областей памяти.,компоновке,sys,1
в некоторых вычислительных системах на редактор связей возлагается также обязанность проводить выравнивание адресов при компоновке областей памяти.,выравнивание адресов,sys,1
в некоторых вычислительных системах на редактор связей возлагается также обязанность проводить выравнивание адресов при компоновке областей памяти.,вычислительных системах,sys,1
в некоторых вычислительных системах на редактор связей возлагается также обязанность проводить выравнивание адресов при компоновке областей памяти.,редактор связей,sys,1
от редактора связей не зависит эффективность выполнения готовой программы.,редактора связей,sys,1
"все, что можно сделать для повышения этой эффективности, делается в период компиляции.",компиляции,sys,1
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",вычислительной машины,sys,1
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",редактировании связей,sys,1
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",памяти вычислительной машины,sys,1
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",редактора связей,sys,1
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",объектный модуль,sys,1
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",модуль,sys,1
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",модуля,sys,1
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",объектного модуля,sys,1
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",редактор связей,sys,1
"в таком случае файл готовой программы (и размер, занимаемой ею памяти машины) будет максимальным, но в этом файле могут оказаться объекты, никогда в программе не используемые.",файл,sys,1
"чтобы избежать потерь памяти разработчики библиотек часто оформляют их не в виде одного большого библиотечного файла, а виде набора относительно небольших файлов, вставка которых в готовые программы не будет приводить к их существенному росту.",файла,sys,1
"чтобы избежать потерь памяти разработчики библиотек часто оформляют их не в виде одного большого библиотечного файла, а виде набора относительно небольших файлов, вставка которых в готовые программы не будет приводить к их существенному росту.",файлов,sys,1
"однако лучшим выходом из этой ситуации является усложнение алгоритма работы редактора связей, который обладает всей информацией, необходимой для отбора тех объектов модуля, которые реально используются в программе.",модуля,sys,1
"однако лучшим выходом из этой ситуации является усложнение алгоритма работы редактора связей, который обладает всей информацией, необходимой для отбора тех объектов модуля, которые реально используются в программе.",редактора связей,sys,1
в таком случае они не будут попадать и в файл готовой программы.,файл,sys,1
"современные системы программирования стараются комплектовать именно такими редакторами связей, использование которых снижает нагрузку на используемую память машины.",редакторами связей,sys,1
"современные системы программирования стараются комплектовать именно такими редакторами связей, использование которых снижает нагрузку на используемую память машины.",системы программирования,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",объектных модулей,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",относительных адресов,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",загрузчика,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",редактора связей,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",компилятором,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",таблицы трансляции,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",модулей,sys,1
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",трансляции,sys,1
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,модуля,sys,1
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,динамических библиотек,sys,1
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",редактора связей,sys,1
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",загрузчики,sys,1
"ни компилятор, ни редактор связей не в состоянии знать, в какой именно области физической памяти будет размещаться программа в момент ее выполнения.",компилятор,sys,1
"ни компилятор, ни редактор связей не в состоянии знать, в какой именно области физической памяти будет размещаться программа в момент ее выполнения.",редактор связей,sys,1
"эти компоненты работают лишь с относительными адресами, которые отсчитываются от некоторой условной точки (обычно она совпадает с началом разделов памяти, отводимых для объектов самого первого модуля, поданного для компоновки редактору связей).",модуля,sys,1
"эти компоненты работают лишь с относительными адресами, которые отсчитываются от некоторой условной точки (обычно она совпадает с началом разделов памяти, отводимых для объектов самого первого модуля, поданного для компоновки редактору связей).",относительными адресами,sys,1
"эти компоненты работают лишь с относительными адресами, которые отсчитываются от некоторой условной точки (обычно она совпадает с началом разделов памяти, отводимых для объектов самого первого модуля, поданного для компоновки редактору связей).",компоновки,sys,1
"эти компоненты работают лишь с относительными адресами, которые отсчитываются от некоторой условной точки (обычно она совпадает с началом разделов памяти, отводимых для объектов самого первого модуля, поданного для компоновки редактору связей).",редактору связей,sys,1
такое преобразование выполняется загрузчиками.,загрузчиками,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",архитектуры вычислительной системы,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",операционных систем,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",систем программирования,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",вычислительной системы,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",загрузчики,sys,1
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",модулей,sys,1
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",интерпретации,sys,1
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",систем программирования,sys,1
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",редакторами связей,sys,1
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",загрузчики,sys,1
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",интерпретатора,sys,1
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",исполняемого файла,sys,1
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",файла,sys,1
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",относительных адресов,sys,1
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",загрузчик,sys,1
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",редактор связей,sys,1
"обрабатывая информацию, содержащуюся в этой таблице, загрузчик создает окончательное представление тех команд программы, которые еще не были к этому времени сформированы.",загрузчик,sys,1
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",архитектуры вычислительной системы,sys,1
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",вычислительной системы,sys,1
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",таблицы трансляции,sys,1
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",трансляции,sys,1
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",операционной системы,sys,1
"это делает несовместимыми друг с другом программы, подготовленные в рамках разных операционных систем (например, программы, подготовленные для систем windows и linux, имеют разные по структуре таблицы трансляции адресов, хотя и те, и другие должны выполняться на одной и той же аппаратуре процессоре персонального компьютера).",операционных систем,sys,1
"это делает несовместимыми друг с другом программы, подготовленные в рамках разных операционных систем (например, программы, подготовленные для систем windows и linux, имеют разные по структуре таблицы трансляции адресов, хотя и те, и другие должны выполняться на одной и той же аппаратуре процессоре персонального компьютера).",трансляции,sys,1
"это делает несовместимыми друг с другом программы, подготовленные в рамках разных операционных систем (например, программы, подготовленные для систем windows и linux, имеют разные по структуре таблицы трансляции адресов, хотя и те, и другие должны выполняться на одной и той же аппаратуре процессоре персонального компьютера).",процессоре,sys,1
"это делает несовместимыми друг с другом программы, подготовленные в рамках разных операционных систем (например, программы, подготовленные для систем windows и linux, имеют разные по структуре таблицы трансляции адресов, хотя и те, и другие должны выполняться на одной и той же аппаратуре процессоре персонального компьютера).",таблицы трансляции,sys,1
"в то же время вынесение загрузчика из состава систем программирования в состав операционных систем делает структуру этой таблицы более общей, 79 не зависящей от конкретной системы программирования.",операционных систем,sys,1
"в то же время вынесение загрузчика из состава систем программирования в состав операционных систем делает структуру этой таблицы более общей, 79 не зависящей от конкретной системы программирования.",системы программирования,sys,1
"в то же время вынесение загрузчика из состава систем программирования в состав операционных систем делает структуру этой таблицы более общей, 79 не зависящей от конкретной системы программирования.",систем программирования,sys,1
"в то же время вынесение загрузчика из состава систем программирования в состав операционных систем делает структуру этой таблицы более общей, 79 не зависящей от конкретной системы программирования.",загрузчика,sys,1
"в противном случае, программы, подготовленные системами программирования компании borland, нельзя было бы выполнять в операционной системе, предназначенной для работы с системами программирования компании microsoft.",операционной системе,sys,1
"в противном случае, программы, подготовленные системами программирования компании borland, нельзя было бы выполнять в операционной системе, предназначенной для работы с системами программирования компании microsoft.",системами программирования,sys,1
вынесение загрузчиков в операционные системы имеет еще один очень важный смысл.,загрузчиков,sys,1
вынесение загрузчиков в операционные системы имеет еще один очень важный смысл.,операционные системы,sys,1
"методы трансляции адресов могут основываться на сегментной, страничной или сегментно-страничной организации памяти.",трансляции,sys,1
"полное владение ситуацией может обеспечить только операционная система, причем только в момент непосредственного занесения программы в память.",операционная система,sys,1
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",системы программирования,sys,1
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",загрузчик,sys,1
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",управления памятью,sys,1
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",операционной системы,sys,1
"загрузчик, который выполняет трансляцию адресов в момент запуска программы, называется настраивающим загрузчиком.",загрузчиком,sys,1
"загрузчик, который выполняет трансляцию адресов в момент запуска программы, называется настраивающим загрузчиком.",загрузчик,sys,1
"загрузчик, который выполняет трансляцию адресов в момент запуска программы, называется настраивающим загрузчиком.",трансляцию,sys,1
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,систем программирования,sys,1
"по техническому составу библиотеки делятся на две категории: библиотеки функций исходного языка и библиотеки функций операционной системы, в составе которой должна будет работать обрабатываемая программа.",библиотеки функций,sys,1
"по техническому составу библиотеки делятся на две категории: библиотеки функций исходного языка и библиотеки функций операционной системы, в составе которой должна будет работать обрабатываемая программа.",операционной системы,sys,1
"эта операционная система может отличаться от той, в составе которой функционирует сама система программирования.",система программирования,sys,1
"эта операционная система может отличаться от той, в составе которой функционирует сама система программирования.",операционная система,sys,1
"некоторую часть библиотеки, а именно описания входящих в библиотеки компонентов, необходимо передавать компилятору, чтобы во время компиляции программ, ссылающихся на библиотечные элементы, компилятор мог проверять, например, соответствие списков формальных и фактических параметров.",компиляции,sys,1
"некоторую часть библиотеки, а именно описания входящих в библиотеки компонентов, необходимо передавать компилятору, чтобы во время компиляции программ, ссылающихся на библиотечные элементы, компилятор мог проверять, например, соответствие списков формальных и фактических параметров.",компиляции программ,sys,1
"некоторую часть библиотеки, а именно описания входящих в библиотеки компонентов, необходимо передавать компилятору, чтобы во время компиляции программ, ссылающихся на библиотечные элементы, компилятор мог проверять, например, соответствие списков формальных и фактических параметров.",компилятор,sys,1
"некоторую часть библиотеки, а именно описания входящих в библиотеки компонентов, необходимо передавать компилятору, чтобы во время компиляции программ, ссылающихся на библиотечные элементы, компилятор мог проверять, например, соответствие списков формальных и фактических параметров.",библиотеки компонентов,sys,1
"с другой стороны, библиотеки сами формируются компиляторами, поскольку реализации библиотечных элементов описываются на языках программирования.",компиляторами,sys,1
"библиотеки делятся на статические и динамические по выбору того момента, когда система программирования извлекает из них элементы.",система программирования,sys,1
"статические библиотеки статические библиотеки фактически представляют собой процедуры и функции, встраиваемые внутрь программ, подготавливаемых системами программирования на этапе обработки 80 этих программ.",статические библиотеки,sys,1
"статические библиотеки статические библиотеки фактически представляют собой процедуры и функции, встраиваемые внутрь программ, подготавливаемых системами программирования на этапе обработки 80 этих программ.",системами программирования,sys,1
"все статические библиотеки подключаются к программам, готовящимся к выполнению, ровно один раз в момент формирования редактором связей полной программы.",редактором связей,sys,1
"все статические библиотеки подключаются к программам, готовящимся к выполнению, ровно один раз в момент формирования редактором связей полной программы.",статические библиотеки,sys,1
после подключения компоненты статической библиотеки становятся неотъемлемой частью программы и в дальнейшем распространяются вместе с нею.,статической библиотеки,sys,1
"программа, к которой уже подключены компоненты статической библиотеки, приобретает независимость от самой этой библиотеки.",статической библиотеки,sys,1
это свойство статических библиотек является их несомненным преимуществом.,статических библиотек,sys,1
эта трудоемкость связана с необходимостью произвести повторную полную сборку программы из объектных модулей и исправленных библиотечных компонентов.,библиотечных компонентов,sys,1
эта трудоемкость связана с необходимостью произвести повторную полную сборку программы из объектных модулей и исправленных библиотечных компонентов.,модулей,sys,1
эта трудоемкость связана с необходимостью произвести повторную полную сборку программы из объектных модулей и исправленных библиотечных компонентов.,сборку программы,sys,1
эта трудоемкость связана с необходимостью произвести повторную полную сборку программы из объектных модулей и исправленных библиотечных компонентов.,объектных модулей,sys,1
"поскольку некоторыми системными и стандартными библиотеками пользуются почти все программы, размеры непроизводительно используемой памяти, как в архивах программ, так и в памяти вычислительных машин при выполнении программ, могут быть очень большими.",вычислительных машин,sys,1
"поскольку некоторыми системными и стандартными библиотеками пользуются почти все программы, размеры непроизводительно используемой памяти, как в архивах программ, так и в памяти вычислительных машин при выполнении программ, могут быть очень большими.",памяти вычислительных машин,sys,1
"поскольку некоторыми системными и стандартными библиотеками пользуются почти все программы, размеры непроизводительно используемой памяти, как в архивах программ, так и в памяти вычислительных машин при выполнении программ, могут быть очень большими.",стандартными библиотеками,sys,1
динамически загружаемые библиотеки компоненты динамических библиотек (динамически загружаемые компоненты и библиотеки) подключаются к программам во время выполнения этих программ.,динамических библиотек,sys,1
динамически загружаемые библиотеки компоненты динамических библиотек (динамически загружаемые компоненты и библиотеки) подключаются к программам во время выполнения этих программ.,библиотеки компоненты,sys,1
в этом состоит основное отличие динамических библиотек от статических.,динамических библиотек,sys,1
"компоненты динамических библиотек не связаны с программами, которые к ним обращаются, и распространяются отдельно от них.",динамических библиотек,sys,1
некоторые динамические библиотеки подключаются к программам в самом начале выполнения программы при ее записи в оперативную память вычислительной машины.,оперативную память,sys,1
некоторые динамические библиотеки подключаются к программам в самом начале выполнения программы при ее записи в оперативную память вычислительной машины.,вычислительной машины,sys,1
некоторые динамические библиотеки подключаются к программам в самом начале выполнения программы при ее записи в оперативную память вычислительной машины.,динамические библиотеки,sys,1
некоторые динамические библиотеки подключаются к программам в самом начале выполнения программы при ее записи в оперативную память вычислительной машины.,память вычислительной машины,sys,1
"другие библиотеки попадают в оперативную память только тогда, когда происходит реальное обращение к какому-нибудь одному из их компонентов (к какой-либо процедуре или функции из этих библиотек).",оперативную память,sys,1
освобождение памяти для разных библиотек также происходит по- разному.,освобождение памяти,sys,1
загрузка при обращении к компоненту библиотеки имеет определенные преимущества перед загрузкой при начале выполнения программы.,загрузка,sys,1
загрузка при обращении к компоненту библиотеки имеет определенные преимущества перед загрузкой при начале выполнения программы.,загрузкой,sys,1
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",память вычислительной машины,sys,1
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",вычислительной машины,sys,1
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",загрузке,sys,1
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",загрузка,sys,1
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",загрузки,sys,1
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",динамической загрузки,sys,1
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",операционной системы,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",компоновщиком программ,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",загрузка,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",компоновщиком,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",редактором связей,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",динамической загрузки,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",оперативную память,sys,1
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",загрузки,sys,1
"имея такой перечень, который обычно передается компоновщику в качестве одного из параметров его запуска, он может обеспечить загрузку всех библиотек в память перед началом работы основной программы.",компоновщику,sys,1
"имея такой перечень, который обычно передается компоновщику в качестве одного из параметров его запуска, он может обеспечить загрузку всех библиотек в память перед началом работы основной программы.",загрузку,sys,1
"современные системы программирования обычно допускают оба метода работы с динамическими библиотеками, а решение по выбору конкретного метода принимается разработчиком программы.",динамическими библиотеками,sys,1
"современные системы программирования обычно допускают оба метода работы с динамическими библиотеками, а решение по выбору конкретного метода принимается разработчиком программы.",системы программирования,sys,1
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",загрузчиком,sys,1
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",загрузка,sys,1
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",оперативную память,sys,1
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",динамических библиотек,sys,1
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",динамическим загрузчиком,sys,1
"этот загрузчик входит в состав операционной системы и контролирует все обращения к динамически загружаемым библиотекам и модулям, считает эти обращения, а также освобождает память, когда количество действующих обращений оказывается равным нулю.",загрузчик,sys,1
"этот загрузчик входит в состав операционной системы и контролирует все обращения к динамически загружаемым библиотекам и модулям, считает эти обращения, а также освобождает память, когда количество действующих обращений оказывается равным нулю.",операционной системы,sys,1
"этот загрузчик входит в состав операционной системы и контролирует все обращения к динамически загружаемым библиотекам и модулям, считает эти обращения, а также освобождает память, когда количество действующих обращений оказывается равным нулю.",модулям,sys,1
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,библиотечных компонентов,sys,1
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,загрузчика,sys,1
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,системы программирования,sys,1
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,операционную систему,sys,1
"если динамическая библиотека уже загружена в память, нет необходимости загружать ее повторно.",динамическая библиотека,sys,1
загрузчик 82 способен отслеживать двойные обращения и обеспечивать доступ к библиотечным компонентам всем работающим программам.,библиотечным компонентам,sys,1
загрузчик 82 способен отслеживать двойные обращения и обеспечивать доступ к библиотечным компонентам всем работающим программам.,загрузчик,sys,1
"выполнение функций динамическим загрузчиком возможно только в том случае, если загружаемая библиотека или объектный модуль имеют определенную структуру, содержащую в себе информацию, необходимую для трансляции адресов.",загрузчиком,sys,1
"выполнение функций динамическим загрузчиком возможно только в том случае, если загружаемая библиотека или объектный модуль имеют определенную структуру, содержащую в себе информацию, необходимую для трансляции адресов.",объектный модуль,sys,1
"выполнение функций динамическим загрузчиком возможно только в том случае, если загружаемая библиотека или объектный модуль имеют определенную структуру, содержащую в себе информацию, необходимую для трансляции адресов.",модуль,sys,1
"выполнение функций динамическим загрузчиком возможно только в том случае, если загружаемая библиотека или объектный модуль имеют определенную структуру, содержащую в себе информацию, необходимую для трансляции адресов.",динамическим загрузчиком,sys,1
"выполнение функций динамическим загрузчиком возможно только в том случае, если загружаемая библиотека или объектный модуль имеют определенную структуру, содержащую в себе информацию, необходимую для трансляции адресов.",трансляции,sys,1
большинство современных редакторов связей могут работать в режиме формирования таких библиотек и модулей.,модулей,sys,1
большинство современных редакторов связей могут работать в режиме формирования таких библиотек и модулей.,редакторов связей,sys,1
"непосредственная загрузка динамических объектов в память выполняется настраивающим загрузчиком, при этом их программная часть оказывается доступной всем исполняемым программам, а часть, содержащая данные дублируется для каждой исполняемой программы так, как будто она является единственной программой, использующей динамически загружаемые объекты.",загрузчиком,sys,1
"непосредственная загрузка динамических объектов в память выполняется настраивающим загрузчиком, при этом их программная часть оказывается доступной всем исполняемым программам, а часть, содержащая данные дублируется для каждой исполняемой программы так, как будто она является единственной программой, использующей динамически загружаемые объекты.",загрузка,sys,1
"непосредственная загрузка динамических объектов в память выполняется настраивающим загрузчиком, при этом их программная часть оказывается доступной всем исполняемым программам, а часть, содержащая данные дублируется для каждой исполняемой программы так, как будто она является единственной программой, использующей динамически загружаемые объекты.",исполняемой программы,sys,1
"непосредственная загрузка динамических объектов в память выполняется настраивающим загрузчиком, при этом их программная часть оказывается доступной всем исполняемым программам, а часть, содержащая данные дублируется для каждой исполняемой программы так, как будто она является единственной программой, использующей динамически загружаемые объекты.",исполняемым программам,sys,1
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",файлов,sys,1
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",операционной системы,sys,1
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",динамических библиотек,sys,1
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",исполняемых файлов,sys,1
"в эти файлы (так же, как и в статических библиотеках) включены описания компонентов, что позволяет компиляторам автоматически контролировать операторы обращения к библиотечным компонентам.",библиотечным компонентам,sys,1
"в эти файлы (так же, как и в статических библиотеках) включены описания компонентов, что позволяет компиляторам автоматически контролировать операторы обращения к библиотечным компонентам.",файлы,sys,1
"в эти файлы (так же, как и в статических библиотеках) включены описания компонентов, что позволяет компиляторам автоматически контролировать операторы обращения к библиотечным компонентам.",статических библиотеках,sys,1
"в эти файлы (так же, как и в статических библиотеках) включены описания компонентов, что позволяет компиляторам автоматически контролировать операторы обращения к библиотечным компонентам.",компиляторам,sys,1
в то же время каких-либо команд обращения к этим компонентам компиляторы для динамических библиотек вставить не могут.,динамических библиотек,sys,1
в то же время каких-либо команд обращения к этим компонентам компиляторы для динамических библиотек вставить не могут.,компиляторы,sys,1
"вместо них в программы вставляются команды обращения к функциям операционной системы, которые обеспечивают обращения к компонентам динамических библиотек.",динамических библиотек,sys,1
"вместо них в программы вставляются команды обращения к функциям операционной системы, которые обеспечивают обращения к компонентам динамических библиотек.",операционной системы,sys,1
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",библиотечным компонентам,sys,1
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",загрузки,sys,1
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",динамической загрузки,sys,1
"компоненты, к которым завершены все обращения, могут удаляться операционной системой из памяти машины.",операционной системой,sys,1
динамические библиотеки имеют множество преимуществ перед статическими.,динамические библиотеки,sys,1
"их составляющие не должны включаться в состав исполняемых файлов программ, что значительно сокращает их размеры.",файлов,sys,1
"их составляющие не должны включаться в состав исполняемых файлов программ, что значительно сокращает их размеры.",исполняемых файлов,sys,1
"этого преимущества удается добиться за счет разработки специального механизма операционной системы, который выполняет подключение фрагментов одних программ к другим в момент их выполнения.",операционной системы,sys,1
"известным недостатком динамических библиотек является зависимость программного обеспечения от библиотечных объектов, непосредственно не связанных с этим обеспечением, то есть зависимость программ пользователей от неизвестных им динамических библиотек.",программного обеспечения,sys,1
"известным недостатком динамических библиотек является зависимость программного обеспечения от библиотечных объектов, непосредственно не связанных с этим обеспечением, то есть зависимость программ пользователей от неизвестных им динамических библиотек.",динамических библиотек,sys,1
"для выполнения программ, основанных на динамическом подключении библиотек, необходимо принимать специальные меры, гарантирующие наличие всех необходимых библиотечных компонентов в составе той вычислительной системы, 83 где предполагается исполнять эти программы.",библиотечных компонентов,sys,1
"для выполнения программ, основанных на динамическом подключении библиотек, необходимо принимать специальные меры, гарантирующие наличие всех необходимых библиотечных компонентов в составе той вычислительной системы, 83 где предполагается исполнять эти программы.",вычислительной системы,sys,1
"это означает, что использование динамических библиотек налагает обязательства, как на их разработчиков, так и на их пользователей.",динамических библиотек,sys,1
"разработчик прикладной программы должен тщательно придерживаться правил, предложенных разработчиками библиотек.",прикладной программы,sys,1
"в свою очередь, разработчики библиотек, внося в библиотеки изменения, должны предпринимать меры, чтобы эти изменения минимальным образом сказывались на прикладных программах, основанных на предыдущих версиях библиотеки.",прикладных программах,sys,1
"одним из результатов таких мер является то, что в современных библиотеках имеются специальные библиотечные компоненты, которые позволяют точно определить версию данного библиотечного набора компонентов.",библиотечные компоненты,sys,1
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",загрузку,sys,1
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",вычислительной системы,sys,1
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",динамическую загрузку,sys,1
основные типы библиотек никакая современная система программирования не может обойтись без встроенных в нее библиотечных средств.,система программирования,sys,1
"для широкого распространения библиотечных средств в программировании имеются, по крайней мере, две причины: необходимость оказывать поддержку программам во время их исполнения на вычислительной машине, потребность накапливать полезные программы и передавать их другим пользователям, не раскрывая деталей реализации алгоритмов, запрограммированных в них.",вычислительной машине,sys,1
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",макроопределений,sys,1
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",библиотеки функций,sys,1
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",систем программирования,sys,1
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",библиотеки классов,sys,1
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",библиотеки компонентов,sys,1
"библиотеки функций, процедур и макроопределений многие программы, прошедшие компиляцию, нуждаются в поддержке во время выполнения.",компиляцию,sys,1
"библиотеки функций, процедур и макроопределений многие программы, прошедшие компиляцию, нуждаются в поддержке во время выполнения.",библиотеки функций,sys,1
"библиотеки функций, процедур и макроопределений многие программы, прошедшие компиляцию, нуждаются в поддержке во время выполнения.",макроопределений,sys,1
"почти все языки программирования включают в себя некоторые элементы, реализация которых подразумевает, что во время выполнения программы должна 84 обеспечиваться связь с операционной системой.",операционной системой,sys,1
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",модулей,sys,1
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",компилятора,sys,1
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",объектных модулей,sys,1
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",системным программам,sys,1
"чтобы программы, входящие в такие библиотеки, были написаны на том же языке программирования, с которого ведется трансляция.",трансляция,sys,1
"однако необходимо, чтобы компоненты библиотеки были написаны с учетом того, что к ним могут делаться обращения из программ, написанных на определенном языке и транслируемых конкретным транслятором.",транслятором,sys,1
"библиотеки связаны не только с целевой машиной и целевой вычислительной системой, но даже с конкретным компилятором, которым выполнялось их формирование.",компилятором,sys,1
"библиотеки связаны не только с целевой машиной и целевой вычислительной системой, но даже с конкретным компилятором, которым выполнялось их формирование.",вычислительной системой,sys,1
"однако некоторые языки программирования имеют настолько близкую семантику вызовов процедур и представления данных, что компиляторы для них могут создавать программы, которые можно вызывать из программ, написанных на других языках.",компиляторы,sys,1
"необходимость оказания системной поддержки программам, проходящим обработку в системах программирования, повлияло на первоначальное наименование библиотек, которые сначала назывались библиотеками системных программ или библиотеками стандартных программ.",системных программ,sys,1
"необходимость оказания системной поддержки программам, проходящим обработку в системах программирования, повлияло на первоначальное наименование библиотек, которые сначала назывались библиотеками системных программ или библиотеками стандартных программ.",системах программирования,sys,1
"параллельно с разработкой системных библиотек началась работа по разработке библиотек прикладных программ, которые со временем превратились в пакеты прикладных программ, то есть в совокупности программ, позволяющих выполнить весь комплекс операций по обработке информации.",системных библиотек,sys,1
"параллельно с разработкой системных библиотек началась работа по разработке библиотек прикладных программ, которые со временем превратились в пакеты прикладных программ, то есть в совокупности программ, позволяющих выполнить весь комплекс операций по обработке информации.",прикладных программ,sys,1
"параллельно с разработкой системных библиотек началась работа по разработке библиотек прикладных программ, которые со временем превратились в пакеты прикладных программ, то есть в совокупности программ, позволяющих выполнить весь комплекс операций по обработке информации.",библиотек прикладных программ,sys,1
"параллельно с разработкой системных библиотек началась работа по разработке библиотек прикладных программ, которые со временем превратились в пакеты прикладных программ, то есть в совокупности программ, позволяющих выполнить весь комплекс операций по обработке информации.",пакеты прикладных программ,sys,1
"например, в области математических расчетов созданы многочисленные пакеты программ, лидером среди которых является пакет, принадлежащий международной группе численных алгоритмов (the numerical algorithms group).",пакеты программ,sys,1
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",операционных систем,sys,1
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",трансляторов,sys,1
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",прикладные программы,sys,1
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",вычислительных систем,sys,1
"в научно-исследовательском вычислительном центре мгу создана библиотека численного анализа для использования с трансляторами pgf77 и pgcc с языков фортран-77 и си, разработанными portland group/stm.",трансляторами,sys,1
"85 созданы пакеты прикладных программ для автоматизации бухгалтерского учета и обработки финансовой информации (многие из них используются для работы с программами, написанными на языке кобол).",прикладных программ,sys,1
"85 созданы пакеты прикладных программ для автоматизации бухгалтерского учета и обработки финансовой информации (многие из них используются для работы с программами, написанными на языке кобол).",пакеты прикладных программ,sys,1
широко известны пакеты прикладных программ для управления базами данных (субд) и издательских систем.,базами данных,sys,1
широко известны пакеты прикладных программ для управления базами данных (субд) и издательских систем.,прикладных программ,sys,1
широко известны пакеты прикладных программ для управления базами данных (субд) и издательских систем.,пакеты прикладных программ,sys,1
"в библиотеки могут включаться не только объектные модули системных программ, но и макроопределения.",модули,sys,1
"в библиотеки могут включаться не только объектные модули системных программ, но и макроопределения.",системных программ,sys,1
"в библиотеки могут включаться не только объектные модули системных программ, но и макроопределения.",макроопределения,sys,1
"в библиотеки могут включаться не только объектные модули системных программ, но и макроопределения.",объектные модули,sys,1
"поддержка, которая оказывается ими, осуществляется не на стадии выполнения программ, а на стадии их компиляции, поскольку макроопределения и соответствующие им макровызовы вставляются непосредственно в тексты компилируемых программ.",компиляции,sys,1
"поддержка, которая оказывается ими, осуществляется не на стадии выполнения программ, а на стадии их компиляции, поскольку макроопределения и соответствующие им макровызовы вставляются непосредственно в тексты компилируемых программ.",макроопределения,sys,1
"современные библиотеки содержат также интерфейсную информацию, предназначенную для чтения автоматизированными системами программирования.",системами программирования,sys,1
такая информация может использоваться при передаче компилятору сведений о составе входящих в библиотеку процедур и функций.,компилятору,sys,1
"обрабатывая эти файлы, компилятор автоматически получает всю необходимую информацию о компонентах библиотеки, причем эта информация поставляется в терминах входного языка компилятора.",файлы,sys,1
"обрабатывая эти файлы, компилятор автоматически получает всю необходимую информацию о компонентах библиотеки, причем эта информация поставляется в терминах входного языка компилятора.",компилятора,sys,1
"обрабатывая эти файлы, компилятор автоматически получает всю необходимую информацию о компонентах библиотеки, причем эта информация поставляется в терминах входного языка компилятора.",компилятор,sys,1
"тем самым автор компилируемой программы избавляется от необходимости вставлять в свои тексты описания библиотечных компонентов функций, процедур, а также констант и переменных.",библиотечных компонентов,sys,1
"библиотеки классов следующим шагом в развитии библиотек оказалось создание библиотек классов для систем программирования, основанных на объектно-ориентированных языках программирования (си++, java).",объектно-ориентированных языках,sys,1
"библиотеки классов следующим шагом в развитии библиотек оказалось создание библиотек классов для систем программирования, основанных на объектно-ориентированных языках программирования (си++, java).",библиотек классов,sys,1
"библиотеки классов следующим шагом в развитии библиотек оказалось создание библиотек классов для систем программирования, основанных на объектно-ориентированных языках программирования (си++, java).",систем программирования,sys,1
"библиотеки классов следующим шагом в развитии библиотек оказалось создание библиотек классов для систем программирования, основанных на объектно-ориентированных языках программирования (си++, java).",библиотеки классов,sys,1
"библиотеки классов могут представлять собой совокупности независимых классов, иерархии классов, иерархии шаблонов классов.",библиотеки классов,sys,1
простые наборы описаний классов встречаются в системах программирования все реже и реже.,системах программирования,sys,1
однако такой подход может привести к возникновению проблемы жирного интерфейса .,интерфейса,sys,1
"таким образом, либо исходный базовый класс оказывается пустым (то есть присущей абсолютно всем элементам иерархии общей функциональности выделить не удается), либо строится абстрактный класс с огромным набором виртуальных функций.",базовый класс,sys,1
"таким образом, либо исходный базовый класс оказывается пустым (то есть присущей абсолютно всем элементам иерархии общей функциональности выделить не удается), либо строится абстрактный класс с огромным набором виртуальных функций.",виртуальных функций,sys,1
"86 пустой базовый класс просто имитирует связь нижних уровней иерархии между собой, фактически же такая связь в данном случае отсутствует.",базовый класс,sys,1
"наличие виртуальных функций (иногда семантически далеких друг от друга) заставляет при формировании нижних уровней иерархии реализовывать их все, даже в тех случаях, когда для некоторого конкретного производного класса конкретные функции не могут быть реализованы сколько-нибудь эффективно в виду невозможности придать им полезную интерпретацию.",интерпретацию,sys,1
"наличие виртуальных функций (иногда семантически далеких друг от друга) заставляет при формировании нижних уровней иерархии реализовывать их все, даже в тех случаях, когда для некоторого конкретного производного класса конкретные функции не могут быть реализованы сколько-нибудь эффективно в виду невозможности придать им полезную интерпретацию.",виртуальных функций,sys,1
"отсутствие реализации хотя бы одной виртуальной функции превращает класс в абстрактный, что ограничивает его использование.",виртуальной функции,sys,1
"решают подобные проблемы созданием систем иерархий, то есть построением наборов иерархических деревьев ( леса ), которые между собой не связываются никакими отношениями (по такому принципу построены библиотека stl и стандартная библиотека языка си++).",стандартная библиотека,sys,1
"библиотеки шаблонов построены на основе параметрического полиморфизма, то есть параметризации типов, использования типовых параметров.",параметрического полиморфизма,sys,1
"библиотеки шаблонов построены на основе параметрического полиморфизма, то есть параметризации типов, использования типовых параметров.",полиморфизма,sys,1
библиотека stl и стандартная библиотека языка си++ представляют собой наборы иерархий шаблонов классов.,стандартная библиотека,sys,1
библиотеки компонентов библиотеки компонентов представляют собой развитие понятия библиотек языков программирования на основе развития концепции классов.,библиотеки компонентов,sys,1
"компонентами таких библиотек обычно являются законченные программные модули, из которых достаточно легко строить наиболее типичные приложения, относящиеся к самым произвольным прикладным областям.",модули,sys,1
"компонентами таких библиотек обычно являются законченные программные модули, из которых достаточно легко строить наиболее типичные приложения, относящиеся к самым произвольным прикладным областям.",программные модули,sys,1
"библиотеки компонентов могут включать в себя генераторы отчетов, компоненты для построения сводных таблиц, компоненты для построения графиков и диаграмм, компоненты для создания графических интерфейсов.",интерфейсов,sys,1
"библиотеки компонентов могут включать в себя генераторы отчетов, компоненты для построения сводных таблиц, компоненты для построения графиков и диаграмм, компоненты для создания графических интерфейсов.",графических интерфейсов,sys,1
"библиотеки компонентов могут включать в себя генераторы отчетов, компоненты для построения сводных таблиц, компоненты для построения графиков и диаграмм, компоненты для создания графических интерфейсов.",библиотеки компонентов,sys,1
"библиотечные компоненты имеют общее программное ядро и проектируются на базе единых архитектурных принципов, что облегчает их совместное использование, сокращает время обучения для разработчика.",библиотечные компоненты,sys,1
"компоненты, включаемые в библиотеки, подчиняются правилам инкапсуляции, то есть имеют открытые реализованные интерфейсы, а детали реализации скрываются внутри библиотек и не видны пользователям.",интерфейсы,sys,1
"компоненты, включаемые в библиотеки, подчиняются правилам инкапсуляции, то есть имеют открытые реализованные интерфейсы, а детали реализации скрываются внутри библиотек и не видны пользователям.",инкапсуляции,sys,1
"часто компоненты поставляются в виде двоичных модулей, что позволяет сделать их более независимыми от конкретных систем программирования и использовать в распределенном системном окружении, но противоречит стремлению сделать эти компоненты настраиваемыми (гибкими).",модулей,sys,1
"часто компоненты поставляются в виде двоичных модулей, что позволяет сделать их более независимыми от конкретных систем программирования и использовать в распределенном системном окружении, но противоречит стремлению сделать эти компоненты настраиваемыми (гибкими).",системном окружении,sys,1
"часто компоненты поставляются в виде двоичных модулей, что позволяет сделать их более независимыми от конкретных систем программирования и использовать в распределенном системном окружении, но противоречит стремлению сделать эти компоненты настраиваемыми (гибкими).",систем программирования,sys,1
"часто компоненты поставляются в виде двоичных модулей, что позволяет сделать их более независимыми от конкретных систем программирования и использовать в распределенном системном окружении, но противоречит стремлению сделать эти компоненты настраиваемыми (гибкими).",двоичных модулей,sys,1
такие контейнеры поддерживают развивающуюся технологию визуального программирования (в стиле drag drop ).,визуального программирования,sys,1
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",серверов,sys,1
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",библиотек компонентов,sys,1
"суммируя, можно говорить о том, что все современные библиотеки делятся на две категории: библиотеки, связанные с конкретными системами программирования, и библиотеки, связанные с конкретными задачами, решаемыми с помощью вычислительных машин.",вычислительных машин,sys,1
"суммируя, можно говорить о том, что все современные библиотеки делятся на две категории: библиотеки, связанные с конкретными системами программирования, и библиотеки, связанные с конкретными задачами, решаемыми с помощью вычислительных машин.",системами программирования,sys,1
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,системной библиотеки,sys,1
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,стандартная библиотека,sys,1
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,стандартных библиотек,sys,1
"все современные языки программирования нуждаются в поддержке имеющихся в них средств, причем поддержка им необходима именно в период выполнения программ, полученных путем компиляции с этих языков.",компиляции,sys,1
"при проектировании любой стандартной библиотеки необходимо принимать во внимание ее основное назначение: быть именно стандартной библиотекой, то есть библиотекой средств, необходимых для каждой реализации данного языка программирования.",стандартной библиотекой,sys,1
"при проектировании любой стандартной библиотеки необходимо принимать во внимание ее основное назначение: быть именно стандартной библиотекой, то есть библиотекой средств, необходимых для каждой реализации данного языка программирования.",стандартной библиотеки,sys,1
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",вычислительных систем,sys,1
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",управление памятью,sys,1
при проектировании стандартных библиотек следует учитывать и ограничения на включение в ее состав некоторых (может быть полезных) элементов.,стандартных библиотек,sys,1
"если какое-нибудь средство не оказывается необходимым для обеспечения хотя бы одного из перечисленных свойств, оно должно оставаться за пределами стандартной библиотеки.",стандартной библиотеки,sys,1
"средства стандартной библиотеки должны (требования по свойствам компонентов) быть важными и удобными для использования всеми программистами для решения всех задач, для которых предназначена библиотека (структуры данных и алгоритмы для работы с ними должны иметь общезначимый характер стек, очередь, список, ..., сортировка, поиск, копирование, ...);",стандартной библиотеки,sys,1
89 классическим примером проектирования библиотечных средств является пример библиотечной функции сортировки.,библиотечной функции,sys,1
"в стандартной библиотеке языка программирования си эта функция (в языке си функция сортировки реализует алгоритм быстрой сортировки и называется qsort()) получает в качестве параметра функцию сравнения сортируемых элементов, а не использует для сравнения какую-либо операцию языка си, например, операцию < .",стандартной библиотеке,sys,1
"именно такие 90 соображения послужили причиной включения в стандартную библиотеку си++ таких функций, как генератор случайных чисел.",стандартную библиотеку,sys,1
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",программных комплексов,sys,1
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",системы программирования,sys,1
в это же самое время разработчики могут продолжать свою работу над созданием и отладкой очередных версий.,отладкой,sys,1
широкое внедрение программных систем в различные прикладные области привело к разнообразию способов применения этих систем.,программных систем,sys,1
"поиски путей снижения зависимости программного обеспечения от конкретных параметров окружения, в котором это обеспечение разрабатывается и функционирует, привело к попыткам выносить описания параметров окружения, а также режимов формирования и использования программ за пределы этих самых программ.",программного обеспечения,sys,1
внедрение средств управления конфигурацией шло постепенно и к настоящему моменту можно выделить четыре способа управления конфигурацией программных комплексов.,программных комплексов,sys,1
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",файлов,sys,1
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",программных комплексов,sys,1
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",командных файлов,sys,1
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",командной строки,sys,1
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",командной строки,sys,1
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",системы программирования,sys,1
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",режиме командной строки,sys,1
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",командную строку,sys,1
"такой способ работы подразумевает высокую квалификацию пользователя системы программирования, который должен точно знать все компоненты конкретной системы программирования, необходимые для формирования нужной ему программы, необходимые им параметры, а также правильную последовательность их вызова.",системы программирования,sys,1
"пользователь должен помнить 91 варианты сборки программы, режимы, в которых выполнялось их формирование, имена файлов, в которых размещены результаты работы системы программирования.",файлов,sys,1
"пользователь должен помнить 91 варианты сборки программы, режимы, в которых выполнялось их формирование, имена файлов, в которых размещены результаты работы системы программирования.",системы программирования,sys,1
"пользователь должен помнить 91 варианты сборки программы, режимы, в которых выполнялось их формирование, имена файлов, в которых размещены результаты работы системы программирования.",сборки программы,sys,1
"помощь в снижении трудоемкости формирования программных комплексов оказывает использование командных файлов, содержащих последовательности вызовов компонентов систем программирования.",файлов,sys,1
"помощь в снижении трудоемкости формирования программных комплексов оказывает использование командных файлов, содержащих последовательности вызовов компонентов систем программирования.",программных комплексов,sys,1
"помощь в снижении трудоемкости формирования программных комплексов оказывает использование командных файлов, содержащих последовательности вызовов компонентов систем программирования.",командных файлов,sys,1
"помощь в снижении трудоемкости формирования программных комплексов оказывает использование командных файлов, содержащих последовательности вызовов компонентов систем программирования.",систем программирования,sys,1
"их применение освобождает программистов от запоминания многих технических деталей, которые нужно точно знать только непосредственно в момент создания командного файла.",файла,sys,1
"их применение освобождает программистов от запоминания многих технических деталей, которые нужно точно знать только непосредственно в момент создания командного файла.",командного файла,sys,1
"все вариации конфигураций можно получать, используя развитые языки управления заданиями современных операционных систем, например, возможности условного вызова программ системы программирования или значения переменных системного окружения.",операционных систем,sys,1
"все вариации конфигураций можно получать, используя развитые языки управления заданиями современных операционных систем, например, возможности условного вызова программ системы программирования или значения переменных системного окружения.",системы программирования,sys,1
"все вариации конфигураций можно получать, используя развитые языки управления заданиями современных операционных систем, например, возможности условного вызова программ системы программирования или значения переменных системного окружения.",системного окружения,sys,1
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,программного обеспечения,sys,1
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,разработки программного обеспечения,sys,1
"такие системы умеют работают с проектом программного комплекса , который включает в себя все файлы комплекса (как с текстами программ, так и с библиотечными модулями), а также режимы их обработки.",файлы,sys,1
"такие системы умеют работают с проектом программного комплекса , который включает в себя все файлы комплекса (как с текстами программ, так и с библиотечными модулями), а также режимы их обработки.",модулями,sys,1
"такие системы умеют работают с проектом программного комплекса , который включает в себя все файлы комплекса (как с текстами программ, так и с библиотечными модулями), а также режимы их обработки.",программного комплекса,sys,1
"интегрированные среды позволяют гибко переходить от отладочной конфигурации комплексов к оптимизированной конфигурации, что облегчает процесс сопровождения уже разработанных программ.",интегрированные среды,sys,1
"их использование возможно только в тех случаях, когда над разработкой или сопровождением программного комплекса работает один программист (если таких программистов много, они должны работать последовательно друг за другом, сообщая друг другу обо всех сделанных ими изменениях в программах).",программного комплекса,sys,1
иногда эти коллективы работают в распределенном режиме в глобальной вычислительной сети.,распределенном режиме,sys,1
реальную помощь таким коллективам при управлении конфигурацией формируемых программных комплексов могут оказать только специально разрабатываемые системы управления версиями программ.,программных комплексов,sys,1
"эти системы способны вести централизованные базы данных программных проектов, к которым обеспечен коллективный доступ со стороны многих разработчиков одновременно.",базы данных,sys,1
системы управления версиями программных комплексов в настоящее время многие системы программирования начали включать в свой состав системы управления версиями.,программных комплексов,sys,1
системы управления версиями программных комплексов в настоящее время многие системы программирования начали включать в свой состав системы управления версиями.,системы программирования,sys,1
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",файлы,sys,1
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",базы данных,sys,1
"имеется также определенный выбор систем управления версиями, которые не привязаны жестко к какой-либо системе программирования, а могут работать с любыми из них, ведя базы данных или репозитории файлов, составляющих законченные программные комплексы.",системе программирования,sys,1
"имеется также определенный выбор систем управления версиями, которые не привязаны жестко к какой-либо системе программирования, а могут работать с любыми из них, ведя базы данных или репозитории файлов, составляющих законченные программные комплексы.",программные комплексы,sys,1
"имеется также определенный выбор систем управления версиями, которые не привязаны жестко к какой-либо системе программирования, а могут работать с любыми из них, ведя базы данных или репозитории файлов, составляющих законченные программные комплексы.",файлов,sys,1
"имеется также определенный выбор систем управления версиями, которые не привязаны жестко к какой-либо системе программирования, а могут работать с любыми из них, ведя базы данных или репозитории файлов, составляющих законченные программные комплексы.",базы данных,sys,1
"такие автономные системы управления версиями обычно удобны тем, что позволяют вести управления версиями особенно сложных программных комплексов распределенных.",программных комплексов,sys,1
"эти программные комплексы не только работают, но и создаются в распределенном окружении, в котором разные программисты работают с разными системами программирования, создавая относительно независимые компоненты единой сложной программы.",программные комплексы,sys,1
"эти программные комплексы не только работают, но и создаются в распределенном окружении, в котором разные программисты работают с разными системами программирования, создавая относительно независимые компоненты единой сложной программы.",системами программирования,sys,1
"в этих условиях особенно важно, чтобы работа с репозиторием файлов велась в сетевом режиме с возможностью одновременного доступа с многих рабочих мест.",файлов,sys,1
"такой сетевой репозиторий начинает играть роль программного сервера, а рабочие места оказываются клиентами этого сервера.",сервера,sys,1
"такой сетевой репозиторий начинает играть роль программного сервера, а рабочие места оказываются клиентами этого сервера.",репозиторий,sys,1
"при этом клиенты могут быть самыми разнообразными, они могут работать с разным аппаратным обеспечением, с разными операционными системами, с разными системами программирования.",операционными системами,sys,1
"при этом клиенты могут быть самыми разнообразными, они могут работать с разным аппаратным обеспечением, с разными операционными системами, с разными системами программирования.",системами программирования,sys,1
"именно так и работают лучшие и наиболее используемые системы управления версиями, которые способны поддерживать до нескольких десятков операционных систем и нескольких тысяч клиентов, одновременно работающих над созданием единого программного комплекса.",операционных систем,sys,1
"именно так и работают лучшие и наиболее используемые системы управления версиями, которые способны поддерживать до нескольких десятков операционных систем и нескольких тысяч клиентов, одновременно работающих над созданием единого программного комплекса.",программного комплекса,sys,1
"на клиентских местах разрешается использовать все наиболее распространенные операционные системы (windows, unix, linux, mainframe z/os), а также наиболее современные системы разработки, включая rational application developer, websphere studio, microsoft visual studio .net, eclipse.",операционные системы,sys,1
"серверная часть системы может работать под управлением любого варианта операционной системы unix freebsd, linux и др.",операционной системы,sys,1
"система cvs поддерживает историю дерева каталогов (репозитория) с исходным кодом, работая с последовательностью изменений.",дерева каталогов,sys,1
"каждое изменение в файлах репозитория маркируется 93 моментом времени, когда оно было сделано, и именем пользователя, совершившим изменение.",репозитория,sys,1
"каждое изменение в файлах репозитория маркируется 93 моментом времени, когда оно было сделано, и именем пользователя, совершившим изменение.",файлах,sys,1
"точно так же, как книгу выписывают из библиотеки, следует сначала получить из репозитория рабочее дерево каталогов.",дерево каталогов,sys,1
большинство этих файлов рабочие копии исходных текстов.,файлов,sys,1
"cvs использует его для хранения дополнительной информации о каждом файле в этом каталоге, чтобы определять, какие изменения внесены в них с тех пор, как их извлекли из репозитория.",репозитория,sys,1
"cvs использует его для хранения дополнительной информации о каждом файле в этом каталоге, чтобы определять, какие изменения внесены в них с тех пор, как их извлекли из репозитория.",файле,sys,1
"после того, как рабочее дерево каталогов создано, можно редактировать, компилировать и проверять находящиеся в нем файлы.",файлы,sys,1
"после того, как рабочее дерево каталогов создано, можно редактировать, компилировать и проверять находящиеся в нем файлы.",дерево каталогов,sys,1
перед фиксацией система запускает текстовый редактор и просит ввести описание изменений.,текстовый редактор,sys,1
"система cvs обращается с добавлением и удалением файлов так же, как и с прочими изменениями, записывая такие события в истории файлов.",файлов,sys,1
"фактически, система сохраняет историю каталогов вместе с историей файлов, однако, система не считает, что все созданные файлы должны оказаться под ее контролем; это не так во многих случаях.",файлов,sys,1
"фактически, система сохраняет историю каталогов вместе с историей файлов, однако, система не считает, что все созданные файлы должны оказаться под ее контролем; это не так во многих случаях.",файлы,sys,1
"например, не требуется записывать историю изменений объектных и выполняемых файлов, потому что их содержимое всегда может быть воссоздано из исходных файлов.",файлов,sys,1
"чтобы удалить файл из проекта, его помечают для удаления.",файл,sys,1
фиксация помеченного файла не уничтожает историю этого файла к ней просто добавляется еще одна редакция ( не существует ).,файла,sys,1
"в репозитории по-прежнему хранятся все записи об этом файле, и к ним можно обращаться по желанию.",файле,sys,1
"ситуация проста, если изменения были совершены в 94 разных участках файла, но может быть изменена одна и та же строка, что называется конфликтом.",файла,sys,1
"cvs не понимает семантики программы, она обращается с исходным кодом просто как с деревом текстовых файлов.",файлов,sys,1
"многие системы контроля версий позволяют разработчику блокировать файл, предотвращая внесение в него изменений до тех пор, пока его собственные изменения не будут зафиксированы.",файл,sys,1
"более того, блокировки предотвращают только текстуальные конфликты они ничего не могут поделать с семантическими конфликтами типа вышеописанного, когда два разработчика редактируют разные файлы.",файлы,sys,1
средства отладки и тестирования программ любая полезная программа может содержать ошибки даже после ее передачи пользователям.,тестирования программ,sys,1
средства отладки и тестирования программ любая полезная программа может содержать ошибки даже после ее передачи пользователям.,отладки,sys,1
средства отладки и тестирования программ любая полезная программа может содержать ошибки даже после ее передачи пользователям.,тестирования,sys,1
"чтобы уменьшить число ошибок в программах, еще на этапе программирования (до объединения с другими компонентами создаваемого комплекса) разработчики проводят над своими программами цикл отладки: расставляют операторы выдачи промежуточных результатов работы программы, исследуют содержимое памяти, занятой командами или данными тестируемой (отлаживаемой) программы, применяют автоматизированные средства отладки и тестирования (двоичные и символьные отладчики).",отладки,sys,1
"чтобы уменьшить число ошибок в программах, еще на этапе программирования (до объединения с другими компонентами создаваемого комплекса) разработчики проводят над своими программами цикл отладки: расставляют операторы выдачи промежуточных результатов работы программы, исследуют содержимое памяти, занятой командами или данными тестируемой (отлаживаемой) программы, применяют автоматизированные средства отладки и тестирования (двоичные и символьные отладчики).",тестирования,sys,1
"реализуя его, программисты сами определяют места в программе и номенклатуру переменных, значения которых будут выдаваться во внешний файл (или на дисплей).",файл,sys,1
это один из самых 95 первых методов отладки программ.,отладки,sys,1
это один из самых 95 первых методов отладки программ.,отладки программ,sys,1
"он до сих пор используется при отладке, как небольших программ, так и крупных отладочных комплексов.",отладке,sys,1
"в таких случаях отладочные операторы вставляются в условные операторы, которые выполняются при включении специального отладочного режима выполнения программ.",условные операторы,sys,1
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",операционных систем,sys,1
"большинство компиляторов и редакторов связей в своей работе формируют таблицы, в которых объектам программ сопоставлены зоны памяти целевой вычислительной системы.",компиляторов,sys,1
"большинство компиляторов и редакторов связей в своей работе формируют таблицы, в которых объектам программ сопоставлены зоны памяти целевой вычислительной системы.",вычислительной системы,sys,1
"большинство компиляторов и редакторов связей в своей работе формируют таблицы, в которых объектам программ сопоставлены зоны памяти целевой вычислительной системы.",редакторов связей,sys,1
"по сведениям, содержащимся в этих таблицах легко сопоставить выдаваемую операционной системой информацию и значения переменных программы.",операционной системой,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",объектной программы,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",системах программирования,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",отладку программ,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",отладчик,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",программный компонент,sys,1
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",отладку,sys,1
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",машинным командам,sys,1
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",текстовым редактором,sys,1
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",отладки,sys,1
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",отладчика,sys,1
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",отладку,sys,1
первоначально отладчики выполнялись в виде автономных программных компонентов и представляли собой двоичные отладчики.,отладчики,sys,1
первоначально отладчики выполнялись в виде автономных программных компонентов и представляли собой двоичные отладчики.,программных компонентов,sys,1
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",символьные отладчики,sys,1
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",системах программирования,sys,1
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",отладчики,sys,1
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",среду разработки,sys,1
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",отладку,sys,1
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",системой программирования,sys,1
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",отладчиков,sys,1
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",вычислительных систем,sys,1
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",отладчикам,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",символьные отладчики,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",отладчики,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",компиляторами,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",систем программирования,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",текстовыми редакторами,sys,1
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",редакторами связей,sys,1
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",компиляторов,sys,1
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",таблицам имен,sys,1
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",текстовых редакторов,sys,1
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",отладчикам,sys,1
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",редакторов связей,sys,1
"в интегрированных системах таблицы компилятора не уничтожаются после завершения компиляции, а сохраняются и используются в процессе отладки непосредственно.",компиляции,sys,1
"в интегрированных системах таблицы компилятора не уничтожаются после завершения компиляции, а сохраняются и используются в процессе отладки непосредственно.",отладки,sys,1
"в интегрированных системах таблицы компилятора не уничтожаются после завершения компиляции, а сохраняются и используются в процессе отладки непосредственно.",таблицы компилятора,sys,1
"в интегрированных системах таблицы компилятора не уничтожаются после завершения компиляции, а сохраняются и используются в процессе отладки непосредственно.",компилятора,sys,1
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",компиляторов,sys,1
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",отладчики,sys,1
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",отладки,sys,1
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",текстовых редакторов,sys,1
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",отладчиков,sys,1
"современные отладчики позволили существенно повысить качество разрабатываемого программного обеспечения, однако полностью проблему наличия ошибок в программах они не решили.",отладчики,sys,1
"современные отладчики позволили существенно повысить качество разрабатываемого программного обеспечения, однако полностью проблему наличия ошибок в программах они не решили.",программного обеспечения,sys,1
"именно поэтому на фазе разработки программных комплексов обязательно проводятся мероприятия по тестированию программ, которое представляет собой процесс сравнения результатов работы программ с заранее рассчитанными результатами выполнения тестовых примеров.",тестированию программ,sys,1
"именно поэтому на фазе разработки программных комплексов обязательно проводятся мероприятия по тестированию программ, которое представляет собой процесс сравнения результатов работы программ с заранее рассчитанными результатами выполнения тестовых примеров.",программных комплексов,sys,1
"именно поэтому на фазе разработки программных комплексов обязательно проводятся мероприятия по тестированию программ, которое представляет собой процесс сравнения результатов работы программ с заранее рассчитанными результатами выполнения тестовых примеров.",тестированию,sys,1
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",тестирование,sys,1
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",отладки,sys,1
97 результатом тестирования является вовсе не доказательство отсутствия ошибок в программе.,тестирования,sys,1
"стратегия тестирования, или методы тестирования это систематические методы, используемые для отбора тестов, которые должны быть включены в тестовый комплект.",тестирования,sys,1
"д. тестирование, выполняемое с помощью стратегии поведенческого теста, называется поведенческим тестированием.",поведенческим тестированием,sys,1
"д. тестирование, выполняемое с помощью стратегии поведенческого теста, называется поведенческим тестированием.",тестированием,sys,1
"д. тестирование, выполняемое с помощью стратегии поведенческого теста, называется поведенческим тестированием.",тестирование,sys,1
поведенческое тестирование называется также тестированием черного ящика.,тестирование,sys,1
поведенческое тестирование называется также тестированием черного ящика.,тестированием,sys,1
поведенческое тестирование называется также тестированием черного ящика.,поведенческое тестирование,sys,1
для поведенческого тестирования также используется термин функциональное тестирование.,тестирование,sys,1
для поведенческого тестирования также используется термин функциональное тестирование.,функциональное тестирование,sys,1
для поведенческого тестирования также используется термин функциональное тестирование.,тестирования,sys,1
для поведенческого тестирования также используется термин функциональное тестирование.,поведенческого тестирования,sys,1
"при поведенческом тестировании (в принципе, но не на практике) не обязательно знать, как объект сконструирован.",поведенческом тестировании,sys,1
"при поведенческом тестировании (в принципе, но не на практике) не обязательно знать, как объект сконструирован.",тестировании,sys,1
"например: выполнение каждого оператора программы по меньшей мере один раз, выполнение каждой ветви программы по меньшей мере один раз, использование всех объектов данных, выполнение каждой команды объектной программы, полученной при компиляции.",компиляции,sys,1
"например: выполнение каждого оператора программы по меньшей мере один раз, выполнение каждой ветви программы по меньшей мере один раз, использование всех объектов данных, выполнение каждой команды объектной программы, полученной при компиляции.",объектной программы,sys,1
"тестирование, выполненное с помощью стратегии структурного теста, называется также тестированием прозрачного ящика или тестированием белого ящика.",тестирование,sys,1
"тестирование, выполненное с помощью стратегии структурного теста, называется также тестированием прозрачного ящика или тестированием белого ящика.",тестированием,sys,1
"тестирование, выполненное с помощью стратегии структурного теста, называется также тестированием прозрачного ящика или тестированием белого ящика.",тестированием белого ящика,sys,1
модули и низкоуровневые компоненты часто тестируются с помощью структурной стратегии.,модули,sys,1
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",тестирование,sys,1
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",программный комплекс,sys,1
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",отладке программ,sys,1
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",отладке,sys,1
такое тестирование следует называть автономным.,тестирование,sys,1
автономное тестирование детально проверяет каждый разработанный программный компонент.,тестирование,sys,1
автономное тестирование детально проверяет каждый разработанный программный компонент.,программный компонент,sys,1
комплексное тестирование призвано проверить все аспекты работы программы от правильности взаимодействия внутренних программных компонентов до правильности взаимодействия программного комплекса с его пользователями.,тестирование,sys,1
комплексное тестирование призвано проверить все аспекты работы программы от правильности взаимодействия внутренних программных компонентов до правильности взаимодействия программного комплекса с его пользователями.,программных компонентов,sys,1
комплексное тестирование призвано проверить все аспекты работы программы от правильности взаимодействия внутренних программных компонентов до правильности взаимодействия программного комплекса с его пользователями.,программного комплекса,sys,1
его необходимость подтверждается многочисленными исследованиями действующих программных систем.,программных систем,sys,1
"некоторые современные теории предсказывают, что по мере приближения к теоретическому минимуму числа ошибок исправления, вносимые в программы, могут приводить к появлению даже большего числа ошибок, чем было ранее: во время пользовательского тестирования результаты работы программы проверяются с прикладной точки зрения.",тестирования,sys,1
"на этом этапе необходимо проверить является ли разработанный программный продукт именно тем, что было заказано, все ли заказанные свойства реализованы, соответствует ли результат поставленным целям.",программный продукт,sys,1
число оставшихс я в программе затраты на тестирование наивно-традиционный взгляд г. майерс современная теория хаоса 99 техническое тестирование дает возможность проверить безопасную и эффективную работу созданной программы в нормальном и пиковом режимах ее использования.,тестирование,sys,1
"особенно важно при проведении тестирования программ иметь заранее составленные сценарии тестирования и тестовые примеры, которые должны охватывать все варианты возможного поведения и реакции программы, как в режиме нормальной работы, так и в случае возникновения необычных ситуаций.",тестирования программ,sys,1
"особенно важно при проведении тестирования программ иметь заранее составленные сценарии тестирования и тестовые примеры, которые должны охватывать все варианты возможного поведения и реакции программы, как в режиме нормальной работы, так и в случае возникновения необычных ситуаций.",тестирования,sys,1
"например, компилятор следует тестировать, подавая ему на вход не только правильные программы, но и программы, содержащие все возможные ошибки.",компилятор,sys,1
"в настоящее время доступно множество специальных средств автоматизированного тестирования программ, обеспечивающих управление тестированием, высокую скорость тестирования и повторяемость тестов.",тестирования программ,sys,1
"в настоящее время доступно множество специальных средств автоматизированного тестирования программ, обеспечивающих управление тестированием, высокую скорость тестирования и повторяемость тестов.",тестированием,sys,1
"в настоящее время доступно множество специальных средств автоматизированного тестирования программ, обеспечивающих управление тестированием, высокую скорость тестирования и повторяемость тестов.",тестирования,sys,1
некоторым недостатком имеющихся средств тестирования является их высокая стоимость и большие затраты времени на подготовку полноценных тестовых примеров.,тестирования,sys,1
важной в тестировании является возможность проведения регрессивного тестирования.,тестирования,sys,1
важной в тестировании является возможность проведения регрессивного тестирования.,тестировании,sys,1
"регрессивные тесты, повторяемые после каждого исправления программы, позволяют убедиться, что функциональность программы, не связанная с внесенным исправлением, не затронута этим исправлением и не утрачена из-за него.",регрессивные тесты,sys,1
"профилировщики один из способов повысить эффективность работы программы провести ее профилирование, то есть определить время, затрачиваемое на выполнение отдельных ее фрагментов.",профилировщики,sys,1
"профилировщик целесообразно использовать, чтобы выявить функции, которые требуют большого времени, затем определить, почему и как они вызываются, и поискать способы минимизации их использования.",профилировщик,sys,1
"часто профилировщик помогает выявить проблемы, которые могут быть решены: отказом от лишних вычислений, которые могут быть следствием невнимательности; 100 корректировкой алгоритма, чтобы избежать вызова неэффективных функций; отказом от многократных повторных вычислений путем хранения результатов для последующего использования.",профилировщик,sys,1
"современные профилировщики способны измерять время выполнения каждой функции программы, а иногда и каждой ее строки.",профилировщики,sys,1
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",отладчики,sys,1
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",производительность системы,sys,1
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",профилировщики,sys,1
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",профилировщики,sys,1
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",отладке программ,sys,1
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",отладке,sys,1
"профилировщик помогает определить, где в действительности находится ошибка, снижающая производительность программы.",профилировщик,sys,1
"профилировщик аналогичен программному логическому анализатору, способному выдавать огромные объемы информации.",профилировщик,sys,1
"профилировщик аналогичен программному логическому анализатору, способному выдавать огромные объемы информации.",анализатору,sys,1
профилировщик позволяет разработчику точно настраивать поведение системы в условиях реальной эксплуатации и визуализировать события для быстрого обнаружения проблемы.,профилировщик,sys,1
"с помощью профилировщика можно выявлять точки взаимной блокировки процессов, некоторые логические и скрытые ошибки в программах, собирать данные о взаимодействии процессов, выполняемых в системе, фиксировать время происходящих программных событий, определять участвующие в работе программные модули.",профилировщика,sys,1
"с помощью профилировщика можно выявлять точки взаимной блокировки процессов, некоторые логические и скрытые ошибки в программах, собирать данные о взаимодействии процессов, выполняемых в системе, фиксировать время происходящих программных событий, определять участвующие в работе программные модули.",модули,sys,1
"с помощью профилировщика можно выявлять точки взаимной блокировки процессов, некоторые логические и скрытые ошибки в программах, собирать данные о взаимодействии процессов, выполняемых в системе, фиксировать время происходящих программных событий, определять участвующие в работе программные модули.",программные модули,sys,1
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",профилировщик,sys,1
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",операционной системы,sys,1
"наиболее известным и широко распространенным (хотя и не самым лучшим) профилировщиком является программа prof, входящая в состав операционных систем unix.",профилировщиком,sys,1
"наиболее известным и широко распространенным (хотя и не самым лучшим) профилировщиком является программа prof, входящая в состав операционных систем unix.",операционных систем,sys,1
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",компиляторов,sys,1
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",компиляторами,sys,1
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",системами программирования,sys,1
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",системы программирования,sys,1
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",библиотечных функций,sys,1
"в состав систем программирования стали включаться справочные системы, представляющие собой обширные базы данных с включенными в них сведениями по всем интересующим пользователей вопросам.",систем программирования,sys,1
"в состав систем программирования стали включаться справочные системы, представляющие собой обширные базы данных с включенными в них сведениями по всем интересующим пользователей вопросам.",базы данных,sys,1
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",системе программирования,sys,1
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",библиотечным компонентам,sys,1
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",систему программирования,sys,1
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",систем программирования,sys,1
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",операционной системе,sys,1
"базы данных справочных систем дополняются индексами, облегчающими поиск информации.",базы данных,sys,1
"поэтому справочными системами в настоящее время снабжаются не только системы программирования и другие компоненты системного программного обеспечения, но также и системы прикладных программ.",программного обеспечения,sys,1
"поэтому справочными системами в настоящее время снабжаются не только системы программирования и другие компоненты системного программного обеспечения, но также и системы прикладных программ.",прикладных программ,sys,1
"поэтому справочными системами в настоящее время снабжаются не только системы программирования и другие компоненты системного программного обеспечения, но также и системы прикладных программ.",системного программного обеспечения,sys,1
"поэтому справочными системами в настоящее время снабжаются не только системы программирования и другие компоненты системного программного обеспечения, но также и системы прикладных программ.",системы программирования,sys,1
"такой подход позволяет компаниям поставщикам систем программирования своевременно вносить все необходимые исправления, поддерживая актуальность документации.",систем программирования,sys,1
однако простой демонстрацией текстов документов справочные системы современных систем программирования не ограничиваются.,систем программирования,sys,1
"интеграция всех компонентов систем программирования позволила обеспечить совместную работу текстовых редакторов, компиляторов и справочных систем.",компиляторов,sys,1
"интеграция всех компонентов систем программирования позволила обеспечить совместную работу текстовых редакторов, компиляторов и справочных систем.",текстовых редакторов,sys,1
"интеграция всех компонентов систем программирования позволила обеспечить совместную работу текстовых редакторов, компиляторов и справочных систем.",систем программирования,sys,1
"справочную информацию теперь можно получать, не только обращаясь к базе данных документов и проводя поиск по индексам, но и выполняя быстрый контекстный поиск необходимой информации.",базе данных,sys,1
"работая в текстовом редакторе, пользователь может выделить в тексте программы желаемый идентификатор и, нажав некоторую комбинацию клавиш на клавиатуре, получить информацию об объектах, имеющих такое имя.",текстовом редакторе,sys,1
краткий обзор современных систем программирования 4.1.,систем программирования,sys,1
"компонентный подход и визуальное программирование к настоящему времени разработано и внедрено в практику программирования большое число систем разработки и сопровождения программ, написанных на языках, поддерживающих принципы объектно-ориентированного программирования.",визуальное программирование,sys,1
"компонентный подход и визуальное программирование к настоящему времени разработано и внедрено в практику программирования большое число систем разработки и сопровождения программ, написанных на языках, поддерживающих принципы объектно-ориентированного программирования.",объектно-ориентированного программирования,sys,1
при этом простым включением объектно-ориентированных языков в состав систем программирования дело обычно не ограничивается.,объектно-ориентированных языков,sys,1
при этом простым включением объектно-ориентированных языков в состав систем программирования дело обычно не ограничивается.,систем программирования,sys,1
"все более явственно просматривается тенденция строить сами системы программирования в объектно-ориентированном стиле, то есть включать в состав этих систем средства, позволяющие вести проектирование программ (и даже само техническое программирование) на основе принципов объектно- ориентированного подхода.",системы программирования,sys,1
"все более явственно просматривается тенденция строить сами системы программирования в объектно-ориентированном стиле, то есть включать в состав этих систем средства, позволяющие вести проектирование программ (и даже само техническое программирование) на основе принципов объектно- ориентированного подхода.",проектирование программ,sys,1
наиболее ярко эти тенденции проявляются в последовательном применении компонентного и визуального программирования.,визуального программирования,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",интерфейс,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",модулями,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",программными модулями,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",программный модуль,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",модуль,sys,1
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",программной системы,sys,1
"другой смысл вкладывается в этот термин, когда говорят о компонентах, как об элементах сборки программы некоторых ее относительно небольших (иногда незавершенных) фрагментах или заготовках, которые можно извлекать из библиотек (вообще говоря, из любых библиотек, но чаще при этом имеются в виду разрабатываемые специально для подобного стиля программирования библиотеки компонентов ).",сборки программы,sys,1
"другой смысл вкладывается в этот термин, когда говорят о компонентах, как об элементах сборки программы некоторых ее относительно небольших (иногда незавершенных) фрагментах или заготовках, которые можно извлекать из библиотек (вообще говоря, из любых библиотек, но чаще при этом имеются в виду разрабатываемые специально для подобного стиля программирования библиотеки компонентов ).",библиотеки компонентов,sys,1
"наконец, в распределенных программных системах (серверах приложений, сетевых службах) под компонентом часто понимают определенную функционально законченную и самодостаточную структурную единицу программы, обладающую точно описанным интерфейсом и даже некоторую независимость от других подобных компонентов этого же программного комплекса.",программных системах,sys,1
"наконец, в распределенных программных системах (серверах приложений, сетевых службах) под компонентом часто понимают определенную функционально законченную и самодостаточную структурную единицу программы, обладающую точно описанным интерфейсом и даже некоторую независимость от других подобных компонентов этого же программного комплекса.",серверах,sys,1
"наконец, в распределенных программных системах (серверах приложений, сетевых службах) под компонентом часто понимают определенную функционально законченную и самодостаточную структурную единицу программы, обладающую точно описанным интерфейсом и даже некоторую независимость от других подобных компонентов этого же программного комплекса.",интерфейсом,sys,1
"наконец, в распределенных программных системах (серверах приложений, сетевых службах) под компонентом часто понимают определенную функционально законченную и самодостаточную структурную единицу программы, обладающую точно описанным интерфейсом и даже некоторую независимость от других подобных компонентов этого же программного комплекса.",программного комплекса,sys,1
"например, в сервере приложений j2ee имеется специальный компонент, позволяющий создавать сервлеты, представляющие собой классы языка программирования java, реализующие обработку запросов по протоколу взаимодействия http и генерацию ответных сообщений в формате этого протокола, и взаимодействовать с созданными сервлетами.",сервере,sys,1
"этот компонент может присутствовать в конкретной программной системе или отсутствовать в ней (если взаимодействие через интернет не является задачей системы), благодаря точному описанию интерфейса и независимости от других компонентов сервера приложений, он 104 может даже использоваться в других системах, не обязательно написанных на языке java.",интерфейса,sys,1
"этот компонент может присутствовать в конкретной программной системе или отсутствовать в ней (если взаимодействие через интернет не является задачей системы), благодаря точному описанию интерфейса и независимости от других компонентов сервера приложений, он 104 может даже использоваться в других системах, не обязательно написанных на языке java.",сервера,sys,1
"этот компонент может присутствовать в конкретной программной системе или отсутствовать в ней (если взаимодействие через интернет не является задачей системы), благодаря точному описанию интерфейса и независимости от других компонентов сервера приложений, он 104 может даже использоваться в других системах, не обязательно написанных на языке java.",программной системе,sys,1
"чаще всего, когда говорят о компонентном подходе к построению современных систем программного обеспечения, имеют в виду именно эту, последнюю трактовку термина компонент .",программного обеспечения,sys,1
"компонентная разработка предлагает строить такие системы последовательно из отдельных элементов компонентов , каждый из которых, в свою очередь, может рассматриваться как отдельная программная система.",программная система,sys,1
компоненты отличаются от классов объектно-ориентированных языков.,объектно-ориентированных языков,sys,1
"класс определяет не только набор реализуемых интерфейсов, но и саму их реализацию.",интерфейсов,sys,1
в описании компонента реализация интерфейсов обычно не зафиксирована.,интерфейсов,sys,1
"понятие компонента является более узким, чем понятие программного модуля.",модуля,sys,1
"понятие компонента является более узким, чем понятие программного модуля.",программного модуля,sys,1
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,модуля,sys,1
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,интерфейса,sys,1
"используя приемы визуального программирования, программист не создает тексты программ, а показывает, что должно получиться в результате.",визуального программирования,sys,1
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",системы программирования,sys,1
"тексты программ, управляющих такими формами, генерируются автоматически с помощью визуального прототипа соответствующего компонента на основе используемых в системе библиотек компонентов.",библиотек компонентов,sys,1
"как и компонентное программирование, визуальное программирование основывается на объектно- ориентированном подходе, поскольку с каждым наглядным элементом связан какой-нибудь класс или чаще целый набор классов, описывающих интерфейсы и реализации методов, с помощью которых осуществляется взаимодействие с данным элементом.",интерфейсы,sys,1
"как и компонентное программирование, визуальное программирование основывается на объектно- ориентированном подходе, поскольку с каждым наглядным элементом связан какой-нибудь класс или чаще целый набор классов, описывающих интерфейсы и реализации методов, с помощью которых осуществляется взаимодействие с данным элементом.",визуальное программирование,sys,1
визуальное программирование широко используется в системах 105 создания приложений.,визуальное программирование,sys,1
системы программирования компании borland фирма borland внесла существенный вклад в создание современных представлений о системах программирования персональных эвм.,системы программирования,sys,1
системы программирования компании borland фирма borland внесла существенный вклад в создание современных представлений о системах программирования персональных эвм.,системах программирования,sys,1
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",систем программирования,sys,1
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",язык ассемблера,sys,1
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",процессоров,sys,1
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",ассемблера,sys,1
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",транслятора,sys,1
"turbo pascal наиболее известной серией этих систем, продолжающейся до сих пор, является самая первая из них, связанная с программированием на языке паскаль в самой первой операционной системе персональных эвм ms dos.",операционной системе,sys,1
"в настоящее время компанией borland выпускается несколько систем программирования: turbo pascal версии 7.0, borland pascal для ms dos и delphi для ms windows.",систем программирования,sys,1
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",интегрированной среды,sys,1
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",отладки,sys,1
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",отладки программ,sys,1
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",среды разработки,sys,1
"концепция стандартных модулей, предложенная в языке под названием turbo pascal, некоторыми своими чертами напоминает подход, описанный в языке модула-2 с помощью модулей определений и модулей реализации.",модулей,sys,1
в модуле-2 парадигмы модульного и структурного программирования нашли свое почти идеальное воплощение.,структурного программирования,sys,1
однако развитие систем программирования компании borland шло по другому пути.,систем программирования,sys,1
"вместо модулей определений и реализации в языке turbo pascal появились модули, имеющие разделы интерфейса и реализации.",модулей,sys,1
"вместо модулей определений и реализации в языке turbo pascal появились модули, имеющие разделы интерфейса и реализации.",модули,sys,1
"вместо модулей определений и реализации в языке turbo pascal появились модули, имеющие разделы интерфейса и реализации.",интерфейса,sys,1
"появились и элементы объектно-ориентированного программирования, в частности, привязка процедур и функций к 106 описаниям сложных объектов.",объектно-ориентированного программирования,sys,1
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",операционных систем,sys,1
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",системы программирования,sys,1
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",объектно-ориентированного программирования,sys,1
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",системах программирования,sys,1
указанные особенности языка программирования turbo pascal до некоторой степени повлияли и на саму систему программирования turbo pascal.,систему программирования,sys,1
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",отладки,sys,1
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",редактор текстов,sys,1
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",отладки программ,sys,1
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",модулей,sys,1
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",файловой системы,sys,1
транслятор с языка программирования turbo pascal с подсистемой фиксации и индикации синтаксических ошибок в текстах.,транслятор,sys,1
набор стандартных системных модулей для работы с основными внешними устройствами эвм.,модулей,sys,1
"компоновщик модулей, позволяющий собирать из ранее оттранслированных модульных фрагментов программ и библиотечных модулей полноценные исполняемые программы.",компоновщик,sys,1
"компоновщик модулей, позволяющий собирать из ранее оттранслированных модульных фрагментов программ и библиотечных модулей полноценные исполняемые программы.",модулей,sys,1
"компоновщик модулей, позволяющий собирать из ранее оттранслированных модульных фрагментов программ и библиотечных модулей полноценные исполняемые программы.",исполняемые программы,sys,1
"отладчик программ, позволяющий отлаживать программы в пошаговом режиме и просматривать промежуточные значения внутренних переменных программ, состояния памяти эвм.",отладчик программ,sys,1
"отладчик программ, позволяющий отлаживать программы в пошаговом режиме и просматривать промежуточные значения внутренних переменных программ, состояния памяти эвм.",отладчик,sys,1
"отладчик помогает устанавливать в программе контрольные точки, на которых при выполнении программы может быть осуществлена остановка программы.",отладчик,sys,1
"благодаря тому, что системы программирования turbo pascal работают под управлением операционной системы ms dos, в состав этих систем удалось включить стандартные модули, работающие с ресурсами и аппаратными элементами эвм (ввод/вывод dos, графическая подсистема graph, текстовая консоль crt и др.) в режиме полного управления.",модули,sys,1
"благодаря тому, что системы программирования turbo pascal работают под управлением операционной системы ms dos, в состав этих систем удалось включить стандартные модули, работающие с ресурсами и аппаратными элементами эвм (ввод/вывод dos, графическая подсистема graph, текстовая консоль crt и др.) в режиме полного управления.",системы программирования,sys,1
"благодаря тому, что системы программирования turbo pascal работают под управлением операционной системы ms dos, в состав этих систем удалось включить стандартные модули, работающие с ресурсами и аппаратными элементами эвм (ввод/вывод dos, графическая подсистема graph, текстовая консоль crt и др.) в режиме полного управления.",операционной системы,sys,1
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",модулями программы,sys,1
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",модулями,sys,1
"в таких случаях более выгодно переходить к работе в других системах программирования, получивших торговую марку delphi.",системах программирования,sys,1
"delphi появление новой серии программных продуктов фирмы borland, с маркой delphi, фактически привело к завершению ранее выпускавшейся серии turbo pascal.",программных продуктов,sys,1
в дополнение к аспектам модульного программирования к нему были добавлены практически все признаки объектно-ориентированных языков.,модульного программирования,sys,1
"этот язык можно даже рассматривать не как аналог, а как образец, используемый разработчиками новых объектно-ориентированных языков на базе языка паскаль.",объектно-ориентированных языков,sys,1
именно на примере си++ были продемонстрированы принципы объектно-ориентированного программирования и его достоинства.,объектно-ориентированного программирования,sys,1
"до настоящего времени в языке object pascal отсутствуют или выглядят чрезмерно усложненными некоторые элементы, реализованные в си++ легко и просто, хотя в нем есть и объекты, и классы, и наследование их свойств, и полиморфизм.",полиморфизм,sys,1
"изменение свойств основного языка программирования, являющего ядром системы программирования повлияло на свойства самой системы программирования.",системы программирования,sys,1
"если системы turbo pascal просто предоставляли удобный пользовательский интерфейс для создателей программ, то системы delphi прямо ориентированы на визуальное программирование.",интерфейс,sys,1
"если системы turbo pascal просто предоставляли удобный пользовательский интерфейс для создателей программ, то системы delphi прямо ориентированы на визуальное программирование.",пользовательский интерфейс,sys,1
"если системы turbo pascal просто предоставляли удобный пользовательский интерфейс для создателей программ, то системы delphi прямо ориентированы на визуальное программирование.",визуальное программирование,sys,1
"это стало возможным благодаря переходу от использования ms-dos к работе в операционной системе нового поколения windows и постепенной стабилизации и стандартизации возможностей, предоставляемых этой системой пользователям, в частности создателям систем программирования.",систем программирования,sys,1
"это стало возможным благодаря переходу от использования ms-dos к работе в операционной системе нового поколения windows и постепенной стабилизации и стандартизации возможностей, предоставляемых этой системой пользователям, в частности создателям систем программирования.",операционной системе,sys,1
"система delphi это не просто интегрированная система программирования, а интегрированная среда разработки (ide integrated development environment), предоставляющая 108 программистам формы с огромным количеством различных компонентов.",система программирования,sys,1
"система delphi это не просто интегрированная система программирования, а интегрированная среда разработки (ide integrated development environment), предоставляющая 108 программистам формы с огромным количеством различных компонентов.",среда разработки,sys,1
"результат проектирования диалога непосредственно виден на экране эвм, никакой компиляции не требуется.",компиляции,sys,1
"номенклатура готовых компонентов постоянно расширяется, библиотеки компонентов (vcl visual component library), настолько обширны, что позволяют легко создавать самые сложные диалоговые формы.",библиотеки компонентов,sys,1
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",отладки,sys,1
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",программного обеспечения,sys,1
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,баз данных,sys,1
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,систем программирования,sys,1
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,распределенными системами,sys,1
в состав самых первых систем программирования delphi уже был включен процессор баз данных компании borland (bde borland database engine).,процессор,sys,1
в состав самых первых систем программирования delphi уже был включен процессор баз данных компании borland (bde borland database engine).,баз данных,sys,1
в состав самых первых систем программирования delphi уже был включен процессор баз данных компании borland (bde borland database engine).,систем программирования,sys,1
процессор bde является посредником 109 между прикладными программами и базами данных.,процессор,sys,1
процессор bde является посредником 109 между прикладными программами и базами данных.,прикладными программами,sys,1
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",интерфейс,sys,1
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",прикладных программ,sys,1
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",процессор,sys,1
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",базы данных,sys,1
"в состав процессора bde входят драйверы систем управления базами данных (субд) для некоторых, наиболее распространенных на персональных эвм субд: microsoft access, foxpro, paradox, dbase и некоторых других.",базами данных,sys,1
"в состав процессора bde входят драйверы систем управления базами данных (субд) для некоторых, наиболее распространенных на персональных эвм субд: microsoft access, foxpro, paradox, dbase и некоторых других.",процессора,sys,1
"в состав bde входит также драйвер odbc (open database connectivity), разработанный для включения в системы delphi возможностей, предоставляемых для связи с базами данных.",базами данных,sys,1
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",базами данных,sys,1
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",программный продукт,sys,1
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",систем программирования,sys,1
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",процессору,sys,1
"процессор bde поддерживает стандартный язык запросов sql, который позволяет выдавать запросы к серверам баз данных oracle, приложение delphi borland database engine (bde) драйвер paradox ...",процессор,sys,1
"процессор bde поддерживает стандартный язык запросов sql, который позволяет выдавать запросы к серверам баз данных oracle, приложение delphi borland database engine (bde) драйвер paradox ...",серверам,sys,1
"процессор bde поддерживает стандартный язык запросов sql, который позволяет выдавать запросы к серверам баз данных oracle, приложение delphi borland database engine (bde) драйвер paradox ...",баз данных,sys,1
"драйвер odbc интерфей с sql база данны х база данны х база данны х sql сервер база данны х таблиц а таблиц а таблиц а таблиц а таблиц а таблиц а 110 sybase, microsoft sql, interbase и другим.",сервер,sys,1
"драйвер odbc интерфей с sql база данны х база данны х база данны х sql сервер база данны х таблиц а таблиц а таблиц а таблиц а таблиц а таблиц а 110 sybase, microsoft sql, interbase и другим.",база данны,sys,1
"это обеспечивает возможность работать не только с локальными базами данных, то есть с базами, размещенными на тех же компьютерах, что и основная прикладная программа, но и с распределенными базами данных в системах с архитектурой клиент/сервер .",базами данных,sys,1
"это обеспечивает возможность работать не только с локальными базами данных, то есть с базами, размещенными на тех же компьютерах, что и основная прикладная программа, но и с распределенными базами данных в системах с архитектурой клиент/сервер .",прикладная программа,sys,1
"это обеспечивает возможность работать не только с локальными базами данных, то есть с базами, размещенными на тех же компьютерах, что и основная прикладная программа, но и с распределенными базами данных в системах с архитектурой клиент/сервер .",сервер,sys,1
в рамках расширения возможностей и эффективности работы системы программирования delphi в составе операционной системы ms windows компания borland начала использование разработанной в microsoft технологии ado (activex data objects).,системы программирования,sys,1
в рамках расширения возможностей и эффективности работы системы программирования delphi в составе операционной системы ms windows компания borland начала использование разработанной в microsoft технологии ado (activex data objects).,операционной системы,sys,1
"этот пользовательский интерфейс включает как реляционные, так и не реляционные базы данных, электронную почту, поддержку системных, текстовых и графических файлов.",интерфейс,sys,1
"этот пользовательский интерфейс включает как реляционные, так и не реляционные базы данных, электронную почту, поддержку системных, текстовых и графических файлов.",пользовательский интерфейс,sys,1
"этот пользовательский интерфейс включает как реляционные, так и не реляционные базы данных, электронную почту, поддержку системных, текстовых и графических файлов.",файлов,sys,1
"этот пользовательский интерфейс включает как реляционные, так и не реляционные базы данных, электронную почту, поддержку системных, текстовых и графических файлов.",базы данных,sys,1
"использование ado позволяет решить проблемы локализации данных (в частности, проблемы многоязыковых данных и шрифтов), и полностью отказаться от специализированного процессора bde, поскольку поддержка ado включена в типовую поставку операционной системы ms windows.",операционной системы,sys,1
"использование ado позволяет решить проблемы локализации данных (в частности, проблемы многоязыковых данных и шрифтов), и полностью отказаться от специализированного процессора bde, поскольку поддержка ado включена в типовую поставку операционной системы ms windows.",процессора,sys,1
сама компания borland также продолжила развитие собственной системы программирования в части поддержки работы с базами данных.,базами данных,sys,1
сама компания borland также продолжила развитие собственной системы программирования в части поддержки работы с базами данных.,системы программирования,sys,1
"ею были разработаны технологии ibx (interbase express) и dbexpress, которые полностью заменили процессор bde.",процессор,sys,1
"в настоящее время компания рекомендует пользоваться не процессором bde, а более современной технологией dbexpress, которая использует для получения данных исключительно запросы sql.",процессором,sys,1
"c++ builder по своим возможностям с++ builder практически полностью пересекается с системами delphi: и здесь и там использован метод технического проектирования программы, называемый визуальным программированием.",визуальным программированием,sys,1
"c++ builder по своим возможностям с++ builder практически полностью пересекается с системами delphi: и здесь и там использован метод технического проектирования программы, называемый визуальным программированием.",проектирования программы,sys,1
"отличие от систем delphi в данном случае заключается в том, что базовым языком данной системы программирования является язык си++.",системы программирования,sys,1
"отличие от систем delphi в данном случае заключается в том, что базовым языком данной системы программирования является язык си++.",базовым языком,sys,1
в системе программирования с++ builder явно прослеживается тенденция построения многоязыковых систем программирования.,систем программирования,sys,1
в системе программирования с++ builder явно прослеживается тенденция построения многоязыковых систем программирования.,системе программирования,sys,1
в большой степени это связано с входящей в состав системы с++ builder библиотекой визуальных компонентов vcl.,библиотекой визуальных компонентов,sys,1
"первоначально эта библиотека была разработана для систем программирования на паскале, то есть систем delphi, а позднее была перенесена в с++ builder.",систем программирования,sys,1
"наличие этой библиотеки в разных системах программирования позволяет пользователю писать программу, состоящую из фрагментов, написанных на разных языках.",системах программирования,sys,1
"111 библиотека vcl замечательна еще и тем, что она полностью построена на принципах объектно-ориентированного программирования и единой иерархии классов с общим базовым классом tobject, находящимся в основе этой иерархии.",объектно-ориентированного программирования,sys,1
"111 библиотека vcl замечательна еще и тем, что она полностью построена на принципах объектно-ориентированного программирования и единой иерархии классов с общим базовым классом tobject, находящимся в основе этой иерархии.",базовым классом,sys,1
наличие общего корня библиотеки классов позволяет использовать полиморфизм для реализации общих алгоритмов и структур данных.,полиморфизм,sys,1
наличие общего корня библиотеки классов позволяет использовать полиморфизм для реализации общих алгоритмов и структур данных.,библиотеки классов,sys,1
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",стандартной библиотекой,sys,1
"системы программирования компании microsoft к наиболее распространенным системам программирования для настольных эвм относятся системы, выпускаемые компанией microsoft.",системы программирования,sys,1
"системы программирования компании microsoft к наиболее распространенным системам программирования для настольных эвм относятся системы, выпускаемые компанией microsoft.",системам программирования,sys,1
"весь комплекс программ, поставляемых компанией microsoft, следует называть единой операционной средой, предназначенной для разработчиков системного и прикладного программного обеспечения.",программного обеспечения,sys,1
"весь комплекс программ, поставляемых компанией microsoft, следует называть единой операционной средой, предназначенной для разработчиков системного и прикладного программного обеспечения.",прикладного программного обеспечения,sys,1
"весь комплекс программ, поставляемых компанией microsoft, следует называть единой операционной средой, предназначенной для разработчиков системного и прикладного программного обеспечения.",комплекс программ,sys,1
"системы, выпускаемые компанией microsoft, выполнены в едином стиле, их интерфейс хорошо продуман.",интерфейс,sys,1
"многооконный интерфейс позволяет одновременно видеть различную информацию о создаваемой, тестируемой или исполняемой программе.",интерфейс,sys,1
"многооконный интерфейс позволяет одновременно видеть различную информацию о создаваемой, тестируемой или исполняемой программе.",многооконный интерфейс,sys,1
"многооконный интерфейс позволяет одновременно видеть различную информацию о создаваемой, тестируемой или исполняемой программе.",исполняемой программе,sys,1
"все системы имеют развитые отладчики, которые работают в терминах базового языка программирования (basic/cи++/язык ассемблера).",базового языка,sys,1
"все системы имеют развитые отладчики, которые работают в терминах базового языка программирования (basic/cи++/язык ассемблера).",ассемблера,sys,1
"в любой момент времени программист может проверить состояние того или иного объекта данных, а в процессе отладки можно даже менять некоторые значения переменных и сразу продолжать работу с точки остановки программы без дополнительной перекомпиляции.",отладки,sys,1
visual basic наиболее известной и распространенной системой программирования компании microsoft является система visual basic.,системой программирования,sys,1
"язык basic, в том виде, каким он предстает в современных системах программирования, сильно отличается от своей первоначальной версии.",системах программирования,sys,1
"в настоящее время это объектно-ориентированный язык, обладающий всеми возможностями других, более новых языков программирования, но оставшийся весьма простым для изучения, благодаря простым изобразительным средствам.",объектно-ориентированный язык,sys,1
система программирования в процессе создания форм автоматически создает программу на языке visual basic.,система программирования,sys,1
"значительное облегчение пользователям приносят также библиотеки стандартных форм и элементов управления ( библиотеки компонентов ), а также развитая система оказания помощи пользователям, снабженная огромным количеством примеров.",библиотеки компонентов,sys,1
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",отладка,sys,1
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",систему программирования,sys,1
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",отладчик,sys,1
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",отладка программ,sys,1
"в целом, систему visual basic можно определить, как инструментальную среду для разработки самых различных программных продуктов.",программных продуктов,sys,1
"следует только помнить о необходимости сопровождать распространение программы, написанной в системе visual basic, библиотеками, отслеживая совместимость версий стандартных библиотек фирмы microsoft с версией созданной программы.",стандартных библиотек,sys,1
"отсутствие нужной библиотеки, а иногда и небольшого системного файла в системном каталоге неминуемо заблокирует работу программы.",файла,sys,1
"отсутствие нужной библиотеки, а иногда и небольшого системного файла в системном каталоге неминуемо заблокирует работу программы.",системного файла,sys,1
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",процессор,sys,1
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",текстовый процессор,sys,1
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",базой данных,sys,1
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",электронные таблицы,sys,1
полученный документ можно затем редактировать в диалоговом режиме с помощью текстового процессора word.,текстового процессора,sys,1
полученный документ можно затем редактировать в диалоговом режиме с помощью текстового процессора word.,процессора,sys,1
"из программы можно также автоматически передавать нужные данные в систему электронных таблиц excel, а также автоматически отправлять их по электронной почте, используя адреса, хранящиеся в базе данных access.",базе данных,sys,1
"из программы можно также автоматически передавать нужные данные в систему электронных таблиц excel, а также автоматически отправлять их по электронной почте, используя адреса, хранящиеся в базе данных access.",электронных таблиц,sys,1
"программные продукты, созданные в инструментальной среде vba для конкретного приложения, могут быть запущены только из этого приложения и функционируют только вместе с ним.",программные продукты,sys,1
"в системе visual basic язык basic выступает как компилирующий язык, создающий исполняемые файлы, в то время, как в системе vba используется связка ""транслятор-интерпретатор"".",файлы,sys,1
"в системе visual basic язык basic выступает как компилирующий язык, создающий исполняемые файлы, в то время, как в системе vba используется связка ""транслятор-интерпретатор"".",исполняемые файлы,sys,1
"в системе visual basic язык basic выступает как компилирующий язык, создающий исполняемые файлы, в то время, как в системе vba используется связка ""транслятор-интерпретатор"".",транслятор,sys,1
"в системе visual basic язык basic выступает как компилирующий язык, создающий исполняемые файлы, в то время, как в системе vba используется связка ""транслятор-интерпретатор"".",интерпретатор,sys,1
"транслятор переводит программу на языке basic в промежуточный код, который хранится как часть документа ms office.",транслятор,sys,1
"далее этот код выполняется интерпретатором, который запускается во время работы с соответствующим документом.",интерпретатором,sys,1
система vba представляет собой единую комплексную среду для поддержки разработки сложных прикладных программ и автоматизированных документов.,прикладных программ,sys,1
"с ее помощью сложные прикладные программы могут разрабатывать не только профессиональные программисты, но и квалифицированные пользователи приложений.",прикладные программы,sys,1
"visual c++ разработчикам, которым не хватает возможностей системы visual basic, предлагается система программирования visual c++ с базовым языком си++.",система программирования,sys,1
"visual c++ разработчикам, которым не хватает возможностей системы visual basic, предлагается система программирования visual c++ с базовым языком си++.",базовым языком,sys,1
"более того, возможность использовать язык си++ превращает эту систему программирования в инструмент, позволяющий создавать не только обычные офисные приложения, но и решать другие задачи.",систему программирования,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",систему программирования,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",отладчик,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",регистров центрального процессора,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",процессора,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",центрального процессора,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",языка ассемблера,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",регистров,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",отладке,sys,1
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",ассемблера,sys,1
"отладчик позволяет менять значения переменных, что иногда помогает программисту проверить гипотезу о причинах неправильного поведения программы, а впоследствии и исправить программу.",отладчик,sys,1
"как и для других программных продуктов компании microsoft, при работе в системе visual c++ доступна вся справочная информация, как о самой системе, так и о языке си++, библиотечных функциях и операционной системе windows.",библиотечных функциях,sys,1
"как и для других программных продуктов компании microsoft, при работе в системе visual c++ доступна вся справочная информация, как о самой системе, так и о языке си++, библиотечных функциях и операционной системе windows.",программных продуктов,sys,1
"как и для других программных продуктов компании microsoft, при работе в системе visual c++ доступна вся справочная информация, как о самой системе, так и о языке си++, библиотечных функциях и операционной системе windows.",операционной системе,sys,1
"в последние комплекты поставок программного обеспечения все эти системы уже не входят, однако, то широкое распространение, которое они нашли, доказывает их высокие потребительские качества.",программного обеспечения,sys,1
"это привело к созданию концепции java, в которой переносимость достигается трансляцией текста программы в промежуточный язык, называемый байт-кодом, который затем интерпретируется виртуальной машиной java (java virtual machine, jvm).",виртуальной машиной,sys,1
"это привело к созданию концепции java, в которой переносимость достигается трансляцией текста программы в промежуточный язык, называемый байт-кодом, который затем интерпретируется виртуальной машиной java (java virtual machine, jvm).",байт-кодом,sys,1
"это привело к созданию концепции java, в которой переносимость достигается трансляцией текста программы в промежуточный язык, называемый байт-кодом, который затем интерпретируется виртуальной машиной java (java virtual machine, jvm).",байт,sys,1
"это привело к созданию концепции java, в которой переносимость достигается трансляцией текста программы в промежуточный язык, называемый байт-кодом, который затем интерпретируется виртуальной машиной java (java virtual machine, jvm).",трансляцией,sys,1
"обработанная по этой технологии программа может быть исполнена на любой платформе, имеющей виртуальную машину jvm.",виртуальную машину,sys,1
"обработанная по этой технологии программа может быть исполнена на любой платформе, имеющей виртуальную машину jvm.",платформе,sys,1
"технология java позволяет иметь всего одну исполняемую версию программы, в то время, как использование обычных языков программирования требует создания исполняемых программ для каждого возможного варианта системного окружения.",системного окружения,sys,1
"технология java позволяет иметь всего одну исполняемую версию программы, в то время, как использование обычных языков программирования требует создания исполняемых программ для каждого возможного варианта системного окружения.",исполняемых программ,sys,1
"в последнее время компания microsoft активно продвигает новое поколение систем программирования, объединяемых общим наименованием .net framework (управляемая среда для разработки и исполнения приложений).",систем программирования,sys,1
эта среда состоит из общеязыковой исполняющей среды (common language runtime clr) и библиотеки классов.,исполняющей среды,sys,1
эта среда состоит из общеязыковой исполняющей среды (common language runtime clr) и библиотеки классов.,библиотеки классов,sys,1
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",платформы,sys,1
"как и в технологии java, трансляция с любого языка программирования сначала осуществляется в единый промежуточный язык cil.",трансляция,sys,1
"однако по спецификации cli программы на промежуточном языке не интерпретеруются виртуальной машиной, а транслируются непосредственно в процессе выполнения в машинный код (с помощью так называемых jit-компиляторов just-in-time compilers).",виртуальной машиной,sys,1
"однако по спецификации cli программы на промежуточном языке не интерпретеруются виртуальной машиной, а транслируются непосредственно в процессе выполнения в машинный код (с помощью так называемых jit-компиляторов just-in-time compilers).",машинный код,sys,1
"однако по спецификации cli программы на промежуточном языке не интерпретеруются виртуальной машиной, а транслируются непосредственно в процессе выполнения в машинный код (с помощью так называемых jit-компиляторов just-in-time compilers).",компиляторов,sys,1
"система, обеспечивающая трансляцию и выполнение cil- программ, называется виртуальной исполняющей системой (virtual execution system ves).",трансляцию,sys,1
"ни промежуточный язык, ни общая система типов не зависят от конкретной платформы (т.",платформы,sys,1
машинной архитектуры и операционной системы),операционной системы,sys,1
", поэтому виртуальная исполняющая система, в принципе, может быть реализована на любой вычислительной системе.",вычислительной системе,sys,1
реализация ves на платформе ms windows (также выполненная компанией microsoft) получила название общеязыковая исполняющая среда clr.,платформе,sys,1
реализация ves на платформе ms windows (также выполненная компанией microsoft) получила название общеязыковая исполняющая среда clr.,исполняющая среда,sys,1
"отметим, что внутреннее представление выбрано таким, чтобы низкоуровневый промежуточный язык (cil) охватывал все возможности исполняющей среды clr.",исполняющей среды,sys,1
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",исполняющую среду,sys,1
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",трансляторы,sys,1
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",трансляцию,sys,1
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",система программирования,sys,1
"в метаданные помещаются имя и версия сборки, сведения о локализации, данные о типах, включенных в сборку, список внешних файлов (сборок), от которых зависит данная сборка и т.",файлов,sys,1
"п. framework class library библиотека классов, которую должна использовать любая программа в рамках технологии.",библиотека классов,sys,1
platform invocation service (p/invoke) служба согласования платформ.,платформ,sys,1
"программы, исполняемые в .net, предельно изолированы друг от друга и от средств операционной системы.",операционной системы,sys,1
p/invoke реализует взаимодействие .net framework и операционной системы.,операционной системы,sys,1
"extended portable executable (pe) file format стандартный формат исполняемых файлов, используемый для хранения объектов технологии.",файлов,sys,1
"extended portable executable (pe) file format стандартный формат исполняемых файлов, используемый для хранения объектов технологии.",исполняемых файлов,sys,1
"он загружается обычным загрузчиком точно так же, как и любой другой исполняемый файл.",исполняемый файл,sys,1
"он загружается обычным загрузчиком точно так же, как и любой другой исполняемый файл.",загрузчиком,sys,1
"он загружается обычным загрузчиком точно так же, как и любой другой исполняемый файл.",файл,sys,1
"однако в его заголовке имеется бит, указывающий на то, что файл относится к технологии .net.",файл,sys,1
"обнаружив бит, загрузчик обращается к исполняющей среде clr, которая и производит обработку файла.",файла,sys,1
"обнаружив бит, загрузчик обращается к исполняющей среде clr, которая и производит обработку файла.",загрузчик,sys,1
"обнаружив бит, загрузчик обращается к исполняющей среде clr, которая и производит обработку файла.",исполняющей среде,sys,1
"включение в технологию .net именно исполняющей среды clr, а не виртуальной машины, работу которой надо интерпретировать специальными программами (аналогично jvm), существенным образом отличает технологию .net от технологии java.",исполняющей среды,sys,1
"включение в технологию .net именно исполняющей среды clr, а не виртуальной машины, работу которой надо интерпретировать специальными программами (аналогично jvm), существенным образом отличает технологию .net от технологии java.",виртуальной машины,sys,1
"в отличие от технологии, применяемой при работе с языком java, основная работа идет не с интерпретатором промежуточного языка, а с транслятором, преобразующим программу на промежуточном языке в машинные команды перед ее выполнением.",интерпретатором,sys,1
"в отличие от технологии, применяемой при работе с языком java, основная работа идет не с интерпретатором промежуточного языка, а с транслятором, преобразующим программу на промежуточном языке в машинные команды перед ее выполнением.",машинные команды,sys,1
"в отличие от технологии, применяемой при работе с языком java, основная работа идет не с интерпретатором промежуточного языка, а с транслятором, преобразующим программу на промежуточном языке в машинные команды перед ее выполнением.",транслятором,sys,1
"эта трансляция выполняется с помощью jit-компилятора, вызываемого автоматически в тот момент, когда управление передается в ту часть программы, которая представлена на промежуточном языке.",компилятора,sys,1
"эта трансляция выполняется с помощью jit-компилятора, вызываемого автоматически в тот момент, когда управление передается в ту часть программы, которая представлена на промежуточном языке.",трансляция,sys,1
компилятор преобразует cil по мере надобности и вставляет заглушки на место вызова методов объектов.,компилятор,sys,1
"при первом обращении к заглушке, управление передается jit-компилятору, который заменяет ее реальной программой.",компилятору,sys,1
"такого 117 рода обращения к компилятору производятся непосредственно из фрагментов программы, состоящих из обычных машинных команд, ранее сгенерированных компилятором, что повышает скорость исполнения программ.",компилятором,sys,1
"такого 117 рода обращения к компилятору производятся непосредственно из фрагментов программы, состоящих из обычных машинных команд, ранее сгенерированных компилятором, что повышает скорость исполнения программ.",машинных команд,sys,1
"такого 117 рода обращения к компилятору производятся непосредственно из фрагментов программы, состоящих из обычных машинных команд, ранее сгенерированных компилятором, что повышает скорость исполнения программ.",компилятору,sys,1
"таким же образом производится обработка программ, написанных на любых других языках программирования, входящих в состав системы программирования.",системы программирования,sys,1
в ходе компиляции программы cil она дополнительно подвергается верификации.,компиляции,sys,1
в ходе компиляции программы cil она дополнительно подвергается верификации.,компиляции программы,sys,1
в ходе компиляции программы cil она дополнительно подвергается верификации.,верификации,sys,1
верификация проверяет саму программу и метаданные в поисках выходов из надежного окружения.,верификация,sys,1
во время верификации программа проверяется на доступ к разрешенной памяти и вызов только правильно определенных методов.,верификации,sys,1
во время верификации программа проверяется на доступ к разрешенной памяти и вызов только правильно определенных методов.,верификации программа,sys,1
дополнительно верификация проверяет правильность генерации машинных команд.,генерации машинных команд,sys,1
дополнительно верификация проверяет правильность генерации машинных команд.,машинных команд,sys,1
дополнительно верификация проверяет правильность генерации машинных команд.,верификация,sys,1
системы программирования ос unix и linux с самого начала разработки системы unix она рассматривалась в качестве переносимой (мобильной) операционной системы.,системы программирования,sys,1
системы программирования ос unix и linux с самого начала разработки системы unix она рассматривалась в качестве переносимой (мобильной) операционной системы.,операционной системы,sys,1
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",командной строкой,sys,1
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",система программирования,sys,1
"он доказал свою эффективность, хотя в настоящее время для систем типа unix разработаны современные графические пользовательские интерфейсы.",пользовательские интерфейсы,sys,1
"он доказал свою эффективность, хотя в настоящее время для систем типа unix разработаны современные графические пользовательские интерфейсы.",интерфейсы,sys,1
"он доказал свою эффективность, хотя в настоящее время для систем типа unix разработаны современные графические пользовательские интерфейсы.",графические пользовательские интерфейсы,sys,1
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",системах программирования,sys,1
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",командной строки,sys,1
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",интерпретаторов,sys,1
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",интерпретаторами,sys,1
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",режиме командной строки,sys,1
командные интерпретаторы являются посредниками между пользователями и системными программами.,интерпретаторы,sys,1
командные интерпретаторы являются посредниками между пользователями и системными программами.,системными программами,sys,1
"для систем unix были разработаны многие варианты командных интерпретаторов, среди которых наибольшее распространение получили 4 варианта: c shell (csh), bourne shell (sh), korn shell (ksh) и bourne again shell (bash).",интерпретаторов,sys,1
"командные оболочки, за которыми работают командные интерпретаторы, позволяют не только выполнять отдельные команды операционной системы, но и формировать командные файлы, содержащие заранее сформированные последовательности команд.",файлы,sys,1
"командные оболочки, за которыми работают командные интерпретаторы, позволяют не только выполнять отдельные команды операционной системы, но и формировать командные файлы, содержащие заранее сформированные последовательности команд.",интерпретаторы,sys,1
"командные оболочки, за которыми работают командные интерпретаторы, позволяют не только выполнять отдельные команды операционной системы, но и формировать командные файлы, содержащие заранее сформированные последовательности команд.",операционной системы,sys,1
"командные оболочки, за которыми работают командные интерпретаторы, позволяют не только выполнять отдельные команды операционной системы, но и формировать командные файлы, содержащие заранее сформированные последовательности команд.",командные файлы,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",компиляторы,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",комплекс программ,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",системой программирования,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",компоновки программ,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",интерпретаторов,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",ассемблер,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",компоновщик,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",компоновки,sys,1
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",библиотеками классов,sys,1
"в составе системы unux также имеются: редактор текстов vi (visual editor визуальный редактор), представляющий собой диалоговый редактор, позволяющий в интерактивном режиме вводить тексты или приказы на редактирование.",редактор текстов,sys,1
"компиляторы с различных языков программирования, от языка ассемблера до объектно-ориентированных языков си++ и java.",ассемблера,sys,1
"компиляторы с различных языков программирования, от языка ассемблера до объектно-ориентированных языков си++ и java.",языка ассемблера,sys,1
"компиляторы с различных языков программирования, от языка ассемблера до объектно-ориентированных языков си++ и java.",объектно-ориентированных языков,sys,1
"компиляторы с различных языков программирования, от языка ассемблера до объектно-ориентированных языков си++ и java.",компиляторы,sys,1
"компоновщик ld, представляющий собой классический редактор связей, позволяющий объединять оттранслированные модули и компоненты библиотек в единую программу, готовую к исполнению.",компоновщик,sys,1
"компоновщик ld, представляющий собой классический редактор связей, позволяющий объединять оттранслированные модули и компоненты библиотек в единую программу, готовую к исполнению.",модули,sys,1
"компоновщик ld, представляющий собой классический редактор связей, позволяющий объединять оттранслированные модули и компоненты библиотек в единую программу, готовую к исполнению.",редактор связей,sys,1
"обычно компоновщик в системе программирования ос unix вызывается автоматически, заданием нужных параметров при обращении к компилятору, но может вызываться и явными командами операционной системы.",компоновщик,sys,1
"обычно компоновщик в системе программирования ос unix вызывается автоматически, заданием нужных параметров при обращении к компилятору, но может вызываться и явными командами операционной системы.",компилятору,sys,1
"обычно компоновщик в системе программирования ос unix вызывается автоматически, заданием нужных параметров при обращении к компилятору, но может вызываться и явными командами операционной системы.",операционной системы,sys,1
"обычно компоновщик в системе программирования ос unix вызывается автоматически, заданием нужных параметров при обращении к компилятору, но может вызываться и явными командами операционной системы.",системе программирования,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",компиляции,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",файлов,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",программный комплекс,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",компиляцией программ,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",компиляцией,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",программных комплексов,sys,1
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",компоновки,sys,1
"система управления версиями исходных текстов (source code control system, sccs), позволяющая отслеживать изменения, осуществляемые в текстах программ, работать с последними и более ранними версиями программ, восстанавливать предыдущие версии файлов и блокировать одновременное внесение исправлений в тексты со стороны нескольких пользователей.",файлов,sys,1
"профилировщик prof, позволяющий определять, как программа распределяет время при исполнении, например, определять, на вызов каких функций затрачивается особенно много времени.",профилировщик,sys,1
"результатом работы профилировщика является упорядоченная таблица, в которой собрана информация о совокупном времени работы каждой процедуры, числе вызовов этой процедуры и среднем времени работы процедуры в расчете на 1 вызов.",профилировщика,sys,1
"символический отладчик dbx, позволяющий выполнять и отлаживать программы в пошаговом режиме, выполнять редактирование текстов программ непосредственно во время их отладки, получать доступ к значениям переменных и выполнять трассировку программ.",отладки,sys,1
"символический отладчик dbx, позволяющий выполнять и отлаживать программы в пошаговом режиме, выполнять редактирование текстов программ непосредственно во время их отладки, получать доступ к значениям переменных и выполнять трассировку программ.",отладчик,sys,1
"символический отладчик dbx, позволяющий выполнять и отлаживать программы в пошаговом режиме, выполнять редактирование текстов программ непосредственно во время их отладки, получать доступ к значениям переменных и выполнять трассировку программ.",трассировку программ,sys,1
"информация о ходе выполнения программы и состоянии переменных выдается в терминах исходного языка программирования, что значительно упрощает процесс отладки программ.",отладки,sys,1
"информация о ходе выполнения программы и состоянии переменных выдается в терминах исходного языка программирования, что значительно упрощает процесс отладки программ.",отладки программ,sys,1
отладчик dbx это стандартный отладчик ос unix.,отладчик,sys,1
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",отладчикам,sys,1
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",систем программирования,sys,1
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",операционной системы,sys,1
программа lex генератор лексических анализаторов.,анализаторов,sys,1
программа lex генератор лексических анализаторов.,лексических анализаторов,sys,1
программа построения синтаксических анализаторов yacc.,синтаксических анализаторов,sys,1
программа построения синтаксических анализаторов yacc.,анализаторов,sys,1
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",системных программ,sys,1
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",системных программ,sys,1
"проект gnu автором общего проекта мобильной (переносимой) операционной системы gnu (рекурсивный акроним gnu's not unix) и входящего в нее многоязыкового компилятора gcc является ричард столмен, сотрудник лаборатории искусственного интеллекта массачусетского технологического института, инициировавший работу в 1983 году.",компилятора,sys,1
"проект gnu автором общего проекта мобильной (переносимой) операционной системы gnu (рекурсивный акроним gnu's not unix) и входящего в нее многоязыкового компилятора gcc является ричард столмен, сотрудник лаборатории искусственного интеллекта массачусетского технологического института, инициировавший работу в 1983 году.",операционной системы,sys,1
"кроме технических целей ричард столмен, недовольный ничем не ограниченной коммерциализацией системных программ и самого процесса системного программирования, ставил перед собой цель создать бесплатно распространяемую систему программирования, которая могла бы оказаться серьезным конкурентом дорогостоящим коммерческим системам.",систему программирования,sys,1
"кроме технических целей ричард столмен, недовольный ничем не ограниченной коммерциализацией системных программ и самого процесса системного программирования, ставил перед собой цель создать бесплатно распространяемую систему программирования, которая могла бы оказаться серьезным конкурентом дорогостоящим коммерческим системам.",системных программ,sys,1
"кроме технических целей ричард столмен, недовольный ничем не ограниченной коммерциализацией системных программ и самого процесса системного программирования, ставил перед собой цель создать бесплатно распространяемую систему программирования, которая могла бы оказаться серьезным конкурентом дорогостоящим коммерческим системам.",системного программирования,sys,1
"система gnu способна исполнять программы unix, но не совпадает с ней полностью.",исполнять программы,sys,1
"в эту систему авторами были внесены 120 усовершенствования, которые они считали удобными, основываясь на собственном опыте работы с другими операционными системами.",операционными системами,sys,1
"в частности, были введены длинные имена файлов, поддержка версий файла, отказоустойчивая файловая система, поддержка дисплея, независимая от терминала.",файлов,sys,1
"в частности, были введены длинные имена файлов, поддержка версий файла, отказоустойчивая файловая система, поддержка дисплея, независимая от терминала.",файла,sys,1
"в частности, были введены длинные имена файлов, поддержка версий файла, отказоустойчивая файловая система, поддержка дисплея, независимая от терминала.",файловая система,sys,1
"ядро системы имеет наименование gnu hurd (коллекция серверов или стадо гну , herd of gnus ).",серверов,sys,1
"это ядро основано на использовании многопотоковых серверов, обменивающихся сообщениями и работающих поверх микроядра mach, разработанного в университете карнеги-меллон (carnegie mellon university) и позднее в университете штата юта (university of utah).",серверов,sys,1
после появления в 1991 г. системы linux его ядро в течение 1992 г. было объединено с незавершенной системой gnu в полноценную операционную систему.,операционную систему,sys,1
система программирования gnu практически полностью повторяет систему программирования unix.,систему программирования,sys,1
система программирования gnu практически полностью повторяет систему программирования unix.,система программирования,sys,1
"она содержит весь комплекс программ, обеспечивающих жизненный цикл программ, имеющихся в системе unix: редактор, командный интерпретатор bash.",интерпретатор,sys,1
"она содержит весь комплекс программ, обеспечивающих жизненный цикл программ, имеющихся в системе unix: редактор, командный интерпретатор bash.",комплекс программ,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",библиотекой классов,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",системой программирования,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",ассемблер,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",компоновщик,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",ассемблера,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",компилятора,sys,1
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",компилятор,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",файлов,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",синтаксических анализаторов,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",лексических анализаторов,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",отладчик,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",анализаторов,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",кодирования,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",электронные таблицы,sys,1
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",анализаторы,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",пользовательского интерфейса,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",пользовательского оконного интерфейса,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",оконного интерфейса,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",библиотека классов,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",интерфейса,sys,1
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",библиотека компонентов,sys,1
"в первую очередь это влияние проявляется в том, что практически все версии unix включили в свой состав переносимый многоязыковый компилятор gcc.",компилятор,sys,1
проект этого компилятора возник на основе использования языка rtl (register transfer language) в качестве языка внутреннего представления программ.,компилятора,sys,1
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",интерпретации,sys,1
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",транслятором,sys,1
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",машинных команд,sys,1
машина при этом описывалась в терминах передачи элементов данных между регистрами и памятью.,регистрами,sys,1
"122 основной задачей, которую ставили перед собой авторы компилятора gcc, была задача создания хорошего, быстрого компилятора для 32-х разрядных вычислительных машин, адресующих оперативную память с точностью до отдельного байта и имеющих несколько регистров общего назначения.",вычислительных машин,sys,1
"122 основной задачей, которую ставили перед собой авторы компилятора gcc, была задача создания хорошего, быстрого компилятора для 32-х разрядных вычислительных машин, адресующих оперативную память с точностью до отдельного байта и имеющих несколько регистров общего назначения.",байта,sys,1
"122 основной задачей, которую ставили перед собой авторы компилятора gcc, была задача создания хорошего, быстрого компилятора для 32-х разрядных вычислительных машин, адресующих оперативную память с точностью до отдельного байта и имеющих несколько регистров общего назначения.",регистров,sys,1
"122 основной задачей, которую ставили перед собой авторы компилятора gcc, была задача создания хорошего, быстрого компилятора для 32-х разрядных вычислительных машин, адресующих оперативную память с точностью до отдельного байта и имеющих несколько регистров общего назначения.",оперативную память,sys,1
"122 основной задачей, которую ставили перед собой авторы компилятора gcc, была задача создания хорошего, быстрого компилятора для 32-х разрядных вычислительных машин, адресующих оперативную память с точностью до отдельного байта и имеющих несколько регистров общего назначения.",компилятора,sys,1
многоязыковость и многоплатформенность компилятора gcc позволили на практике свести проблему построения m n компиляторов с m языков для n вычислительных машин к значительно менее сложной проблеме построения m+n компиляторов.,компиляторов,sys,1
многоязыковость и многоплатформенность компилятора gcc позволили на практике свести проблему построения m n компиляторов с m языков для n вычислительных машин к значительно менее сложной проблеме построения m+n компиляторов.,вычислительных машин,sys,1
многоязыковость и многоплатформенность компилятора gcc позволили на практике свести проблему построения m n компиляторов с m языков для n вычислительных машин к значительно менее сложной проблеме построения m+n компиляторов.,компилятора,sys,1
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",компиляторов,sys,1
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",системе программирования,sys,1
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",вычислительной машине,sys,1
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",многоплатформенных компиляторов,sys,1
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",компилятор,sys,1
"достигается это примененным методом описания той вычислительной машины, для которой должна осуществляться трансляция.",вычислительной машины,sys,1
"достигается это примененным методом описания той вычислительной машины, для которой должна осуществляться трансляция.",трансляция,sys,1
"компилятор gcc получает основную информацию об объектной вычислительной машине из ее описаний, выполненных в виде алгебраических формул каждой из машинных команд.",вычислительной машине,sys,1
"компилятор gcc получает основную информацию об объектной вычислительной машине из ее описаний, выполненных в виде алгебраических формул каждой из машинных команд.",машинных команд,sys,1
"компилятор gcc получает основную информацию об объектной вычислительной машине из ее описаний, выполненных в виде алгебраических формул каждой из машинных команд.",компилятор,sys,1
"в тех случаях, когда такую формулу записать слишком сложно, в свободно распространяемые тексты программ компилятора можно добавить новый параметр, описывающий дополнительный режим трансляции.",трансляции,sys,1
"в тех случаях, когда такую формулу записать слишком сложно, в свободно распространяемые тексты программ компилятора можно добавить новый параметр, описывающий дополнительный режим трансляции.",компилятора,sys,1
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",пакетами прикладных программ,sys,1
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",трансляции,sys,1
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",прикладных программ,sys,1
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",операционном окружении,sys,1
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",транслятор,sys,1
"использование компилятора gcc не требует от пользователей полного отказа от работы с другими компиляторами, а также с библиотеками, созданными другими компиляторами.",компиляторами,sys,1
"использование компилятора gcc не требует от пользователей полного отказа от работы с другими компиляторами, а также с библиотеками, созданными другими компиляторами.",компилятора,sys,1
"этот компилятор имеет четкий, хорошо описанный интерфейс и достаточное количество средств управления режимами работы.",интерфейс,sys,1
"этот компилятор имеет четкий, хорошо описанный интерфейс и достаточное количество средств управления режимами работы.",компилятор,sys,1
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",транслятор,sys,1
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",ассемблеров,sys,1
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",систем программирования,sys,1
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",компиляторов,sys,1
системы программирования компании ibm 4.6.1.,системы программирования,sys,1
"комплексная система программирования rational software примером комплексной системы программирования служит система rational software corporation, принадлежащая в настоящее 123 время компании ibm.",система программирования,sys,1
"комплексная система программирования rational software примером комплексной системы программирования служит система rational software corporation, принадлежащая в настоящее 123 время компании ibm.",системы программирования,sys,1
"в состав этой системы входят совокупность приемов и решений rup (rational unified process), распространяемая не только в виде пособий и книг, но и в виде гипертекста с помощью страниц интернета; программные средства rational suite, состоящие из средств управления требованиями (rational requisite pro); средств визуального проектирования (rational rose), основанные на формальном языке моделирования uml (unified modeling language), ставшем всеобщим стандартом описания сложных систем (например, систем рабочих потоков workflow).",программные средства,sys,1
"в состав этой системы входят совокупность приемов и решений rup (rational unified process), распространяемая не только в виде пособий и книг, но и в виде гипертекста с помощью страниц интернета; программные средства rational suite, состоящие из средств управления требованиями (rational requisite pro); средств визуального проектирования (rational rose), основанные на формальном языке моделирования uml (unified modeling language), ставшем всеобщим стандартом описания сложных систем (например, систем рабочих потоков workflow).",формальном языке,sys,1
"генератор программ на си++ и java, работающий на основе выбранного каркаса приложения (rational apex); средства автоматизации тестирования rational team test (rtt), rational robot (часть rtt, используемая для автоматизации прогонов тестов), rational test factory (для автоматизации тестирования интерактивных задач) и rational pure coverage (для контроля полноты покрытия тестами).",тестирования,sys,1
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,программного продукта,sys,1
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,системе программирования,sys,1
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,профилировщик,sys,1
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,цикла программного продукта,sys,1
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,модель жизненного цикла,sys,1
"работа по реализации системы определяется целями проектируемого процесса, которые формулируются в виде сценариев взаимодействия строящейся программной системы с другими системами или пользователями.",программной системы,sys,1
"при разработке программного продукта выделяются 4 основные фазы, которые могут повторяться циклически необходимое число раз.",программного продукта,sys,1
"124 фаза проектирования (elaboration), которая состоит в разработке структуры программного продукта, решающего поставленные задачи.",программного продукта,sys,1
на этой же фазе проводится тестирование системы.,тестирование,sys,1
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",модули,sys,1
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",объектные модули,sys,1
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",базы данных,sys,1
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",программного обеспечения,sys,1
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",среда разработки,sys,1
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",среду разработки,sys,1
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",разработки программного обеспечения,sys,1
"эта система, сопровождаемая компанией ibm, работает с различными операционными системами (windows, unix/linux) и различными языками программирования (java, си, си++, кобол, uml).",операционными системами,sys,1
"свойства расширяемости и настраиваемости позволяют ее пользователям самим создавать подобия систем программирования, подключая отдельно распространяемые модули или создавая такие модули своими силами.",модули,sys,1
"свойства расширяемости и настраиваемости позволяют ее пользователям самим создавать подобия систем программирования, подключая отдельно распространяемые модули или создавая такие модули своими силами.",систем программирования,sys,1
среда разработки eclipse (то есть основное окно eclipse в целом) называется рабочим столом.,рабочим столом,sys,1
среда разработки eclipse (то есть основное окно eclipse в целом) называется рабочим столом.,среда разработки,sys,1
"кроме видов рабочий стол содержит одну специальную панель редактор, в котором можно редактировать документы различных типов, например, исходный текст программы.",рабочий стол,sys,1
"при выполнении различных задач, таких как программирование, отладка или синхронизация изменений текстов программ с централизованным репозиторием, можно устанавливать расположение окон, удобное для конкретной задачи.",отладка,sys,1
"перспектива может иметь много видов, но только один редактор, являющийся центральным объектом рабочего стола.",рабочего стола,sys,1
"если в 125 редакторе открыт файл, остальные виды отображают различные аспекты этого файла.",файла,sys,1
"если в 125 редакторе открыт файл, остальные виды отображают различные аспекты этого файла.",файл,sys,1
"если это файл с текстом программы, один вид покажет физическое месторасположения в файле и иерархии пакета, а другой вид покажет методы класса и атрибуты.",файле,sys,1
"если это файл с текстом программы, один вид покажет физическое месторасположения в файле и иерархии пакета, а другой вид покажет методы класса и атрибуты.",файл,sys,1
при открытии нескольких файлов эти виды будут меняться при переходе на различные файлы в редакторе.,файлов,sys,1
при открытии нескольких файлов эти виды будут меняться при переходе на различные файлы в редакторе.,файлы,sys,1
"перспективы являются простым и естественным способом работы, поскольку удаляют из интерфейса все инструментальные кнопки, меню и виды, которые не относятся к текущей задаче.",интерфейса,sys,1
"при вводе ведется немедленный синтаксический анализ и выдаются подсказки по продолжению ввода (например, при вводе имени класса выдается список методов класса, из которого программист может выбрать нужный).",синтаксический анализ,sys,1
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",интерфейсов,sys,1
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",рефакторинг текстов программ,sys,1
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",рефакторинг,sys,1
первая перспектива служит для выбора репозиториев и модулей для подсоединения и анализа содержащихся в них файлов.,файлов,sys,1
первая перспектива служит для выбора репозиториев и модулей для подсоединения и анализа содержащихся в них файлов.,модулей,sys,1
первая перспектива служит для выбора репозиториев и модулей для подсоединения и анализа содержащихся в них файлов.,репозиториев,sys,1
"это привлекает к ее развитию большое сообщество разработчиков, проектирующих для этой системы подключаемые модули, как свободно распространяемые, так и коммерческие.",модули,sys,1
"системы программирования эвм zseries компания ibm выпускает программное обеспечение, в том числе и системы программирования, не только для персональных эвм, но и для больших эвм, предназначенных для одновременной работы многих самых разнообразных пользователей.",системы программирования,sys,1
"системы программирования эвм zseries компания ibm выпускает программное обеспечение, в том числе и системы программирования, не только для персональных эвм, но и для больших эвм, предназначенных для одновременной работы многих самых разнообразных пользователей.",программное обеспечение,sys,1
"в настоящее время аппаратная платформа ibm носит наименование zseries, она является развитием выпускающейся на протяжении нескольких десятилетий линии эвм s/360, s/370 и s/390.",платформа,sys,1
"на платформе zseries могут работать различные операционные системы, наиболее распространенными среди которых являются z/vm, z/os и linux (z/os unix).",платформе,sys,1
"на платформе zseries могут работать различные операционные системы, наиболее распространенными среди которых являются z/vm, z/os и linux (z/os unix).",операционные системы,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",система программирования,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",операционных систем,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",операционная система,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",платформы,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",системной платформы,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",виртуальных машин,sys,1
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",операционные системы,sys,1
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",прикладное программное обеспечение,sys,1
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",язык ассемблера,sys,1
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",системы программирования,sys,1
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",программное обеспечение,sys,1
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",ассемблера,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",компиляторов,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",редакторы связей,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",библиотеки программ,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",текстовый редактор,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",программного обеспечения,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",загрузки,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",загрузки программ,sys,1
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",разработки программного обеспечения,sys,1
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",программного обеспечения,sys,1
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",системного программного обеспечения,sys,1
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",системы программирования,sys,1
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",программных продуктов,sys,1
"так, например, в систему входят сразу два редактора связей: стандартный linkage editor и усовершенствованный program management binder.",редактора связей,sys,1
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",модулей,sys,1
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",объектных модулей,sys,1
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",редактор связей,sys,1
"усовершенствованный компоновщик binder обеспечивает возможность связывания объектных модулей в модули нового формата (64-разрядный режим), называемые программными объектами.",модули,sys,1
"усовершенствованный компоновщик binder обеспечивает возможность связывания объектных модулей в модули нового формата (64-разрядный режим), называемые программными объектами.",объектных модулей,sys,1
"усовершенствованный компоновщик binder обеспечивает возможность связывания объектных модулей в модули нового формата (64-разрядный режим), называемые программными объектами.",связывания объектных модулей,sys,1
"усовершенствованный компоновщик binder обеспечивает возможность связывания объектных модулей в модули нового формата (64-разрядный режим), называемые программными объектами.",компоновщик,sys,1
"усовершенствованный компоновщик binder обеспечивает возможность связывания объектных модулей в модули нового формата (64-разрядный режим), называемые программными объектами.",модулей,sys,1
"базовый компонент z/os, называемый языковым окружением le, поддерживает единую универсальную среду выполнения для приложений, созданных на языках программирования высокого уровня cи, cи++, кобол, pl/1 и фортран.",языковым окружением,sys,1
"библиотеки языковой среды включают наиболее существенные и часто используемые компоненты времени выполнения, такие как формирование сообщений, обработка событий, управление памятью, поддержка функций даты и времени и т.",управление памятью,sys,1
"кроме того, языковое окружение упрощает взаимодействие между приложениями, написанными на разных языках или для разных операционных сред, за счет специальных интерфейсных средств.",языковое окружение,sys,1
"средства языковой среды le через соответствующие макровызовы доступны и тем приложениям, которые написаны на языке ассемблера.",ассемблера,sys,1
"средства языковой среды le через соответствующие макровызовы доступны и тем приложениям, которые написаны на языке ассемблера.",языке ассемблера,sys,1
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",модули,sys,1
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",распределение памяти,sys,1
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",динамическое распределение,sys,1
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",интерфейса,sys,1
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",модулей,sys,1
"создаваемые с использованием универсальных модулей языковой среды приложения могут выполняться в различных операционных средах, включая как внутрисистемные (например, unix shell), так и среды промежуточного слоя (db2, cics).",модулей,sys,1
"все компоненты, входящие в состав системных библиотек le, делятся на две группы: резидентные (статически загружаемые) и динамические.",системных библиотек,sys,1
резидентные программы при редактировании связей включаются в объектный модуль приложения.,модуль,sys,1
резидентные программы при редактировании связей включаются в объектный модуль приложения.,объектный модуль,sys,1
резидентные программы при редактировании связей включаются в объектный модуль приложения.,редактировании связей,sys,1
"динамические программы не включаются в объектный модуль, они добавляются к программе уже при ее выполнении при непосредственном их вызове.",модуль,sys,1
"динамические программы не включаются в объектный модуль, они добавляются к программе уже при ее выполнении при непосредственном их вызове.",объектный модуль,sys,1
"128 огромное внимание в описываемой системе программирования уделяется подготовке программ для использования в пакетном режиме традиционном способе разработки программ, применяемом программистами для эвм, выпускавшимися компанией ibm, а также многими ее последователями в течение десятилетий.",системе программирования,sys,1
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",компиляции,sys,1
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",редактирования связей,sys,1
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",системной библиотеке,sys,1
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",операционных систем,sys,1
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",командных языков,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",файлов,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",системе программирования,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",командных файлов,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",компиляторами,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",редакторами связей,sys,1
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",отладчиками,sys,1
"разработка распределенных программ особую важность приобретают системы программирования, когда возникает необходимость использования их для создания распределенных программ.",системы программирования,sys,1
"распределенная система это набор независимых компьютеров, представляющихся их пользователям единой объединенной системой.",распределенная система,sys,1
"тем самым, во-первых, от пользователей скрыты различия между компьютерами и способы связи между ними (компьютеры распределенной системы автономны), во-вторых, пользователи и приложения единообразно работают в распределенных системах, независимо от того, где и когда происходит их взаимодействие.",распределенной системы,sys,1
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",программной системы,sys,1
"важными свойствами, связанными с открытостью программных систем являются их переносимость (способность приложений работать в составе разных распределенных систем) и способность к взаимодействию.",программных систем,sys,1
"технология разработки распределенного программного обеспечения тоже может обладать прозрачностью настолько, насколько она позволяет разработчику забыть о том, что создаваемая система распределена, и насколько легко в ходе разработки можно отделить аспекты построения системы, связанные с ее распределенностью, от решения задач прикладной области, в рамках которых системе предстоит работать.",программного обеспечения,sys,1
"распределенные системы обычно строятся с использованием служб, предоставляемых другими системами, и в то же время сами часто являются составными элементами или поставщиками служб для других систем, поэтому при разработке распределенных часто систем используется компонентный подход.",распределенные системы,sys,1
"130 5.1.системы клиент-сервер в распределенных системах важнейшими являются два понятия, для обозначения которых используются термины клиент и сервер .",сервер,sys,1
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",программная система,sys,1
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",сервером,sys,1
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",программный компонент,sys,1
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",серверу,sys,1
"первые распределенные системы состояли из клиентской и серверной частей, которые взаимодействовали друг с другом, посылая запросы и получая ответы на них.",распределенные системы,sys,1
"в настоящее время программные компоненты могут выступать как в роли клиента, так и в роли сервера.",сервера,sys,1
"в настоящее время программные компоненты могут выступать как в роли клиента, так и в роли сервера.",программные компоненты,sys,1
взаимодействие между клиентскими и серверными частями распределенной программной системы может быть синхронным и асинхронным.,программной системы,sys,1
"синхронным называется такое взаимодействие, при котором клиент, отослав запрос, блокируется и может продолжать работу только после получения ответа от сервера.",сервера,sys,1
"в рамках асинхронного или неблокирующего взаимодействия клиент после отправки запроса серверу может продолжать работу, даже если ответ на запрос еще не пришел.",серверу,sys,1
"однако и сервер не знает о том, что обрабатывал удаленный вызов.",сервер,sys,1
"на первом шаге разработки определяется интерфейс процедур, которые будут использоваться для удаленного вызова.",интерфейс,sys,1
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",интерфейсов,sys,1
"определение процедуры для удаленных вызовов компилируется компилятором idl в описание этой процедуры на языках программирования, на которых будут разрабатываться клиент и сервер (например, заголовочные файлы на языке си или си++), и два дополнительных компонента клиентский и серверный переходники.",компилятором,sys,1
"определение процедуры для удаленных вызовов компилируется компилятором idl в описание этой процедуры на языках программирования, на которых будут разрабатываться клиент и сервер (например, заголовочные файлы на языке си или си++), и два дополнительных компонента клиентский и серверный переходники.",файлы,sys,1
"определение процедуры для удаленных вызовов компилируется компилятором idl в описание этой процедуры на языках программирования, на которых будут разрабатываться клиент и сервер (например, заголовочные файлы на языке си или си++), и два дополнительных компонента клиентский и серверный переходники.",сервер,sys,1
"определяется физическое местонахождение в системе сервера, для которого предназначен данный вызов.",сервера,sys,1
это шаг называется привязкой к серверу.,серверу,sys,1
"полученное сообщение преобразуется в поток байтов (сериализация сообщения) и отсылается с помощью какого-либо протокола (транспортного или более высокого уровня) на машину, на которой помещен серверный компонент.",сериализация,sys,1
"полученное сообщение преобразуется в поток байтов (сериализация сообщения) и отсылается с помощью какого-либо протокола (транспортного или более высокого уровня) на машину, на которой помещен серверный компонент.",байтов,sys,1
"после получения от сервера ответа, он распаковывается из сетевого сообщения и возвращается клиенту в качестве результата работы процедуры.",сервера,sys,1
"серверный переходник располагается на той же машине, где находится компонент-сервер.",сервер,sys,1
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",программные системы,sys,1
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",сервер,sys,1
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",сервера,sys,1
"примером системы, позволявшей создавать прикладные системы типа клиент/сервер на вызовах удаленных процедур, является система dce (distributed computing environment), предложенная группой open software foundation (open group).",сервер,sys,1
"процесс подготовки программ на языке си к работе выглядит в системе dce так: клиентский программ процесс а клиента интерфейс вызова, заквлиисяещнитйскоит й переходни серверный процесс программ а сервера интерфейс вызова, засвеирсвящеринйыот й переходни окружение разработки idl тексты на idl заголовк и компилят ор idl 133 в состав dce входит много компонентов: языки, библиотеки, службы.",интерфейс,sys,1
"процесс подготовки программ на языке си к работе выглядит в системе dce так: клиентский программ процесс а клиента интерфейс вызова, заквлиисяещнитйскоит й переходни серверный процесс программ а сервера интерфейс вызова, засвеирсвящеринйыот й переходни окружение разработки idl тексты на idl заголовк и компилят ор idl 133 в состав dce входит много компонентов: языки, библиотеки, службы.",сервера,sys,1
созданные клиенты и серверы могут оказаться самыми разными.,серверы,sys,1
"в основе их всех язык idl, в котором функции описываются образом, похожим на прототипы функций в языке си, а в файлах имеются определения типов и констант для маршалинга параметров и демаршалинга результатов.",файлах,sys,1
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",файла,sys,1
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",интерфейсе,sys,1
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",сервера,sys,1
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",интерфейса,sys,1
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",системной программы,sys,1
"этот прототип редактируется, в него вносятся имена удаленных процедур и их параметров, затем выполняется компиляция с idl.",компиляция,sys,1
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",файла,sys,1
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",файл,sys,1
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",компиляция,sys,1
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",интерфейса,sys,1
"клиентский переходник содержит те процедуры, которые будет непосредственно вызывать клиентская программа.",клиентская программа,sys,1
"переходник также занимается распаковкой ответов, приходящих от сервера, и передачей значений, содержащихся в этих ответах, клиенту.",сервера,sys,1
"серверный переходник организован также, но по отношению к серверу.",серверу,sys,1
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,файл,sys,1
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,сервера,sys,1
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,модуль,sys,1
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,компоновка,sys,1
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,компилятор,sys,1
после их компиляции и компоновки (с библиотечными добавками) формируются обе исполняемые программы клиентская и серверная.,компиляции,sys,1
после их компиляции и компоновки (с библиотечными добавками) формируются обе исполняемые программы клиентская и серверная.,исполняемые программы,sys,1
после их компиляции и компоновки (с библиотечными добавками) формируются обе исполняемые программы клиентская и серверная.,компоновки,sys,1
"впоследствии, когда широко распространились принципы и приемы объектно-ориентированного программирования, система dce также была расширена и дополнена объектно-ориентированными языками.",объектно-ориентированного программирования,sys,1
"впоследствии, когда широко распространились принципы и приемы объектно-ориентированного программирования, система dce также была расширена и дополнена объектно-ориентированными языками.",объектно-ориентированными языками,sys,1
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",клиентская программа,sys,1
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",клиентской программы,sys,1
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",сервера,sys,1
"основную роль, как и во всех системах клиент/сервер, играет интерфейс объектов, формируемый при помощи некоторого языка idl, в данном случае объектно-ориентированного.",интерфейс,sys,1
"основную роль, как и во всех системах клиент/сервер, играет интерфейс объектов, формируемый при помощи некоторого языка idl, в данном случае объектно-ориентированного.",сервер,sys,1
клиент знает об используемых объектах только их интерфейсы.,интерфейсы,sys,1
"сервер предназначен для реализации объектов, он представляет собой программу, содержащую, кроме всего прочего, еще один или несколько объектов, построенных в соответствии с моделью сом.",сервер,sys,1
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",интерфейсы,sys,1
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",интерфейсам,sys,1
их реализации позволяют скрытым от пользователей образом организовать маршалинг и сериализацию параметров и возвращаемых значений методов.,маршалинг,sys,1
"как и при использовании ""классического"" удаленного вызова процедуры, при удаленном обращении к методу не только клиент не знает о том, что взаимодействует с удаленным сервером, но и сервер не знает, что обращение к нему осуществлено со стороны.",сервером,sys,1
"как и при использовании ""классического"" удаленного вызова процедуры, при удаленном обращении к методу не только клиент не знает о том, что взаимодействует с удаленным сервером, но и сервер не знает, что обращение к нему осуществлено со стороны.",сервер,sys,1
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",сервером,sys,1
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",сервер,sys,1
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",сервера,sys,1
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",интерфейса,sys,1
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",динамических библиотек,sys,1
"на одной машине в рамках разных процессов, при этом между клиентом и сервером возникают два промежуточных звена, а схема взаимодействия становится похожей на сокращенную схему удаленного обращения к методу (с переходниками, маршалингом и демаршалингом, но без выхода в сеть).",сервером,sys,1
"на различных (вообще говоря, несовместимых друг с другом аппаратно и имеющих разные операционные системы) компьютерах в рамках информационной сети (технология dcom), использующих модель удаленного обращения к методу полностью, включая сериализацию и обработку сообщений.",операционные системы,sys,1
система сом не является системой программирования в классическом значении этого термина.,системой программирования,sys,1
"это, скорее, система библиотек компонентов и правил их использования.",библиотек компонентов,sys,1
"однако система com содержит все элементы, необходимые для построения распределенной системы, в частности, компонентную модель, библиотеки классов, которые могут быть импортированы для анализа структуры серверов сом, универсальный протокол обмена между клиентами и серверами и другие.",библиотеки классов,sys,1
"однако система com содержит все элементы, необходимые для построения распределенной системы, в частности, компонентную модель, библиотеки классов, которые могут быть импортированы для анализа структуры серверов сом, универсальный протокол обмена между клиентами и серверами и другие.",серверов,sys,1
"однако система com содержит все элементы, необходимые для построения распределенной системы, в частности, компонентную модель, библиотеки классов, которые могут быть импортированы для анализа структуры серверов сом, универсальный протокол обмена между клиентами и серверами и другие.",распределенной системы,sys,1
"основной недостаток технологии com, который и привел к отказу от нее, это серьезные ограничения в организации взаимодействия между разными платформами, которые постоянно возникают в глобальных сетях.",платформами,sys,1
"в целом, технологию com/dcom обычно используют для построения небольших распределенных систем, имеющих не очень большое число узлов.",распределенных систем,sys,1
"брокеры объектов corba более адекватно соответствующим принципам построения распределенных систем, чем системы ""клиент-сервер"", надо признать системы не двухуровневые, а имеющие, по крайней мере, еще один ""промежуточный"" уровень, позволяющий разделить решаемые задачи на ""клиентские"" и ""серверные"" части.",сервер,sys,1
"в двухуровневых системах клиентские части чаще всего связаны с отображением 136 данных в виде, адекватно соответствующем конкретной прикладной области, назначение серверных частей выполнять основные прикладные программы и программы системной поддержки.",прикладные программы,sys,1
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",сервер,sys,1
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",сервера,sys,1
"их появление заставило разработчиков предпринять меры по интеграции серверов, а для размещения программ, ответственных за эту интеграцию, наилучшим образом подходил промежуточный уровень трехуровневых систем.",серверов,sys,1
"если системы ""клиент-сервер"" привели к стандартизации интерфейсов прикладного слоя, то их развитие позволило стандартизовать интерфейсы слоя управления ресурсами, а это привело к возможности интеграции в рамках одной системы самых разнородных информационных ресурсов.",интерфейсов,sys,1
"если системы ""клиент-сервер"" привели к стандартизации интерфейсов прикладного слоя, то их развитие позволило стандартизовать интерфейсы слоя управления ресурсами, а это привело к возможности интеграции в рамках одной системы самых разнородных информационных ресурсов.",интерфейсы,sys,1
"если системы ""клиент-сервер"" привели к стандартизации интерфейсов прикладного слоя, то их развитие позволило стандартизовать интерфейсы слоя управления ресурсами, а это привело к возможности интеграции в рамках одной системы самых разнородных информационных ресурсов.",сервер,sys,1
возникли даже попытки стандартизовать глобальные свойства и интерфейсы между разными системными платформами на основе объектно- ориентированного подхода.,системными платформами,sys,1
возникли даже попытки стандартизовать глобальные свойства и интерфейсы между разными системными платформами на основе объектно- ориентированного подхода.,интерфейсы,sys,1
возникли даже попытки стандартизовать глобальные свойства и интерфейсы между разными системными платформами на основе объектно- ориентированного подхода.,платформами,sys,1
"брокером объектов называют распределенные системы программного обеспечения, основанные на использовании понятия распределенного объекта и модели удаленного обращения к методам этого объекта, являющейся объектно-ориентированным расширением модели удаленного вызова процедуры.",программного обеспечения,sys,1
"брокером объектов называют распределенные системы программного обеспечения, основанные на использовании понятия распределенного объекта и модели удаленного обращения к методам этого объекта, являющейся объектно-ориентированным расширением модели удаленного вызова процедуры.",распределенные системы,sys,1
все эти стандарты описывают только интерфейсы и не содержат никакой реализации.,интерфейсы,sys,1
"набор служб, известный под этим собирательным именем, доступен с помощью стандартизованного прикладного программного интерфейса.",прикладного программного интерфейса,sys,1
"набор служб, известный под этим собирательным именем, доступен с помощью стандартизованного прикладного программного интерфейса.",программного интерфейса,sys,1
"набор служб, известный под этим собирательным именем, доступен с помощью стандартизованного прикладного программного интерфейса.",интерфейса,sys,1
"чтобы к объекту можно было обратиться через брокер объектов, этот объект должен сначала объявить свой интерфейс, из чего клиенты узнают о методах, которые он предоставляет.",интерфейс,sys,1
интерфейсы описываются на языке описания интерфейсов idl (стандарт corba предлагает свой собственный вариант такого языка).,интерфейсов,sys,1
интерфейсы описываются на языке описания интерфейсов idl (стандарт corba предлагает свой собственный вариант такого языка).,интерфейсы,sys,1
спецификации транслируются в скелетоны на стороне сервера и в переходники на стороне клиента.,сервера,sys,1
"в дополнение к описанию методов, в отличие от систем на базе удаленного вызова процедур, язык idl спецификации corba поддерживает множество объектно-ориентированных концепций, например, наследование и полиморфизм.",полиморфизм,sys,1
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",интерфейс,sys,1
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",репозиторий,sys,1
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",интерфейсов,sys,1
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",компилятору,sys,1
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",компилятор,sys,1
"с другой стороны скелетон защищает от проблем распределенности сервер, поэтому сервер может разрабатываться так, как если бы вызовы к нему поступали из локального окружения.",сервер,sys,1
"как заместитель, так и скелетон могут быть написаны на любом из тех языков, которые поддерживаются компилятором с языка idl corba, на которые текст idl может быть оттранслирован.",компилятором,sys,1
"например, спецификация corba 3 поддерживает трансляцию с idl на си, си++, java, smalltalk, аду, кобол, лисп, pl/1, python и idlscript.",трансляцию,sys,1
"из-за различных способов употребления и различных способов реализации ссылок на объекты в языке си++, эти ссылки при трансляции отображаются в два типа си++.",трансляции,sys,1
"современные версии спецификации corba допускают и обратные отображения: например, в стандарте corba 3 прямо предусмотрено проведение отображения записи интерфейсов на языке java в записи интерфейсов на idl.",интерфейсов,sys,1
"обработка программы на языке java обратным компилятором позволяет получить эквивалентный интерфейс, написанный на idl, имея который, можно построить (на языке java или другом языке программирования) программу клиента corba, имеющую доступ к нужному объекту.",интерфейс,sys,1
"обработка программы на языке java обратным компилятором позволяет получить эквивалентный интерфейс, написанный на idl, имея который, можно построить (на языке java или другом языке программирования) программу клиента corba, имеющую доступ к нужному объекту.",компилятором,sys,1
"чтобы иметь техническую возможность взаимодействовать с некоторым сервером, все, что требуется знать программисту, это idl- интерфейс этого сервера.",интерфейс,sys,1
"чтобы иметь техническую возможность взаимодействовать с некоторым сервером, все, что требуется знать программисту, это idl- интерфейс этого сервера.",сервером,sys,1
"чтобы иметь техническую возможность взаимодействовать с некоторым сервером, все, что требуется знать программисту, это idl- интерфейс этого сервера.",сервера,sys,1
"конечно, разработчик должен быть осведомлен о семантике интерфейсов методов и других ограничениях (например, о специфическом порядке, в котором следует вызывать методы для достижения той или иной цели).",интерфейсов,sys,1
"описанный механизм спецификации corba, призванный обеспечивать способность к взаимодействию, требует, чтобы клиент был статически привязан к интерфейсу: компилятор idl статически генерирует переходник, специфический для конкретного сервисного интерфейса.",компилятор,sys,1
"описанный механизм спецификации corba, призванный обеспечивать способность к взаимодействию, требует, чтобы клиент был статически привязан к интерфейсу: компилятор idl статически генерирует переходник, специфический для конкретного сервисного интерфейса.",интерфейса,sys,1
эта возможность базируется на двух компонентах: репозитории интерфейсов и интерфейсе динамического обращения.,интерфейсов,sys,1
"репозиторий интерфейсов хранит определения всех объектов, известных брокеру orb.",интерфейсов,sys,1
"репозиторий интерфейсов хранит определения всех объектов, известных брокеру orb.",репозиторий,sys,1
"приложения могут использовать репозиторий для поиска, редактирования или удаления idl-интерфейсов.",интерфейсов,sys,1
"приложения могут использовать репозиторий для поиска, редактирования или удаления idl-интерфейсов.",репозиторий,sys,1
"один брокер может иметь несколько репозиториев, и несколько брокеров могут иметь доступ к одному репозиторию.",репозиторию,sys,1
"один брокер может иметь несколько репозиториев, и несколько брокеров могут иметь доступ к одному репозиторию.",репозиториев,sys,1
"единственное требование, поставленное в спецификации corba, заключается в том, что каждый брокер должен иметь хотя бы один репозиторий.",репозиторий,sys,1
возможность динамического построения обращений к методам на основе динамически обнаруженных интерфейсов решает только часть проблемы динамического обращения к службе.,интерфейсов,sys,1
"используя справочную службу, клиенты могут искать не только объекты, реализующие тот или иной интерфейс, но также объекты, свойства которых имеют заданные значения (например, книги по си).",интерфейс,sys,1
"некоторые из этих служб являются обязательными и распространяются всегда, другие службы, несмотря 140 на стандартность интерфейса, имеют более ограниченное применение и распространяются по отдельным соглашениям с пользователями.",интерфейса,sys,1
"серверы приложений и сетевые службы как и описанные ранее технологии построения распределенных систем com и dcom, стандарт corba не ставит целью зафиксировать какое-либо представление о том, какими должны быть системы программирования для распределенных систем.",системы программирования,sys,1
"серверы приложений и сетевые службы как и описанные ранее технологии построения распределенных систем com и dcom, стандарт corba не ставит целью зафиксировать какое-либо представление о том, какими должны быть системы программирования для распределенных систем.",распределенных систем,sys,1
"серверы приложений и сетевые службы как и описанные ранее технологии построения распределенных систем com и dcom, стандарт corba не ставит целью зафиксировать какое-либо представление о том, какими должны быть системы программирования для распределенных систем.",серверы,sys,1
"в то же время эти стандарты направлены на решение задач, являющихся одновременно и задачами систем программирования обеспечение поддержки программных продуктов на протяжении их жизненного цикла.",систем программирования,sys,1
"в то же время эти стандарты направлены на решение задач, являющихся одновременно и задачами систем программирования обеспечение поддержки программных продуктов на протяжении их жизненного цикла.",программных продуктов,sys,1
"поддержка, которую подобные стандарты и системы оказывают прикладным программам, очень важна, причем по мере развития представлений о распределенных системах она становится все более необходимой.",прикладным программам,sys,1
"еще более такая поддержка необходима в тех случаях, когда строящаяся распределенная система предназначается для интеграции программных компонентов, взаимодействующих друг с другом посредством глобальных сетей и, прежде всего, глобальных сетей общего доступа, например, посредством сети интернет.",распределенная система,sys,1
"еще более такая поддержка необходима в тех случаях, когда строящаяся распределенная система предназначается для интеграции программных компонентов, взаимодействующих друг с другом посредством глобальных сетей и, прежде всего, глобальных сетей общего доступа, например, посредством сети интернет.",программных компонентов,sys,1
"в последнее время системная поддержка распределенных программ, взаимодействующих в интернете, приняла форму, которая называется сервером приложений, а само взаимодействие в этой сети стало осуществляться посредством использования сетевых служб.",сервером,sys,1
"наиболее широко распространены серверы приложений j2ee фирмы sun microsystems, .net фирмы microsoft, websphere компании ibm, weblogic фирмы bea systems, oas фирмы oracle corporation и многие другие, функционально близкие друг другу.",серверы,sys,1
"все ранее описанные виды системных платформ базируются чаще всего на синхронных методах обращений, когда клиентское приложение обращается к методу, предлагаемому (возможно, динамически определяемым) поставщиком службы.",платформ,sys,1
"все ранее описанные виды системных платформ базируются чаще всего на синхронных методах обращений, когда клиентское приложение обращается к методу, предлагаемому (возможно, динамически определяемым) поставщиком службы.",системных платформ,sys,1
"однако в последнее время все большее распространение приобретают подходы, поддерживающие более динамичные асинхронные формы взаимодействия, а также системы распределенного программного обеспечения, взаимодействующие на основе обмена сообщениями.",программного обеспечения,sys,1
"при асинхронном взаимодействии клиент, запрашивающий услугу у сервера, после выдачи запроса продолжает свою работу в той мере, в которой это возможно, не тратя время на ожидание результата.",сервера,sys,1
"при этом в силе остается использование принципов объектно-ориентированного программирования, на которых основываются и современные серверы приложений и сетевые службы.",объектно-ориентированного программирования,sys,1
"при этом в силе остается использование принципов объектно-ориентированного программирования, на которых основываются и современные серверы приложений и сетевые службы.",серверы,sys,1
"серверы приложений представляют собой крупные библиотеки компонентов, содержащих средства поддержки, как на этапе программирования (проектирования интерфейсов), так и на этапе выполнения.",интерфейсов,sys,1
"серверы приложений представляют собой крупные библиотеки компонентов, содержащих средства поддержки, как на этапе программирования (проектирования интерфейсов), так и на этапе выполнения.",серверы,sys,1
"серверы приложений представляют собой крупные библиотеки компонентов, содержащих средства поддержки, как на этапе программирования (проектирования интерфейсов), так и на этапе выполнения.",библиотеки компонентов,sys,1
"сетевые службы используются серверами приложений в 141 качестве окон во внешний мир, именно через них наиболее удобно осуществлять взаимодействие в глобальной сети.",серверами,sys,1
"в то же время сетевые службы сами по себе пригодны для использования и в более локальных системах, с их помощью могут даже взаимодействовать отдельные независимые компоненты серверов приложений.",серверов,sys,1
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",интерфейсов,sys,1
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",системы программирования,sys,1
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",компилятор,sys,1
"современные системы программирования для сетевых служб содержат одновременно и специальные средства генерации описания интерфейсов по исходным текстам на более традиционных языках программирования, например, по текстам на языке java.",интерфейсов,sys,1
"современные системы программирования для сетевых служб содержат одновременно и специальные средства генерации описания интерфейсов по исходным текстам на более традиционных языках программирования, например, по текстам на языке java.",системы программирования,sys,1
"по-существу, при взаимодействии сетевых служб и происходит обращение одной службы (выступающей в данном случае в роли клиента) к удаленной процедуре, реализованной внутри другой службы, являющейся в этот момент сервером.",сервером,sys,1
"однако сетевые службы выглядят гораздо более симметричными, чем клиенты и сообщения запрашивающий службу поставщик службы промежуточны й слой, основанный на асинхронных wsdl поставщика службы компилятор wsdl (клиентская компилятор wsdl (серверная сторона) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон генератор wsdl промежуточны й слой, основанный на асинхронных 142 серверы в более традиционных распределенных системах.",компилятор,sys,1
"однако сетевые службы выглядят гораздо более симметричными, чем клиенты и сообщения запрашивающий службу поставщик службы промежуточны й слой, основанный на асинхронных wsdl поставщика службы компилятор wsdl (клиентская компилятор wsdl (серверная сторона) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон генератор wsdl промежуточны й слой, основанный на асинхронных 142 серверы в более традиционных распределенных системах.",распределенных системах,sys,1
"однако сетевые службы выглядят гораздо более симметричными, чем клиенты и сообщения запрашивающий службу поставщик службы промежуточны й слой, основанный на асинхронных wsdl поставщика службы компилятор wsdl (клиентская компилятор wsdl (серверная сторона) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон генератор wsdl промежуточны й слой, основанный на асинхронных 142 серверы в более традиционных распределенных системах.",серверы,sys,1
"более того, возможно и такое взаимодействие сетевых служб, когда они одновременно являются клиентами одних служб и серверами запросов других служб.",серверами,sys,1
"сетевые службы имеют и другое важнейшее отличие от традиционных средств взаимодействия: для них удалось стандартизовать не только интерфейсы, как для процедур и методов классов, но и протоколы взаимодействия.",интерфейсы,sys,1
однако полезность серверов приложений не ограничивается только их способностью проводить взаимодействие в глобальной сети посредством хорошо стандартизованных сетевых служб.,серверов,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",интерфейс,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",синтаксического анализа,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",прикладной программный интерфейс,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",прикладной интерфейс,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",интерпретатор,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",программный интерфейс,sys,1
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",сервере,sys,1
"поддержка интеграции приложений обеспечивается специальными компонентами ejb, интерфейсом именования и каталогов jndi, службой сообщений и транзакционным интерфейсом.",интерфейсом,sys,1
поддержка доступа к ресурсам осуществляется компонентами обеспечения связи с базами данных jdbc и подключения архитектур j2ca.,базами данных,sys,1
"серверы приложений позволяют работать с самыми разнообразными клиентскими программами, что важно при работе именно в разнородной глобальной сети.",клиентскими программами,sys,1
"серверы приложений позволяют работать с самыми разнообразными клиентскими программами, что важно при работе именно в разнородной глобальной сети.",серверы,sys,1
"такими клиентскими программами могут быть: сетевые навигаторы, включая те, которые работают с простыми страницами html, и те, которые умеют загружать и выполнять аплеты.",клиентскими программами,sys,1
"клиенты сетевых служб, то есть приложения, взаимодействующие с сервером приложений через стандартные протоколы сетевых служб.",клиенты сетевых служб,sys,1
"клиенты сетевых служб, то есть приложения, взаимодействующие с сервером приложений через стандартные протоколы сетевых служб.",сервером,sys,1
средства автоматического грамматического разбора 6.1.,грамматического разбора,sys,1
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",формальных языках,sys,1
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",лексических анализаторов,sys,1
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",формальных грамматик,sys,1
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",регулярным выражениям,sys,1
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",анализаторов,sys,1
"наиболее успешными работы по автоматизации грамматического разбора были в области лексического анализа, так для описания лексики языков программирования оказалось достаточным использовать наиболее теоретически простые языки регулярные.",грамматического разбора,sys,1
"наиболее успешными работы по автоматизации грамматического разбора были в области лексического анализа, так для описания лексики языков программирования оказалось достаточным использовать наиболее теоретически простые языки регулярные.",лексического анализа,sys,1
"всякий регулярный язык может быть одним из трех способов: с помощью регулярной (праволинейной или леволинейной) грамматики, с помощью конечного автомата, с помощью регулярного множества (так же, как и с помощью обозначающих их регулярных выражений).",регулярный язык,sys,1
"всякий регулярный язык может быть одним из трех способов: с помощью регулярной (праволинейной или леволинейной) грамматики, с помощью конечного автомата, с помощью регулярного множества (так же, как и с помощью обозначающих их регулярных выражений).",регулярных выражений,sys,1
"всякий регулярный язык может быть одним из трех способов: с помощью регулярной (праволинейной или леволинейной) грамматики, с помощью конечного автомата, с помощью регулярного множества (так же, как и с помощью обозначающих их регулярных выражений).",регулярного множества,sys,1
"это не значит, что регулярные языки можно выражать только этими тремя способами, но именно эти три способа их задания полностью эквивалентны друг другу.",регулярные языки,sys,1
"существуют алгоритмы, которые позволяют любой регулярный язык, заданный каким-либо одним из этих трех способов, описать любым другим способом.",регулярный язык,sys,1
"это значит, что на основе любой регулярной грамматики можно построить регулярное выражение, определяющее тот же язык.",регулярное выражение,sys,1
"это значит, что на основе любой регулярной грамматики можно построить регулярное выражение, определяющее тот же язык.",регулярной грамматики,sys,1
регулярные множества для алфавита v определяются рекурсивно: 1.,регулярные множества,sys,1
пустое множество есть регулярное множество.,регулярное множество,sys,1
множество из одного пустого элемента { } есть регулярное множество.,регулярное множество,sys,1
"множество из одного элемента алфавита {a, a v} есть регулярное множество.",регулярное множество,sys,1
"если множества p и q произвольные регулярные множества, то их объединение p q, их конкатенация pq, итерация p и усеченная итерация p+ (p+ = pp ) есть регулярные множества.",регулярные множества,sys,1
других регулярных множеств не существует.,регулярных множеств,sys,1
"регулярные множества обозначаются с помощью регулярных выражений, которые рекурсивно вводятся следующим образом: 1.",регулярные множества,sys,1
"регулярные множества обозначаются с помощью регулярных выражений, которые рекурсивно вводятся следующим образом: 1.",регулярных выражений,sys,1
"если p и q регулярные выражения, обозначающие регулярные множества p и q, то p q, pq, p и p+ есть регулярные выражения, обозначающие регулярные множества p q, pq, p и p+.",регулярные множества,sys,1
"если p и q регулярные выражения, обозначающие регулярные множества p и q, то p q, pq, p и p+ есть регулярные выражения, обозначающие регулярные множества p q, pq, p и p+.",регулярные выражения,sys,1
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",регулярное множество,sys,1
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",регулярное выражение,sys,1
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",регулярных выражений,sys,1
регулярные выражения часто используются для записи грамматических правил лексического разбора языков программирования.,регулярные выражения,sys,1
"например, идентификаторы некоторого языка программирования, представляющие собой букву, за которой следует нуль или несколько букв или цифр, можно определить с помощью регулярного выражения таким образом: letter(letter digit) правила построения лексических единиц такого языка можно записать так: letter a b ... z a b ... z digit 0 1 2 ...",регулярного выражения,sys,1
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",анализаторов,sys,1
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",регулярные выражения,sys,1
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",анализатора,sys,1
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",лексических анализаторов,sys,1
"обработка ведется на основе концепции конечного автомата, диаграмма состояний которого описывается регулярными выражениями.",регулярными выражениями,sys,1
"первоначально эта программа была создана как компонент операционной системы unix, однако сейчас имеется множество ее вариантов, работающих в различных операционных системах, в том числе, в системах ms-dos и microsoft windows.",операционных системах,sys,1
"первоначально эта программа была создана как компонент операционной системы unix, однако сейчас имеется множество ее вариантов, работающих в различных операционных системах, в том числе, в системах ms-dos и microsoft windows.",операционной системы,sys,1
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",файл,sys,1
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",лексического анализатора,sys,1
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",регулярные выражения,sys,1
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",анализатора,sys,1
"эта программа обрабатывается компилятором lex, в результате чего получается текст на языке программирования си (в настоящее время существуют версии программы lex, создающие выходные тексты на других языках, например, си++, паскаль, java).",компилятором,sys,1
"эта программа содержит табличное представление диаграммы переходов, построенной по регулярным выражениям из файла lex.l.",файла,sys,1
"эта программа содержит табличное представление диаграммы переходов, построенной по регулярным выражениям из файла lex.l.",регулярным выражениям,sys,1
"в нее также включается стандартная программа, использующая созданную таблицу переходов для распознавания лексем.",лексем,sys,1
"действия, которые связаны с регулярными выражениями в файле lex.l, представляют собой фрагменты программы на языке си, копируемые из файла lex.l в файл lex.c.",файла,sys,1
"действия, которые связаны с регулярными выражениями в файле lex.l, представляют собой фрагменты программы на языке си, копируемые из файла lex.l в файл lex.c.",файле,sys,1
"действия, которые связаны с регулярными выражениями в файле lex.l, представляют собой фрагменты программы на языке си, копируемые из файла lex.l в файл lex.c.",файл,sys,1
"действия, которые связаны с регулярными выражениями в файле lex.l, представляют собой фрагменты программы на языке си, копируемые из файла lex.l в файл lex.c.",регулярными выражениями,sys,1
"эти действия обычно выполняются всяким лексическим анализатором в его работе, они могут состоять, например, в создании записей в информационной таблице компилятора.",лексическим анализатором,sys,1
"эти действия обычно выполняются всяким лексическим анализатором в его работе, они могут состоять, например, в создании записей в информационной таблице компилятора.",анализатором,sys,1
"эти действия обычно выполняются всяким лексическим анализатором в его работе, они могут состоять, например, в создании записей в информационной таблице компилятора.",компилятора,sys,1
"эти действия обычно выполняются всяким лексическим анализатором в его работе, они могут состоять, например, в создании записей в информационной таблице компилятора.",таблице компилятора,sys,1
"на втором шаге программа lex.c компилируется с помощью компилятора си, в результате чего создается окончательная программа анализатора исходного языка.",компилятора,sys,1
"на втором шаге программа lex.c компилируется с помощью компилятора си, в результате чего создается окончательная программа анализатора исходного языка.",анализатора,sys,1
на третьем шаге эта программа в своей работе осуществляет ввод и лексический анализ текстов исходного языка.,лексический анализ,sys,1
"программа lex основана на анализе и преобразовании регулярных выражений, с помощью которых записываются лексические правила.",регулярных выражений,sys,1
"в программе lex введены несколько расширенные правила записи регулярных выражений, позволяющие оптимизировать их.",регулярных выражений,sys,1
для удобства записи регулярных выражений часто вводятся классы символов.,регулярных выражений,sys,1
"запись [abc], где a, b и c символы алфавита, означает регулярное выражение a b c.",регулярное выражение,sys,1
"сокращенный класс символов типа [a-z] означает регулярное выражение a b ... z. с использованием классов символов можно описать идентификаторы как строки, заданные регулярным выражением [a-za-z][a-za-z0-9].",регулярное выражение,sys,1
"сокращенный класс символов типа [a-z] означает регулярное выражение a b ... z. с использованием классов символов можно описать идентификаторы как строки, заданные регулярным выражением [a-za-z][a-za-z0-9].",регулярным выражением,sys,1
чтобы в компилятор lex компилятор си программа анализатора исходная программа lex lex.l lex.c входной поток символов программы lex.c программа анализатора последовательн ость лексем программы 147 класс символов поместить непосредственно сам символ .,лексем,sys,1
чтобы в компилятор lex компилятор си программа анализатора исходная программа lex lex.l lex.c входной поток символов программы lex.c программа анализатора последовательн ость лексем программы 147 класс символов поместить непосредственно сам символ .,анализатора,sys,1
чтобы в компилятор lex компилятор си программа анализатора исходная программа lex lex.l lex.c входной поток символов программы lex.c программа анализатора последовательн ость лексем программы 147 класс символов поместить непосредственно сам символ .,компилятор,sys,1
в записи регулярных выражений программы lex имеются также следующие способы указания повторений некоторых последовательностей символов: p - итерация (повторение нуль или более раз) p+ - усеченная итерация (повторение один или более раз) p?,регулярных выражений,sys,1
"необязательное вхождение (нуль или один раз) двойные кавычки используются для цитирования, то есть непосредственного указания последовательности символов: a.+ обозначает строку из четырех символов (без самих кавычек) приведем примеры записи регулярных выражений, правильных с точки зрения программы lex: if / идентификатор if / [a-z][a-z0-9] / идентификатор / [0-9] / число / ([0-9]+ .",регулярных выражений,sys,1
"[0-9]+) / вещественное число / ( - [a-z] \n ) ( \n \t )+ / вид комментария / . / произвольный символ / программа lex.l состоит из трех разделов: объявлений, правил трансляции и вспомогательных процедур.",трансляции,sys,1
"в файле lex.l эти разделы следуют друг за другом именно в таком порядке, отделяясь друг от друга строками, состоящими из парных символов процента %% .",файле,sys,1
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",трансляции,sys,1
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",регулярных выражений,sys,1
"все, что находится внутри таких скобок, 148 непосредственно переписывается в создаваемую программу лексического анализатора, не рассматривается как часть регулярных определений или правил трансляции.",лексического анализатора,sys,1
"все, что находится внутри таких скобок, 148 непосредственно переписывается в создаваемую программу лексического анализатора, не рассматривается как часть регулярных определений или правил трансляции.",трансляции,sys,1
"все, что находится внутри таких скобок, 148 непосредственно переписывается в создаваемую программу лексического анализатора, не рассматривается как часть регулярных определений или правил трансляции.",анализатора,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",лексическим анализатором,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",регулярному выражению,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",регулярное выражение,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",лексема,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",трансляции программы,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",анализатором,sys,1
"правила трансляции программы lex.l имеют вид pi {действиеi} где каждое pi есть регулярное выражение, а каждое действиеi есть фрагмент программы, описывающий выполняемые лексическим анализатором действия, если лексема соответствует регулярному выражению (шаблону) pi.",трансляции,sys,1
"действия записываются на том же языке программирования, на котором должен быть сгенерирован анализатор (например, на том же языке си): {spaces} { / действия не определены, возврата нет / } {id} { yylval = found id (); return id; } {number} { yylval = found num (); return number; } < { yylval = lt; return relation; } <= { yylval = le; return relation; } .",анализатор,sys,1
"оно позволяет фиксировать ошибку, связанную с появлением символа, который не может начинать никакую лексему / } %% int found id (void) { / на первый символ идентификатора указывает переменная yytext.",лексему,sys,1
процедура заносит лексему в таблицу анализатора / }i nt found num (void) { / на первый символ числа указывает переменная yytext.,анализатора,sys,1
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",лексическим анализатором,sys,1
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",анализатором,sys,1
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",анализатора,sys,1
"лексический анализатор, создаваемый программой lex, работает с синтаксическим анализатором по схеме однопроходного компилятора.",синтаксическим анализатором,sys,1
"лексический анализатор, создаваемый программой lex, работает с синтаксическим анализатором по схеме однопроходного компилятора.",лексический анализатор,sys,1
"лексический анализатор, создаваемый программой lex, работает с синтаксическим анализатором по схеме однопроходного компилятора.",анализатор,sys,1
"лексический анализатор, создаваемый программой lex, работает с синтаксическим анализатором по схеме однопроходного компилятора.",анализатором,sys,1
"лексический анализатор, создаваемый программой lex, работает с синтаксическим анализатором по схеме однопроходного компилятора.",компилятора,sys,1
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",лексического анализатора,sys,1
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",регулярных выражений,sys,1
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",синтаксический анализатор,sys,1
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",анализатор,sys,1
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",анализатора,sys,1
чаще всего это действие возвращает управление синтаксическому анализатору (то есть заканчивается оператором вида return token).,анализатору,sys,1
чаще всего это действие возвращает управление синтаксическому анализатору (то есть заканчивается оператором вида return token).,синтаксическому анализатору,sys,1
"в этих случаях лексический анализатор продолжает поиск лексем в тексте, пока действие, соответствующее одной из них, не возвратит управление синтаксическому анализатору.",анализатор,sys,1
"в этих случаях лексический анализатор продолжает поиск лексем в тексте, пока действие, соответствующее одной из них, не возвратит управление синтаксическому анализатору.",лексический анализатор,sys,1
"в этих случаях лексический анализатор продолжает поиск лексем в тексте, пока действие, соответствующее одной из них, не возвратит управление синтаксическому анализатору.",анализатору,sys,1
"в этих случаях лексический анализатор продолжает поиск лексем в тексте, пока действие, соответствующее одной из них, не возвратит управление синтаксическому анализатору.",синтаксическому анализатору,sys,1
лексический анализатор возвращает синтаксическому только код обнаруженной лексемы.,лексемы,sys,1
лексический анализатор возвращает синтаксическому только код обнаруженной лексемы.,анализатор,sys,1
лексический анализатор возвращает синтаксическому только код обнаруженной лексемы.,лексический анализатор,sys,1
"в программе lex предусмотрено, что дополнительные атрибуты лексемы могут содержаться в глобальной переменной yylval, текстовое представление лексемы находится в переменной yytext, а длина лексемы в символах в переменной yyleng.",лексемы,sys,1
"если какой-либо лексеме соответствуют сразу несколько шаблонов, то выбирается тот из них, который размещается в перечне шаблонов первым, поэтому частные шаблоны следует ставить в этом перечне раньше общих (это второе правило разрешения неоднозначностей при обработке регулярных выражений порядок следования регулярных выражений имеет определяющее значение).",регулярных выражений,sys,1
"если какой-либо лексеме соответствуют сразу несколько шаблонов, то выбирается тот из них, который размещается в перечне шаблонов первым, поэтому частные шаблоны следует ставить в этом перечне раньше общих (это второе правило разрешения неоднозначностей при обработке регулярных выражений порядок следования регулярных выражений имеет определяющее значение).",лексеме,sys,1
"например, шаблон {if}, который может быть записан для распознавания лексемы начала условного оператора, должен предшествовать шаблону {id}, которому соответствует всякий идентификатор, в том числе, идентификатор if.",лексемы,sys,1
"например, шаблон {if}, который может быть записан для распознавания лексемы начала условного оператора, должен предшествовать шаблону {id}, которому соответствует всякий идентификатор, в том числе, идентификатор if.",условного оператора,sys,1
"программа lex позволяет записывать шаблоны в виде p1/p2, где p1 и p2 регулярные выражения.",регулярные выражения,sys,1
"регулярное выражение после прогностического оператора / указывает правый контекст 150 соответствия, который используется только для ограничения и не является частью шаблона.",регулярное выражение,sys,1
"например, для распознавания ключевого слова do можно записать такой шаблон: do/({letter} {digit}) =({letter} {digit}) , в соответствии с этой спецификацией лексический анализатор просматривает введённые символы после символов do и отыскивает там последовательности букв и цифр, за которой следует знак = и ещё одна последовательность букв и цифр, заканчивающаяся символом , .",анализатор,sys,1
"например, для распознавания ключевого слова do можно записать такой шаблон: do/({letter} {digit}) =({letter} {digit}) , в соответствии с этой спецификацией лексический анализатор просматривает введённые символы после символов do и отыскивает там последовательности букв и цифр, за которой следует знак = и ещё одна последовательность букв и цифр, заканчивающаяся символом , .",лексический анализатор,sys,1
"например, в фортране и pl/1 строка if(i,j) = 3 представляет собой правильный оператор присваивания элементу массива, но не условный оператор.",условный оператор,sys,1
"эта программа генерирует лексические анализаторы, по скорости работы не уступающие анализаторам, запрограммированным вручную, поскольку в ней представление детерминированного конечного автомата транслируется непосредственно в программу (на основе 151 операторов перебора case), и не возникает дополнительных затрат времени на интерпретацию таблицы переходов.",интерпретацию,sys,1
"эта программа генерирует лексические анализаторы, по скорости работы не уступающие анализаторам, запрограммированным вручную, поскольку в ней представление детерминированного конечного автомата транслируется непосредственно в программу (на основе 151 операторов перебора case), и не возникает дополнительных затрат времени на интерпретацию таблицы переходов.",анализаторы,sys,1
"эта программа генерирует лексические анализаторы, по скорости работы не уступающие анализаторам, запрограммированным вручную, поскольку в ней представление детерминированного конечного автомата транслируется непосредственно в программу (на основе 151 операторов перебора case), и не возникает дополнительных затрат времени на интерпретацию таблицы переходов.",лексические анализаторы,sys,1
"эта программа генерирует лексические анализаторы, по скорости работы не уступающие анализаторам, запрограммированным вручную, поскольку в ней представление детерминированного конечного автомата транслируется непосредственно в программу (на основе 151 операторов перебора case), и не возникает дополнительных затрат времени на интерпретацию таблицы переходов.",анализаторам,sys,1
"автоматизация построения синтаксических анализаторов практически все современные языки программирования, позволяющие создавать практически ценные программные комплексы, являются контекстно-зависимыми.",программные комплексы,sys,1
"автоматизация построения синтаксических анализаторов практически все современные языки программирования, позволяющие создавать практически ценные программные комплексы, являются контекстно-зависимыми.",синтаксических анализаторов,sys,1
"автоматизация построения синтаксических анализаторов практически все современные языки программирования, позволяющие создавать практически ценные программные комплексы, являются контекстно-зависимыми.",анализаторов,sys,1
"однако расширение возможностей грамматического описания языков введением описаний действий, то есть замена обычных грамматик на грамматики с действиями, позволяет снизить требования к используемым грамматикам, а значит, к синтаксическим анализаторам и их генераторам.",синтаксическим анализаторам,sys,1
"однако расширение возможностей грамматического описания языков введением описаний действий, то есть замена обычных грамматик на грамматики с действиями, позволяет снизить требования к используемым грамматикам, а значит, к синтаксическим анализаторам и их генераторам.",анализаторам,sys,1
грамматики с действиями нашли себе применение в программе автоматической генерации синтаксических анализаторов yacc (yet another compiler-compiler еще один компилятор компиляторов).,компиляторов,sys,1
грамматики с действиями нашли себе применение в программе автоматической генерации синтаксических анализаторов yacc (yet another compiler-compiler еще один компилятор компиляторов).,синтаксических анализаторов,sys,1
грамматики с действиями нашли себе применение в программе автоматической генерации синтаксических анализаторов yacc (yet another compiler-compiler еще один компилятор компиляторов).,анализаторов,sys,1
грамматики с действиями нашли себе применение в программе автоматической генерации синтаксических анализаторов yacc (yet another compiler-compiler еще один компилятор компиляторов).,компилятор,sys,1
"по сравнению с генератором лексических анализаторов, работающим с регулярными выражениями, работа генератора синтаксических анализаторов осложнена возможными неоднозначностями в грамматиках.",синтаксических анализаторов,sys,1
"по сравнению с генератором лексических анализаторов, работающим с регулярными выражениями, работа генератора синтаксических анализаторов осложнена возможными неоднозначностями в грамматиках.",анализаторов,sys,1
"по сравнению с генератором лексических анализаторов, работающим с регулярными выражениями, работа генератора синтаксических анализаторов осложнена возможными неоднозначностями в грамматиках.",лексических анализаторов,sys,1
"по сравнению с генератором лексических анализаторов, работающим с регулярными выражениями, работа генератора синтаксических анализаторов осложнена возможными неоднозначностями в грамматиках.",регулярными выражениями,sys,1
генерация синтаксического анализатора для произвольной контекстно-свободной грамматики оказывается слишком сложным процессом.,анализатора,sys,1
генерация синтаксического анализатора для произвольной контекстно-свободной грамматики оказывается слишком сложным процессом.,синтаксического анализатора,sys,1
"однако генераторы синтаксических анализаторов на основе произвольных lr(1)-грамматик порождает анализаторы очень большого объема, что не позволяет использовать такие генераторы на практике.",синтаксических анализаторов,sys,1
"однако генераторы синтаксических анализаторов на основе произвольных lr(1)-грамматик порождает анализаторы очень большого объема, что не позволяет использовать такие генераторы на практике.",анализаторов,sys,1
"однако генераторы синтаксических анализаторов на основе произвольных lr(1)-грамматик порождает анализаторы очень большого объема, что не позволяет использовать такие генераторы на практике.",анализаторы,sys,1
"этот недостаток не может умалить важного достоинства lalr(1)-грамматик возможности автоматического построения практически применимых генераторов синтаксических анализаторов, к которым принадлежит и yacc.",синтаксических анализаторов,sys,1
"этот недостаток не может умалить важного достоинства lalr(1)-грамматик возможности автоматического построения практически применимых генераторов синтаксических анализаторов, к которым принадлежит и yacc.",анализаторов,sys,1
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",компилятором,sys,1
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",трансляции,sys,1
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",анализатора,sys,1
"по своей структуре эти части напоминают разделы, обрабатываемые генератором лексических анализаторов, однако в разделе объявлений вместо определений регулярных выражений записываются определения лексем, например, %token digit %token id лексемы, определенные в этом разделе, могут использоваться в правилах трансляции.",анализаторов,sys,1
"по своей структуре эти части напоминают разделы, обрабатываемые генератором лексических анализаторов, однако в разделе объявлений вместо определений регулярных выражений записываются определения лексем, например, %token digit %token id лексемы, определенные в этом разделе, могут использоваться в правилах трансляции.",трансляции,sys,1
"по своей структуре эти части напоминают разделы, обрабатываемые генератором лексических анализаторов, однако в разделе объявлений вместо определений регулярных выражений записываются определения лексем, например, %token digit %token id лексемы, определенные в этом разделе, могут использоваться в правилах трансляции.",регулярных выражений,sys,1
"по своей структуре эти части напоминают разделы, обрабатываемые генератором лексических анализаторов, однако в разделе объявлений вместо определений регулярных выражений записываются определения лексем, например, %token digit %token id лексемы, определенные в этом разделе, могут использоваться в правилах трансляции.",лексических анализаторов,sys,1
"правила трансляции представляют собой обычные грамматические правила грамматик с действиями, записываемые по специальным правилам: <левая часть> : <alt 1> {семантическое действие 1} <alt 2> {семантическое действие 2} . .",трансляции,sys,1
"правила трансляции представляют собой обычные грамматические правила грамматик с действиями, записываемые по специальным правилам: <левая часть> : <alt 1> {семантическое действие 1} <alt 2> {семантическое действие 2} . .",правила грамматик,sys,1
"нетерминальными символами считаются строки из букв и цифр, не взятые в кавычки и не объявленные ранее как лексемы.",нетерминальными символами,sys,1
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",синтаксический анализатор,sys,1
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",анализатор,sys,1
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",анализатора,sys,1
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",компилятор,sys,1
"семантическое действие, входящее в правило, обычно сводится к вычислению по i: expr : expr + term { = 1 + 3; } term ; по умолчанию выполняется простейшее семантическое действие: { = 1; } подпрограммы поддержки пишутся на том языке программирования, на котором будет сформирован синтаксический анализатор.",синтаксический анализатор,sys,1
"семантическое действие, входящее в правило, обычно сводится к вычислению по i: expr : expr + term { = 1 + 3; } term ; по умолчанию выполняется простейшее семантическое действие: { = 1; } подпрограммы поддержки пишутся на том языке программирования, на котором будет сформирован синтаксический анализатор.",анализатор,sys,1
"среди этих подпрограмм обязательно должна существовать функция с именем yylex(), которая выполняет лексический анализ текстов исходного языка.",лексический анализ,sys,1
лексический анализатор yylex() возвращает пары лексема-значение.,лексема,sys,1
лексический анализатор yylex() возвращает пары лексема-значение.,анализатор,sys,1
лексический анализатор yylex() возвращает пары лексема-значение.,лексический анализатор,sys,1
"если функция возвращает лексему типа digit, эта лексема должна быть предварительно объявлена в первом разделе спецификации.",лексема,sys,1
"значение, соответствующее обнаруженной лексеме, возвращается через предопределенную переменную yylval.",лексеме,sys,1
"генераторы синтаксических анализаторов должны иметь средства, позволяющие им разрешать неоднозначности, часто имеющиеся в контекстно-свободных грамматиках, в том числе в lalr(1)-грамматиках.",синтаксических анализаторов,sys,1
"генераторы синтаксических анализаторов должны иметь средства, позволяющие им разрешать неоднозначности, часто имеющиеся в контекстно-свободных грамматиках, в том числе в lalr(1)-грамматиках.",анализаторов,sys,1
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",анализатора,sys,1
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",правила грамматики,sys,1
"такой терминал никогда не возвращается лексическим анализатором и объявляется единственно для того, чтобы определить приоритет правила.",лексическим анализатором,sys,1
"такой терминал никогда не возвращается лексическим анализатором и объявляется единственно для того, чтобы определить приоритет правила.",анализатором,sys,1
"в отличие от генератора лексических анализаторов lex, который способен построить распознаватель по любому правильному регулярному выражению, генератор yacc не всегда способен решить поставленную перед ним задачу.",анализаторов,sys,1
"в отличие от генератора лексических анализаторов lex, который способен построить распознаватель по любому правильному регулярному выражению, генератор yacc не всегда способен решить поставленную перед ним задачу.",регулярному выражению,sys,1
"в отличие от генератора лексических анализаторов lex, который способен построить распознаватель по любому правильному регулярному выражению, генератор yacc не всегда способен решить поставленную перед ним задачу.",лексических анализаторов,sys,1
"пользователю необходимо или преобразовать грамматику, или ввести дополнительные правила, облегчающие построения анализатора.",анализатора,sys,1
"современные генераторы синтаксических анализаторов yacc (а также другие генераторы, выполняющие аналогичные построения, например, bison) представляют собой мощные программные 155 инструменты.",синтаксических анализаторов,sys,1
"современные генераторы синтаксических анализаторов yacc (а также другие генераторы, выполняющие аналогичные построения, например, bison) представляют собой мощные программные 155 инструменты.",анализаторов,sys,1
с их помощью построены реальные анализаторы для различных компиляторов и прикладных систем.,компиляторов,sys,1
с их помощью построены реальные анализаторы для различных компиляторов и прикладных систем.,анализаторы,sys,1
"156 литература основная литература материалы к курсу системы программирования и практикуму на эвм (http://sp.cmc.msu.ru/win/courses/prak2/index.html, http://cmcmsu.no-ip.info/2course/).",системы программирования,sys,1
"элементы теории трансляции , м.: мгу, 1999 (шифр в библиотеке мгу: 5вг66 в-676; http://sp.cmc.msu.ru/courses/prak2/lang grams.pdf).",трансляции,sys,1
"системное программное обеспечение , спб.",системное программное обеспечение,sys,1
"системное программное обеспечение , спб.",программное обеспечение,sys,1
системное программное обеспечение.,системное программное обеспечение,sys,1
системное программное обеспечение.,программное обеспечение,sys,1
"теория синтаксического анализа, перевода и компиляции , в 2-х т.",компиляции,sys,1
"теория синтаксического анализа, перевода и компиляции , в 2-х т.",синтаксического анализа,sys,1
"software portability , cambridge university press, 1977 ( мобильность программного обеспечения , под ред.",программного обеспечения,sys,1
"фокс, программное обеспечение и его разработка , м., мир, 1985).",программное обеспечение,sys,1
"конструирование компиляторов для цифровых вычислительных машин , м., мир , 1975).",компиляторов,sys,1
"конструирование компиляторов для цифровых вычислительных машин , м., мир , 1975).",вычислительных машин,sys,1
"теоретические основы проектирования компиляторов , м.: мир , 1979).",компиляторов,sys,1
"""архитектура распределенных систем программного обеспечения"", м., макс пресс, 2007.",программного обеспечения,sys,1
компиляторы.,компиляторы,sys,1
"-oriented analysis and design with applications , benjamin/cummings, 1990, addison-wesley publishing company, inc., 1994 (г. буч объектно-ориентированный анализ и проектирование с примерами приложений на с++ , 2-е издание, м., спб.",объектно-ориентированный анализ,sys,1
"принципы объектно-ориентированной разработки программ , 2-е издание.",объектно-ориентированной разработки,sys,1
"применение стандартного языка объектного моделирования , м.: мир, 1999.",объектного моделирования,sys,1
процессы жизненного цикла программных средств.,программных средств,sys,1
"введение в системное программирование , м.: мир , 1988).",системное программирование,sys,1
системы программирования а.,системы программирования,sys,1
макропроцессоры p. j. brown. macro processors and techniques for portable software .,макропроцессоры,sys,1
"макропроцессоры и мобильность программного обеспечения , м.: мир , 1977).",программного обеспечения,sys,1
"макропроцессоры и мобильность программного обеспечения , м.: мир , 1977).",макропроцессоры,sys,1
http://subversion.tigris.org/. тестирование программ boris beizer.,тестирование,sys,1
http://subversion.tigris.org/. тестирование программ boris beizer.,тестирование программ,sys,1
тестирование черного ящика.,тестирование,sys,1
"технологии функционального тестирования программного обеспечения и систем , питер, 2004).",программного обеспечения,sys,1
"технологии функционального тестирования программного обеспечения и систем , питер, 2004).",тестирования,sys,1
"технологии функционального тестирования программного обеспечения и систем , питер, 2004).",функционального тестирования,sys,1
"к. тестирование программного обеспечения , м.: diasoft , 2001).",тестирование,sys,1
"к. тестирование программного обеспечения , м.: diasoft , 2001).",программного обеспечения,sys,1
тестирование объектно-ориентированного программного обеспечения.,тестирование,sys,1
тестирование объектно-ориентированного программного обеспечения.,программного обеспечения,sys,1
"надежность программного обеспечения , м., мир, 1980).",программного обеспечения,sys,1
"искусство тестирования программ , м.",тестирования программ,sys,1
"искусство тестирования программ , м.",тестирования,sys,1
автоматизация построения анализаторов программ m. e. lesk.,анализаторов программ,sys,1
автоматизация построения анализаторов программ m. e. lesk.,анализаторов,sys,1
"""генератор синтаксических анализаторов, совместимый с yacc"", http://linux.yaroslavl.ru/docs/altlinux/doc-gnu/bison/bison toc.html).",синтаксических анализаторов,sys,1
"""генератор синтаксических анализаторов, совместимый с yacc"", http://linux.yaroslavl.ru/docs/altlinux/doc-gnu/bison/bison toc.html).",анализаторов,sys,1
"распределенные системы andrew s. tanenbaum, maarten van steen.",распределенные системы,sys,1
"""распределенные системы.",распределенные системы,sys,1
"когаловский, ""стандарты omg: язык определения интерфейсов idl в архитектуре corba"", системы управления базами данных, no 2, стр. 115-129, 1996 robert orfali, dan harkey, jeri edwards.",интерфейсов,sys,1
"когаловский, ""стандарты omg: язык определения интерфейсов idl в архитектуре corba"", системы управления базами данных, no 2, стр. 115-129, 1996 robert orfali, dan harkey, jeri edwards.",базами данных,sys,1
система текстового редактирова ния макрогенерат ор компоновщ ик (редактор связей) выполнени е ассемблер готовая програм ма исходна я програм объектн ый модуль компилято р динамичес кая загрузчик (в составе ос) библиоте ки отладчи к ...,текстового редактирова ния макрогенерат,sys,0
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,передача параметров,sys,0
"в последнее время системная поддержка распределенных программ, взаимодействующих в интернете, приняла форму, которая называется сервером приложений, а само взаимодействие в этой сети стало осуществляться посредством использования сетевых служб.",сетевых служб,sys,0
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",фиксации решений,sys,0
"если какой-либо лексеме соответствуют сразу несколько шаблонов, то выбирается тот из них, который размещается в перечне шаблонов первым, поэтому частные шаблоны следует ставить в этом перечне раньше общих (это второе правило разрешения неоднозначностей при обработке регулярных выражений порядок следования регулярных выражений имеет определяющее значение).",второе правило разрешения,sys,0
"линейные участки имеются в любой программе и чаще всего содержат последовательности вычислений, состоящие из арифметических выражений и операторов присваивания значений переменным программы.",операторов присваивания значений,sys,0
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",исполнения,sys,0
при проектировании стандартных библиотек следует учитывать и ограничения на включение в ее состав некоторых (может быть полезных) элементов.,состав,sys,0
"это наиболее полная система, в основе которой современная методология проектирования, поддержанная совокупностью технических средств.",совокупностью технических,sys,0
этап программирования (кодирования) многими ошибочно называется этапом разработки программ.,этапом разработки программ,sys,0
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",результате,sys,0
при этом запись на языке ассемблера может не сразу оказаться наиболее удобным представлением.,удобным представлением,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",функцией современных,sys,0
"семантика всех программ подразумевает, что при выполнении программ области памяти будут необходимы для хранения: кодов пользовательских программ; данных, необходимых для работы этих программ; кодов системных программ, обеспечивающих поддержку пользовательских программ в период их выполнения; записей о текущем состоянии процесса выполнения программ (например, записей об активации процедур).",процедур,sys,0
"серверы приложений и сетевые службы как и описанные ранее технологии построения распределенных систем com и dcom, стандарт corba не ставит целью зафиксировать какое-либо представление о том, какими должны быть системы программирования для распределенных систем.",представление,sys,0
очень часто в таких архитектурах удается совместить одновременное выполнение нескольких операций.,выполнение,sys,0
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",анализ исходной,sys,0
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",данных,sys,0
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",памяти,sys,0
"часто сопровождение программ осложняется тем, что при широком использовании программ и наличии многих пользователей в практическом использовании одновременно находятся различные версии этих программ.",наличии,sys,0
"для обозначения результатов труда программистов обычно использование следующих терминов: программа, программный продукт и системный (или интегрированный) программный продукт.",результатов,sys,0
"среди этих подпрограмм обязательно должна существовать функция с именем yylex(), которая выполняет лексический анализ текстов исходного языка.",лексический анализ текстов исходного,sys,0
"именно так и работают лучшие и наиболее используемые системы управления версиями, которые способны поддерживать до нескольких десятков операционных систем и нескольких тысяч клиентов, одновременно работающих над созданием единого программного комплекса.",тысяч клиентов,sys,0
"в нее также включается стандартная программа, использующая созданную таблицу переходов для распознавания лексем.",созданную таблицу переходов,sys,0
проверка семантических соглашений и контекстных условий заключается в сопоставлении входных цепочек исходной программы с требованиями семантики языка программирования.,требованиями,sys,0
"потребность автоматически распределять динамическую память возникает, когда в программе используются такие операции над данными, которые требуют перераспределения памяти, а сами операторы перераспределения в программе отсутствуют.",данными,sys,0
"другое требование полнота набора системных компонентов, является важным, но вторичным.",требование полнота набора,sys,0
"требования различных языков программирования, предъявляемые к именам используемых в программах объектов, распространяются на имена объектов, относящиеся к одним пространствам именования и видимости.",языков,sys,0
"современные методы и средства проектирования информационных систем , http://www.citforum.ru/database/case/index.shtml. л.",средства проектирования,sys,0
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",диалоговой формы,sys,0
"каждое изменение в файлах репозитория маркируется 93 моментом времени, когда оно было сделано, и именем пользователя, совершившим изменение.",времени,sys,0
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",места программы обращения,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",правой частей,sys,0
"тесная связь с языком позволяет включать в состав интегрированных систем полезные вспомогательные средства, которые способны проводить анализ текстов программ и находить в них определения объектов данных, их структур, классов.",состав,sys,0
краткий обзор современных систем программирования 4.1.,краткий обзор современных систем,sys,0
"например, идентификаторы некоторого языка программирования, представляющие собой букву, за которой следует нуль или несколько букв или цифр, можно определить с помощью регулярного выражения таким образом: letter(letter digit) правила построения лексических единиц такого языка можно записать так: letter a b ... z a b ... z digit 0 1 2 ...",выражения,sys,0
на этапе написания программ (кодирования) в системах программирования нужно иметь средства автоматизации (пусть частичной) написания программ.,написания,sys,0
"такой подход становится приемлемым только в тех случаях, когда над всеми другими соображениями по поводу способов записи программ превалируют соображения эффективности.",способов,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",ресурсами программы,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",программирования текстовых,sys,0
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",эквивалентов конструкциям внутреннего представления,sys,0
"общая структура размещения в памяти отдельных областей такова: из нее понятно, что для двух динамических областей, границы которых нельзя определить заранее, можно выделить общую зону и организовать в ней встречные направления роста стековой области и области с произвольной дисциплиной распределения.",общая структура размещения,sys,0
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",раздел программы,sys,0
"благодаря этому системы delphi могут использоваться для решения широкого спектра задач, в которых обосновано применение универсального языка программирования, обеспечивающего контроль типов данных и развитые возможности для написания вычислительных задач (указатели, многомерные массивы, рекурсивные процедуры, встроенные функции).",процедуры,sys,0
"фактические параметры задаются в компилируемых программах, а формальные параметры описываются в заголовках библиотечных процедур.",программах,sys,0
"технология java позволяет иметь всего одну исполняемую версию программы, в то время, как использование обычных языков программирования требует создания исполняемых программ для каждого возможного варианта системного окружения.",программирования,sys,0
"кроме того, для использования на этом этапе создается специальный инструментарий, в котором особую важность имеют средства контроля версий программных компонентов.",важность,sys,0
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",операторов программы,sys,0
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",программами,sys,0
регулярные множества для алфавита v определяются рекурсивно: 1.,множества,sys,0
в результате для клиента удаленный вызов процедуры выглядит как обращение к обычной функции.,обычной функции,sys,0
"каждый виток спирали соответствует созданию фрагмента или версии программ, на нем уточняются цели и характеристики проекта, определяется качество проектирования, планируются следующие работы.",характеристики,sys,0
все свои действия он выполняет непосредственно в окне редактирования исходного текста программы.,текста,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",возможности,sys,0
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",вычисления,sys,0
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",задача лексического,sys,0
"многие программные компоненты системы unix получили возможность работать не только в режиме командной строки, но и в интегрированной среде x window.",системы,sys,0
"требуется лишь написать процедуры реакции на события, возникающие при работе программы.",события,sys,0
"если используется объектно-ориентированный подход к проектированию и объектно-ориентированная декомпозиция, полезными оказываются средства, позволяющие разработчикам автоматически строить визуальные описания классов объектов, просматривать их и согласованно редактировать.",описания классов,sys,0
такая информация может использоваться при передаче компилятору сведений о составе входящих в библиотеку процедур и функций.,процедур,sys,0
"примером таких событий может быть событие, возникающее при нажатии на левую кнопку мыши в тот момент, когда указатель мыши находится на экране эвм непосредственно в зоне, отведенной для изображения некоторого компонента формы, например, изображения какой-либо клавиши.",экране эвм,sys,0
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,конфигурацией работа,sys,0
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",описания функций,sys,0
"при управлении неявных запросов памяти в состав выделяемого блока приходится дополнительно включать специальный счетчик числа указателей, связанных с данным блоком, либо специальный признак занятости блока ( пометку ): в блок обычно включается также полный список всех указателей, связанных с объектами данного блока.",выделяемого блока,sys,0
в такой записи операторы (операции) предшествуют своим операндам.,операндам,sys,0
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",этапах разработки программ,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",неправильный подход,sys,0
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",программы,sys,0
среди коммерческих систем наиболее широко используются системы управления жизненным циклом программ peforce scm (software configuration management) и ibm rational clearcase.,коммерческих систем,sys,0
в некоторых случаях перестановка операций может приводить к потере точности вычислений.,перестановка операций,sys,0
"концепция стандартных модулей, предложенная в языке под названием turbo pascal, некоторыми своими чертами напоминает подход, описанный в языке модула-2 с помощью модулей определений и модулей реализации.",концепция стандартных,sys,0
"важными являются возможности по поддержке работы в различных режимах, а также по поддержке ведения в системе нескольких разных проектов разработки программного обеспечения.",проектов разработки программного,sys,0
"более сложные варианты алгоритмов свертки принимают во внимание известные им значения переменных (например, сразу после присваивания) и даже функций.",варианты алгоритмов,sys,0
89 классическим примером проектирования библиотечных средств является пример библиотечной функции сортировки.,библиотечных средств,sys,0
"для обозначения результатов труда программистов обычно использование следующих терминов: программа, программный продукт и системный (или интегрированный) программный продукт.",обозначения результатов труда программистов,sys,0
"например, язык фортран своим стандартом определен через ядро и дополнительные слои, которые можно отключать при компиляции, борясь за эффективность программ, но (может быть) в ущерб удобству программирования.",язык фортран,sys,0
"можно встретить системы команд с аппаратными возможностями по вычислению тригонометрических функций, с одновременным вычислением частного и остатка в целочисленном делении, с выполнением некоторых команд в режиме автоувеличения или автоуменьшения, при которых к операнду прибавляется (или вычитается из него) единица до или после использования его значения в операции.",вычислению,sys,0
их реализации позволяют скрытым от пользователей образом организовать маршалинг и сериализацию параметров и возвращаемых значений методов.,параметров,sys,0
"средства стандартной библиотеки должны (требования по свойствам компонентов) быть важными и удобными для использования всеми программистами для решения всех задач, для которых предназначена библиотека (структуры данных и алгоритмы для работы с ними должны иметь общезначимый характер стек, очередь, список, ..., сортировка, поиск, копирование, ...);",свойствам,sys,0
общая схема работы компилятора на следующей странице изображена схема работы компилятора языка программирования.,общая схема работы компилятора,sys,0
ведь в каждом конкретном случае (для каждого конкретного типа данных) можно найти такое эффективное решение.,решение,sys,0
"например, язык фортран своим стандартом определен через ядро и дополнительные слои, которые можно отключать при компиляции, борясь за эффективность программ, но (может быть) в ущерб удобству программирования.",дополнительные слои,sys,0
"в программах на фортране достаточно сложно распознавать такие операторы do 1 i = 1.3 do 1 i = 1,3 которые в этом языке эквивалентны следующим: do1i=1.3 do1i=1,3 в первом операторе (присваивания) до ввода десятичной точки невозможно определить, являются ли буквы d и o частью идентификатора do1i .",фортране,sys,0
"дальнейшая работа над объектными модулями проводится редактором связей, которые иногда называются компоновщиками.",дальнейшая работа,sys,0
"например, непосредственное вычисление выражения a=(b+c)+(d+e) может потребовать, по крайней мере, одной временной переменной для хранения промежуточного результата сложения b и c. если же провести перестановку операций, эта переменная будет не нужна, а результат останется прежним: a=((b+c)+d)+e.",результата,sys,0
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",разными компиляторами,sys,0
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,заголовок клиента,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",помощью,sys,0
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",система электронной,sys,0
"по способу использования области памяти делятся на глобальные и локальные, а по способу распределения на статические и динамические.",распределения,sys,0
"эта программа обрабатывается компилятором lex, в результате чего получается текст на языке программирования си (в настоящее время существуют версии программы lex, создающие выходные тексты на других языках, например, си++, паскаль, java).",языках,sys,0
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",программу целой,sys,0
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",жизненного цикла,sys,0
"выбирая тот или иной способ представления таблиц в программах компилятора, следует руководствоваться следующими требованиями к ним: структура таблиц должна обеспечивать эффективность поиска в таблицах; структура таблиц должна обеспечивать эффективность вставок в таблицы (имеются в виду, как вставки новых элементов, так и вставки новой информации в ранее имевшиеся записи); структура таблиц должна обеспечивать возможность динамического роста объемов таблиц.",эффективность поиска,sys,0
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",правилах,sys,0
"при их отсутствии операции выполняются слева направо с учетом приоритетов, наивысший из которых имеет левоассоциативная операция итерации, средний операция конкатенации, низший операция объединения множеств.",операция объединения множеств,sys,0
"эти операторы и функции, в свою очередь, могут использовать возможности операционной системы, а могут производить распределение памяти самостоятельно в рамках статически выделенного большого участка памяти.",статически,sys,0
"математически проблема генерации эффективной объектной программы является неразрешимой, но на практике применяются достаточно эффективные эвристические подходы, дающие хорошие результаты, хотя и не абсолютно оптимальные.",программы,sys,0
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",компоненты,sys,0
"все более явственно просматривается тенденция строить сами системы программирования в объектно-ориентированном стиле, то есть включать в состав этих систем средства, позволяющие вести проектирование программ (и даже само техническое программирование) на основе принципов объектно- ориентированного подхода.",основе,sys,0
"в некоторых разработках они использовались для повышения мобильности программного обеспечения, то есть его переносимости из одного операционного окружения в другое.",мобильности,sys,0
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",команда,sys,0
"точно так же, как книгу выписывают из библиотеки, следует сначала получить из репозитория рабочее дерево каталогов.",репозитория рабочее дерево каталогов,sys,0
не требуется от пользователя и знания языка управления заданиями операционной системы.,языка управления заданиями операционной,sys,0
"если в схемах, выбираемых для обработки явных запросов, практически не возникает никаких накладных расходов, то при неявном управлении памятью без больших накладных расходов памяти обойтись не удается.",обработки,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",непротиворечивости таблиц,sys,0
"турбо-паскаль 7.0. самоучитель для начинающих , 2- е изд.",самоучитель,sys,0
"другая стадия выполняется позднее, когда завершен синтаксический анализ последней конструкции программы и начинается подготовка к генерации объектной программы.",стадия,sys,0
"второй вариант, в котором программирование ведется на языке программирования, не совпадающем с машинным языком вычислительной системы, требует наличия системы программирования.",наличия системы программирования,sys,0
"этот стандарт определяет 5 категорий процессов, включающих 35 процессов и 201 вид деятельности.",категорий процессов,sys,0
"распределенная система это набор независимых компьютеров, представляющихся их пользователям единой объединенной системой.",пользователям,sys,0
"вызов процедуры и ее аргументы упаковываются в сообщение в некотором стандартном для данной конкретной системы формате, понятном серверному переходнику.",сообщение,sys,0
"по-существу, при взаимодействии сетевых служб и происходит обращение одной службы (выступающей в данном случае в роли клиента) к удаленной процедуре, реализованной внутри другой службы, являющейся в этот момент сервером.",процедуре,sys,0
"поддержка, которую подобные стандарты и системы оказывают прикладным программам, очень важна, причем по мере развития представлений о распределенных системах она становится все более необходимой.",развития представлений,sys,0
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",система,sys,0
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",стратегией,sys,0
"для реальной программы сортировки 100 чисел это изменение уменьшает совокупное время работы в 2.5 раза, для 100000 чисел снижение времени работы реальной программы в 1000 раз!",работы реальной,sys,0
наличие промежуточного уровня (для обозначения которого часто используется англоязычный термин middleware) существенно расширяет возможности распределенных систем.,наличие промежуточного,sys,0
"в настоящее время это объектно-ориентированный язык, обладающий всеми возможностями других, более новых языков программирования, но оставшийся весьма простым для изучения, благодаря простым изобразительным средствам.",возможностями других,sys,0
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",серверной части программы,sys,0
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",объект программы,sys,0
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",области,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",поток символов программы,sys,0
"разница между ними, прежде всего, состоит в том, что библиотеку .net framework можно использовать при создании программ на любом языке программирования, поддерживающем технологию .net.",программ,sys,0
"в целом, систему visual basic можно определить, как инструментальную среду для разработки самых различных программных продуктов.",разработки,sys,0
"в программах на фортране достаточно сложно распознавать такие операторы do 1 i = 1.3 do 1 i = 1,3 которые в этом языке эквивалентны следующим: do1i=1.3 do1i=1,3 в первом операторе (присваивания) до ввода десятичной точки невозможно определить, являются ли буквы d и o частью идентификатора do1i .",присваивания,sys,0
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",стороны,sys,0
"весь комплекс программ, поставляемых компанией microsoft, следует называть единой операционной средой, предназначенной для разработчиков системного и прикладного программного обеспечения.",компанией,sys,0
карпов системы программирования удк ббк печатается по решению редакционно- издательского совета факультета вычислительной математики и кибернетики мгу им. м.,совета факультета вычислительной математики,sys,0
"сервер выполняет саму отрисовку, управляет дисплеем, а клиент выполняет вычисления и связывается с сервером при необходимости отобразить их результаты на экране.",экране,sys,0
"использование ado позволяет решить проблемы локализации данных (в частности, проблемы многоязыковых данных и шрифтов), и полностью отказаться от специализированного процессора bde, поскольку поддержка ado включена в типовую поставку операционной системы ms windows.",поддержка,sys,0
"обрабатывая эти файлы, компилятор автоматически получает всю необходимую информацию о компонентах библиотеки, причем эта информация поставляется в терминах входного языка компилятора.",входного языка,sys,0
описанные ранее методы анализа программ и генерации этих программ на других языках позволяют решить главную задачу компиляции отыскать эквивалентное представление исходной программы в терминах выходного языка.,эквивалентное представление исходной программы,sys,0
"все вариации конфигураций можно получать, используя развитые языки управления заданиями современных операционных систем, например, возможности условного вызова программ системы программирования или значения переменных системного окружения.",языки управления заданиями,sys,0
"даже если выражение из констант получить не удается, перестановка операций может привести к 58 экономии временных переменных, которые порождаются компилятором для хранения промежуточных результатов вычислений.",операций,sys,0
"в некоторых разработках они использовались для повышения мобильности программного обеспечения, то есть его переносимости из одного операционного окружения в другое.",разработках,sys,0
наиболее распространенным и универсальным способом реализации синхронного взаимодействия в распределенных системах является удаленный вызов процедуры.,способом,sys,0
"компилятор, как основной компонент системы программирования 27 3.3.1 .",основной компонент системы,sys,0
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",процесс,sys,0
один из способов определения ключевого слова if в программе lex состоит в указании его правого контекста с помощью прогностического оператора.,контекста,sys,0
"при управлении неявных запросов памяти в состав выделяемого блока приходится дополнительно включать специальный счетчик числа указателей, связанных с данным блоком, либо специальный признак занятости блока ( пометку ): в блок обычно включается также полный список всех указателей, связанных с объектами данного блока.",специальный счетчик числа,sys,0
"если какой-либо лексеме соответствуют сразу несколько шаблонов, то выбирается тот из них, который размещается в перечне шаблонов первым, поэтому частные шаблоны следует ставить в этом перечне раньше общих (это второе правило разрешения неоднозначностей при обработке регулярных выражений порядок следования регулярных выражений имеет определяющее значение).",обработке,sys,0
"области памяти, в которых проводится распределение, обладают двумя характеристиками характеристикой использования этой памяти в программе и характеристикой способа ее распределения.",области,sys,0
", а также для переменных, размеры которых меняются в процессе выполнения программы (объекты типа vector из библиотеки stl).",выполнения программы,sys,0
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",раздельная компиляция,sys,0
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",программой,sys,0
"при редактировании и отладке это позволяет легко отыскивать в тексте места определения объектов, проверять способы использования объектов на соответствие определениям, отлаживать не только процедуры обработки объектов, но и сами данные и их структуры.",способы,sys,0
среда разработки eclipse (то есть основное окно eclipse в целом) называется рабочим столом.,основное окно,sys,0
"это привлекает к ее развитию большое сообщество разработчиков, проектирующих для этой системы подключаемые модули, как свободно распространяемые, так и коммерческие.",сообщество разработчиков,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",техническая реализация методов управления,sys,0
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",деятельности,sys,0
"оптимизация однократно выполняемых участков программы практически не оказывает влияния на быстродействие программы и может сказываться только на объеме занимаемой программой памяти, поэтому наиболее тщательно всегда оптимизируется самый внутренний цикл программы.",программой памяти,sys,0
"доступны и другие системы управления проектами, например, система timeline, представляющая собой очень хорошую систему для ведения единой базы проектов.",другие системы управления,sys,0
"в научно-исследовательском вычислительном центре мгу создана библиотека численного анализа для использования с трансляторами pgf77 и pgcc с языков фортран-77 и си, разработанными portland group/stm.",научно-исследовательском вычислительном,sys,0
"иногда такое редактирование текста встраивается непосредственно в компилятор, что имеет некоторые преимущества, связанные с повышением эффективности общего 29 процесса обработки текста программы.",обработки,sys,0
"замена операций с переменными цикла производится на основе понимания того, что с каждым шагом цикла значение переменной цикла меняется на один шаг цикла .",цикла значение,sys,0
"одним из важнейших аспектов является учет распространенной особенности многих вычислительных архитектур, строящихся на программно доступных регистрах.",аспектов,sys,0
"таблицы lalr(1)-анализатора весьма компактны, что обеспечивает эффективность алгоритма анализа.",алгоритма анализа,sys,0
"тем более, подобные действия по формированию зон или блоков памяти, определению смещений в этих зонах, приписке регистров некоторым элементам данных, необходимы в компиляторах.",определению смещений,sys,0
"в настоящее время компанией borland выпускается несколько систем программирования: turbo pascal версии 7.0, borland pascal для ms dos и delphi для ms windows.",время компанией,sys,0
"этот язык можно даже рассматривать не как аналог, а как образец, используемый разработчиками новых объектно-ориентированных языков на базе языка паскаль.",паскаль,sys,0
в рамках расширения возможностей и эффективности работы системы программирования delphi в составе операционной системы ms windows компания borland начала использование разработанной в microsoft технологии ado (activex data objects).,составе операционной,sys,0
"если цветов не хватает, узлы итеративно удаляются, причем максимально долго остаются на регистрах переменные, используемые во внутренних циклах программы.",внутренних циклах,sys,0
"спецификация corba позволяет пользователям систем, построенных на ее основе, организовывать свои программы в виде служб, предоставляющих услуги другим программам, то есть таким же службам или более традиционно построенным программам пользователей.",систем,sys,0
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",написание,sys,0
"генератор кода получает на вход промежуточное представление исходной программы и вырабатывает эквивалентную объектную программу, используя для этой цели всю информацию, накопленную к этому моменту в информационных таблицах компилятора.",информационных таблицах,sys,0
"так как перед началом генерации кода уже выполнен синтаксический разбор, отсеяны очевидно ошибочные конструкции и получено полное внутреннее представление исходной программы, во внутреннем представлении программы эти объекты обозначаются специально построенными внутренними именами, по которым записи об объектах легко отыскать в информационных таблицах, а не теми именами, которые присвоил им программист.",представление,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",требований,sys,0
"система cvs поддерживает историю дерева каталогов (репозитория) с исходным кодом, работая с последовательностью изменений.",система,sys,0
для сетевых служб протоколы их функционирования в информационной сети описываются на специально для этого разработанном языке описания протоколов.,языке описания,sys,0
"однако расширение возможностей грамматического описания языков введением описаний действий, то есть замена обычных грамматик на грамматики с действиями, позволяет снизить требования к используемым грамматикам, а значит, к синтаксическим анализаторам и их генераторам.",возможностей грамматического описания языков,sys,0
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",систем,sys,0
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",отдельных компонентов систем программирования,sys,0
"среди этих подпрограмм обязательно должна существовать функция с именем yylex(), которая выполняет лексический анализ текстов исходного языка.",текстов исходного,sys,0
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",качестве компонентов регулярных выражений,sys,0
"замена операций с переменными цикла производится на основе понимания того, что с каждым шагом цикла значение переменной цикла меняется на один шаг цикла .",переменными цикла,sys,0
верный выбор алгоритма всегда способствует получению эффективной программы.,алгоритма,sys,0
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",серверного переходника,sys,0
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",самому языку программирования,sys,0
"функциональность на этом этапе проверяется только в смысле ее влияния на важнейшие технические параметры программы, например, на время реакции системы на запрос пользователя.",системы,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",типами данных,sys,0
"таблицы lalr(1)-анализатора весьма компактны, что обеспечивает эффективность алгоритма анализа.",эффективность,sys,0
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",версиями программных,sys,0
"наличие виртуальных функций (иногда семантически далеких друг от друга) заставляет при формировании нижних уровней иерархии реализовывать их все, даже в тех случаях, когда для некоторого конкретного производного класса конкретные функции не могут быть реализованы сколько-нибудь эффективно в виду невозможности придать им полезную интерпретацию.",формировании,sys,0
"таким же образом производится обработка программ, написанных на любых других языках программирования, входящих в состав системы программирования.",системы,sys,0
некоторые аспекты методов машинно- зависимой оптимизации имеют общий характер и применяются многими разработчиками.,аспекты методов машинно- зависимой,sys,0
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",эффективность решений,sys,0
"в программе lex введены несколько расширенные правила записи регулярных выражений, позволяющие оптимизировать их.",программе,sys,0
текстовый редактор является наиболее частым начальным элементом процесса создания программы.,элементом,sys,0
"сам процесс, выполняемый в программе, описывается в терминах посылки сообщений от объекта другим объектам.",процесс,sys,0
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",экранных редакторов,sys,0
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",памяти,sys,0
"это наиболее полная система, в основе которой современная методология проектирования, поддержанная совокупностью технических средств.",полная система,sys,0
эффективность уплотнения свободных участков областей памяти (эффективность объединения свободных фрагментов во фрагменты суммарного размера).,эффективность,sys,0
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",работу,sys,0
"по техническому составу библиотеки делятся на две категории: библиотеки функций исходного языка и библиотеки функций операционной системы, в составе которой должна будет работать обрабатываемая программа.",библиотеки,sys,0
"пользователь должен помнить 91 варианты сборки программы, режимы, в которых выполнялось их формирование, имена файлов, в которых размещены результаты работы системы программирования.",формирование,sys,0
"оно позволяет фиксировать ошибку, связанную с появлением символа, который не может начинать никакую лексему / } %% int found id (void) { / на первый символ идентификатора указывает переменная yytext.",символ,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",компонентов,sys,0
средства конфигурирования 71 3.8.,конфигурирования,sys,0
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",отладки систем,sys,0
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",разработке,sys,0
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,получения,sys,0
"многие системы контроля версий позволяют разработчику блокировать файл, предотвращая внесение в него изменений до тех пор, пока его собственные изменения не будут зафиксированы.",многие системы,sys,0
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",описания интерфейсов,sys,0
"библиотеки шаблонов построены на основе параметрического полиморфизма, то есть параметризации типов, использования типовых параметров.",параметризации,sys,0
в рамках расширения возможностей и эффективности работы системы программирования delphi в составе операционной системы ms windows компания borland начала использование разработанной в microsoft технологии ado (activex data objects).,работы,sys,0
"это, скорее, система библиотек компонентов и правил их использования.",система,sys,0
"чтобы обобщенная функция сортировки sort(), которая должна упорядочивать целые числа по возрастанию, производила упорядочения целых чисел по убыванию, достаточно привлечь понятие функционального объекта: class intgreater { public: bool operator()(int x, int y) const { return x > y; } }; int main () { int x [1024]; ............ // инициализация sort ( x [0], x [1024]); // обычное упорядочивание sort ( x [0], x [1024], intgreater ()); // упорядочивание по убыванию } при таком использовании эффективность по скорости выполнения будет такой же, как и при написании сортировки целых чисел вручную, а реально может оказаться и выше за счет удачного выбора алгоритма сортировки.",скорости,sys,0
"значениями, которыми инициируются разделы памяти, могут быть последовательности команд (программные разделы) или начальные значения статических объектов данных, в том числе констант.",объектов данных,sys,0
"фактически, система сохраняет историю каталогов вместе с историей файлов, однако, система не считает, что все созданные файлы должны оказаться под ее контролем; это не так во многих случаях.",файлы должны,sys,0
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",обратную трассировку,sys,0
"для проведения оптимизации программы делят на линейные участки, то есть на выполняемые по порядку последовательности операций.",проведения,sys,0
"конфликты разрешаются применением по умолчанию двух следующих правил: порядок правил имеет значение и, в случае конфликта, нужным правилом будет считаться правило, стоящее в списке правил перед конфликтующим.",значение,sys,0
"решают подобные проблемы созданием систем иерархий, то есть построением наборов иерархических деревьев ( леса ), которые между собой не связываются никакими отношениями (по такому принципу построены библиотека stl и стандартная библиотека языка си++).",созданием систем,sys,0
внедрение средств управления конфигурацией шло постепенно и к настоящему моменту можно выделить четыре способа управления конфигурацией программных комплексов.,внедрение,sys,0
"на этапе анализа и формулирования требований (и планирования проекта) необходимо иметь возможность использовать формальные языки описания требований, проводить анализ этих требований и их непротиворечивости, осуществлять моделирование проектируемой системы, используя поведенческие 19 модели, а также выявлять необоснованно завышенные требования к программному обеспечению.",формальные языки описания требований,sys,0
"при выполнении каждого прохода компилятору доступна вся информация, накопленная в информационных таблицах на предыдущих проходах.",проходах,sys,0
техника работы с библиотеками 63 3.6.1 .,работы,sys,0
при открытии нескольких файлов эти виды будут меняться при переходе на различные файлы в редакторе.,открытии,sys,0
"компилятор может изменять характер и порядок следования операций на основании известных алгебраических и логических тождеств, например, заменять выражение a=b c+b d выражением a=b (c+d).",логических тождеств,sys,0
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",компонентов,sys,0
в самых простых системах проведенный анализ используется только для выделения лексем в тексте с помощью графических средств дисплея.,помощью графических,sys,0
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",границы физических,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,отслеживания,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",очередная лексема,sys,0
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",необходимых компонентов,sys,0
"операция линейного участка может оказаться избыточной, если ранее на этом же линейном участке уже выполнялась идентичная операция, и никакой операнд данной операции не был изменен в промежутке между двумя идентичными операциями.",линейного участка,sys,0
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",явных операторов управления,sys,0
"подсказки делаются лишь на основании лексического и синтаксического анализа, а этого не всегда достаточно для полного понимания ситуации, поэтому подсказки не всегда оказываются правильными.",основании,sys,0
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",процесс разработки,sys,0
"первые операционные системы могли позволить пользователям-программистам запускать компоненты систем программирования только в диалоге, последовательно, одну за другой, или собирая приказы на запуск этих компонентов в одном пакетном задании.",программирования,sys,0
однако самый первый подкаталог имеет другое назначение.,другое назначение,sys,0
основная проблема спирального цикла определение момента перехода на следующий этап.,спирального цикла,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",операндов,sys,0
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,настоящее время обязательной частью,sys,0
современные вычислительные комплексы могут иметь сложные аппаратно управляемые структуры памяти.,структуры,sys,0
"особенно важно при проведении тестирования программ иметь заранее составленные сценарии тестирования и тестовые примеры, которые должны охватывать все варианты возможного поведения и реакции программы, как в режиме нормальной работы, так и в случае возникновения необычных ситуаций.",возникновения необычных,sys,0
"большинство компиляторов и редакторов связей в своей работе формируют таблицы, в которых объектам программ сопоставлены зоны памяти целевой вычислительной системы.",памяти целевой вычислительной системы,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",следующим образом,sys,0
"каждое изменение в файлах репозитория маркируется 93 моментом времени, когда оно было сделано, и именем пользователя, совершившим изменение.",именем,sys,0
"современные системы программирования для сетевых служб содержат одновременно и специальные средства генерации описания интерфейсов по исходным текстам на более традиционных языках программирования, например, по текстам на языке java.",традиционных языках,sys,0
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",создания,sys,0
"требования различных языков программирования, предъявляемые к именам используемых в программах объектов, распространяются на имена объектов, относящиеся к одним пространствам именования и видимости.",программах объектов,sys,0
"именно такие 90 соображения послужили причиной включения в стандартную библиотеку си++ таких функций, как генератор случайных чисел.",причиной включения,sys,0
общая схема работы компилятора 27 3.3.1.,общая схема работы компилятора,sys,0
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",связей,sys,0
"в динамической области памяти могут располагаться как зоны, выделяемые пользователем (работающей программой), так и зоны, выделяемые компилятором, но и те и другие выделяются в процессе выполнения программы.",области,sys,0
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",тракта обработки программ,sys,0
"иногда на этапе отладки приходится устранять не только причины дефектов, но и дефекты в данных, возникшие при работе неверных программ.",данных,sys,0
"граф потока управления строится из узлов, которыми являются базовые блоки программы (последовательности команд, имеющие один вход и один выход), и дуг, соответствующих переходам от одного базового блока к другому при наличии некоторых входных для базового блока данных.",команд,sys,0
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",данного способа,sys,0
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",совместной работе программ,sys,0
"генератор программ на си++ и java, работающий на основе выбранного каркаса приложения (rational apex); средства автоматизации тестирования rational team test (rtt), rational robot (часть rtt, используемая для автоматизации прогонов тестов), rational test factory (для автоматизации тестирования интерактивных задач) и rational pure coverage (для контроля полноты покрытия тестами).",основе выбранного каркаса приложения,sys,0
базовые типы данных idl имеют естественное отображение в типы данных си++.,базовые типы данных,sys,0
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",виды деятельности,sys,0
"среди задач системы управления проектом находятся планирование работ (составление списка задач, длительности и графиков выполнения проекта, оценка затрат на выполнение проекта, распределение ресурсов, необходимых для решения задач, распределение ответственности по решаемым задачам).",затрат,sys,0
оптимизация программ может проводиться в интересах различных свойств программ.,свойств программ,sys,0
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",программе пользователя,sys,0
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",огромное количество,sys,0
"например, перестановка целочисленных операций в выражении i/j k может привести к неверному вычислению выражения 10 3/8.",вычислению выражения,sys,0
"проектируя и программируя пользовательский диалог, программист просто размещает компоненты на формах, придавая этим компонентам необходимые атрибуты размеры, цветовые оттенки, делая надписи наиболее удобными шрифтами.",оттенки,sys,0
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",стандартной библиотекой си++,sys,0
"службы в свою очередь вносят сведения о своих свойствах в справочник, при этом разные службы имеют разные свойства, описывающие их нефункциональные характеристики.",разные службы,sys,0
"в эту систему авторами были внесены 120 усовершенствования, которые они считали удобными, основываясь на собственном опыте работы с другими операционными системами.",работы,sys,0
технологии.,технологии,sys,0
"стандарт corba это спецификация для создания и управления объектно-ориентированными приложениями, распределенными в вычислительной сети.",спецификация,sys,0
в записи регулярных выражений программы lex имеются также следующие способы указания повторений некоторых последовательностей символов: p - итерация (повторение нуль или более раз) p+ - усеченная итерация (повторение один или более раз) p?,последовательностей символов,sys,0
"компания microsoft, разрабатывая новую технологию .net, стала поддерживать многоязыковое программирование, то есть такой способ взаимодействия программ, при котором программы, написанные на разных языках, могут работать совместно.",новую технологию,sys,0
основные компоненты систем программирования 12 2.,основные компоненты,sys,0
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",задачи редактора связей таковы,sys,0
"компилятор стремится снизить совокупную стоимость программы, то есть заменить дорогие команды более дешевыми , но дающими тот же результат.",дорогие команды,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",продуктов,sys,0
"теперь при вводе текстов программ с помощью редактора, эта программа, получив сведения о том, на каком языке программирования написан вводимый текст, выделяет ключевые слова языка особым шрифтом и цветом, ""подсвечивает"" соответствующие открывающие и закрывающие скобки.",вводе текстов,sys,0
повторяемость тестов важна для повторных проверок после внесения исправлений.,повторяемость тестов важна,sys,0
текстовый редактор является наиболее частым начальным элементом процесса создания программы.,элементом процесса создания,sys,0
"это приводит к тому, что пользователи могут вносить замечания и пожелания по совершенствованию системы только после того, как работа над ней будет полностью завершена.",совершенствованию системы,sys,0
27 интегрированные среды имеются не только в системах microsoft windows для персональных компьютеров.,компьютеров,sys,0
"более того, возможность использовать язык си++ превращает эту систему программирования в инструмент, позволяющий создавать не только обычные офисные приложения, но и решать другие задачи.",офисные приложения,sys,0
"все, что можно сделать для повышения этой эффективности, делается в период компиляции.",период компиляции,sys,0
"например, режимы автоувеличения и автоуменьшения очень удобны для организации работы со стеком, а также при выполнении операций вида i:=i+1.",операций,sys,0
"в настоящее время аппаратная платформа ibm носит наименование zseries, она является развитием выпускающейся на протяжении нескольких десятилетий линии эвм s/360, s/370 и s/390.",наименование,sys,0
"лучше иметь синтаксически ориентированные текстовые редакторы, которые обеспечивают подсветку служебных слов, обеспечивают работу с функциональной клавиатурой, позволяющей вводить сложные языковые конструкции одним нажатием на клавишу, проверяют баланс скобок.",клавишу,sys,0
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",команд,sys,0
"существуют и другие критерии, например, планируемая скорость работы транслятора, степень оптимизации программ.",скорость,sys,0
"часто этот этап разбивается на два подэтапа: проектирование структуры системы (проектирование в большом ), и проектирование совокупности взаимосвязанных подсистем (проектирование в малом ).",проектирование структуры,sys,0
"время компиляции от включения оптимизирующих преобразований всегда растет, но иногда это не очень важно.",преобразований,sys,0
"обычно человек, совершивший изменение, также предоставляет текстовое описание причины, по которой произошло изменение.",изменение,sys,0
процесс создания диалоговых форм и расстановки на них элементов управления диалогом благодаря визуальному подходу стал несложным и понятным.,создания,sys,0
этим достигается интеграция текстового редактора с лексическим анализатором компилятора.,лексическим анализатором компилятора,sys,0
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",интерпретаторов языка управления,sys,0
"во многих языках существуют данные, позволяющие ссылаться на другие данные указатели и ссылки.",ссылки,sys,0
"благодаря тому, что системы программирования turbo pascal работают под управлением операционной системы ms dos, в состав этих систем удалось включить стандартные модули, работающие с ресурсами и аппаратными элементами эвм (ввод/вывод dos, графическая подсистема graph, текстовая консоль crt и др.) в режиме полного управления.",полного управления,sys,0
"чтобы уменьшить число ошибок в программах, еще на этапе программирования (до объединения с другими компонентами создаваемого комплекса) разработчики проводят над своими программами цикл отладки: расставляют операторы выдачи промежуточных результатов работы программы, исследуют содержимое памяти, занятой командами или данными тестируемой (отлаживаемой) программы, применяют автоматизированные средства отладки и тестирования (двоичные и символьные отладчики).",отладчики,sys,0
внутри каждой из фаз также возможно циклическое повторение отдельных работ.,циклическое повторение отдельных работ,sys,0
"эти операторы и функции, в свою очередь, могут использовать возможности операционной системы, а могут производить распределение памяти самостоятельно в рамках статически выделенного большого участка памяти.",большого участка,sys,0
"создаваемые с использованием универсальных модулей языковой среды приложения могут выполняться в различных операционных средах, включая как внутрисистемные (например, unix shell), так и среды промежуточного слоя (db2, cics).",языковой среды приложения,sys,0
технологии динамического распределения памяти.,распределения,sys,0
критерии проектирования стандартных библиотек 69 3.7.,библиотек,sys,0
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",потерей эффективности,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",управления памятью операционной,sys,0
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",усложнения,sys,0
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",трансляции адресов,sys,0
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",варианта языка,sys,0
"начиная с версии 4.0 системы turbo pascal, появившейся примерно 15 лет назад, язык программирования, использованный в них, значительно отличается от того языка паскаль, классическое описания которого, дано его автором никлаусом виртом и другими в их многочисленных работах.",паскаль,sys,0
неиспользуемые объекты могут исключаться из рассмотрения и в формируемые разделы памяти не попадать.,памяти,sys,0
"именно поэтому унарный минус, определяемый предпоследней альтернативой в приведенном примере, получает наивысший приоритет, по сравнению с другими операторами.",операторами,sys,0
"система cvs поддерживает историю дерева каталогов (репозитория) с исходным кодом, работая с последовательностью изменений.",историю,sys,0
основные компоненты компилятора и фазы компиляции информационные таблицы.,компоненты компилятора,sys,0
"все остальные подпрограммы (например, процедуры обработки ошибочных ситуаций) добавляются только в случае их реальной необходимости.",ошибочных ситуаций,sys,0
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",нужные места программы,sys,0
"тестирование, выполненное с помощью стратегии структурного теста, называется также тестированием прозрачного ящика или тестированием белого ящика.",прозрачного ящика,sys,0
"потери памяти, возникающие из-за выравнивания, можно легко оценить, сравнив значения размеров сложных объектов (структур, массивов) с суммой размеров составляющих их элементов.",массивов,sys,0
"это значит, что на основе любой регулярной грамматики можно построить регулярное выражение, определяющее тот же язык.",выражение,sys,0
"результат проектирования диалога непосредственно виден на экране эвм, никакой компиляции не требуется.",результат проектирования диалога,sys,0
в дополнение к аспектам модульного программирования к нему были добавлены практически все признаки объектно-ориентированных языков.,признаки,sys,0
"таких языков в настоящее время существует несколько, наиболее перспективным в настоящее время можно считать язык выполнения бизнес-процессов bpel.",процессов,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",работы,sys,0
программы электронной почты.,программы,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",состав,sys,0
при работе в интегрированной среде разработчик программы освобождается от необходимости устанавливать параметры запуска компонентов системы при всяком запуске этих компонентов.,параметры,sys,0
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",компоненты,sys,0
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",скобки,sys,0
"некоторые системы программирования предлагают поддержку пользовательской оптимизации, в частности, имеют в своем составе профилировщики, помогающие выявить те фрагменты программ, которые для своего выполнения требуют максимальной доли времени работы программы.",максимальной доли,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",компонент,sys,0
"если в библиотеку будут внесены изменения, вносить какие-либо параллельные изменения в программу, использующую исправленную библиотеку не требуется.",библиотеку,sys,0
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",выражениям,sys,0
"; предоставлять программисту нетривиальные средства, на которые он может рассчитывать, заботясь о переносимости программ, например, средства работы со списками, функции сортировки, потоки ввода/вывода; предоставлять основу для расширения собственных возможностей, в частности, соглашения и средства 88 поддержки, позволяющие обеспечить операции для данных, имеющих определяемые пользователями типы, в том же стиле, в котором обеспечиваются операции для встроенных типов (например, ввод/вывод); служить основой и теоретическим базисом других библиотек.",основу,sys,0
"в целом, технологию com/dcom обычно используют для построения небольших распределенных систем, имеющих не очень большое число узлов.",построения небольших распределенных систем,sys,0
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,база проекта,sys,0
"эти компоненты называются трансляторами, то есть программами, которые переводят исходную программу, написанную на некотором исходном (входном) языке, в другую программу, эквивалентную первой.",программу,sys,0
"символ - используется для обозначения диапазона в классе символов, символ .",обозначения диапазона,sys,0
"с ее помощью сложные прикладные программы могут разрабатывать не только профессиональные программисты, но и квалифицированные пользователи приложений.",помощью,sys,0
наличие промежуточного уровня (для обозначения которого часто используется англоязычный термин middleware) существенно расширяет возможности распределенных систем.,возможности,sys,0
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",языка управления заданиями,sys,0
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",обращения,sys,0
создаваемые в этой интегрированной инструментальной среде программы обладают свойством автономности и в состоянии после завершения разработки функционировать в отрыве от самой среды.,разработки,sys,0
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",системы,sys,0
"задача редактора связей сформировать области (разделы, секции) памяти, которые впоследствии смогут быть размещены в памяти вычислительной машины как единое целое, в виде цельных блоков.",машины,sys,0
"124 фаза проектирования (elaboration), которая состоит в разработке структуры программного продукта, решающего поставленные задачи.",продукта,sys,0
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",синтаксисом,sys,0
"оптимизация однократно выполняемых участков программы практически не оказывает влияния на быстродействие программы и может сказываться только на объеме занимаемой программой памяти, поэтому наиболее тщательно всегда оптимизируется самый внутренний цикл программы.",программы,sys,0
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",программ,sys,0
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,понятия,sys,0
более подробно внутреннее представление программ в компиляторах рассматривается в разделе 3.3.3 и в пособии формальные грамматик и и языки.,программ,sys,0
"для записей о текущем состоянии процесса выполнения программ, а также для записей о входах в блоки операторов, которые можно рассматривать в качестве процедур без параметров.",текущем состоянии процесса,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",точных характеристик конфигурации,sys,0
"в результате формируется исправленный текст, который можно снова записать в системный архив, использовав прежнее имя файла или задав новое имя, сохранив предыдущий вариант в архиве.",результате,sys,0
"с одной стороны это означает, что объекты нельзя использовать вне тех блоков, где они описаны и видны, с другой стороны, это ослабляет требования уникальности имен, поскольку объектам, относящимся к разным блокам, можно давать одинаковые имена, не внося при этом путаницы в программу.",другой стороны,sys,0
страуструп.,страуструп,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",константы статические,sys,0
"в мире существуют немного систем программирования, которые обеспечивали бы поддержкой весь процесс проектирования, разработки и сопровождения программных продуктов.",сопровождения программных,sys,0
"например, поставив курсор редактора 102 на имя fprintf, пользователь может получить справку по всем функциям форматного ввода/вывода и способам задания форматов.",курсор,sys,0
"появились и элементы объектно-ориентированного программирования, в частности, привязка процедур и функций к 106 описаниям сложных объектов.",элементы,sys,0
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",графические формы,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",представление внутреннее,sys,0
", а также для переменных, размеры которых меняются в процессе выполнения программы (объекты типа vector из библиотеки stl).",объекты типа,sys,0
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",трассировку хода выполнения,sys,0
влияет на программу реального лексического анализатора и необходимость отслеживать возможные ошибки в тексте исходных программ.,исходных программ,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",снижение времени,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",адресами,sys,0
"проверка правил программирования многие современные компиляторы не только проверяют ограничения и требования, выставляемые семантикой языка, но также выполняют дополнительные проверки, способствуя выработке правильного стиля программирования.",проверка правил,sys,0
"в настоящее время это же сокращение трактуется, как gnu compiler collection.",настоящее время,sys,0
"трансляторы, компиляторы, интерпретаторы конечной целью создания всякого программного продукта является достижение некоторого результата, способ получения которого закодирован в этой программе.",результата,sys,0
"было признано более целесообразным не переходить к использованию другого языка программирования, пусть и напоминающего классический паскаль, как модула-2, но все же отличающегося от него в некоторых важных чертах, а сохранить и расширить сам паскаль, дав ему новую жизнь в изменившихся условиях.",новую жизнь,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",язык программирования,sys,0
"все системы имеют развитые отладчики, которые работают в терминах базового языка программирования (basic/cи++/язык ассемблера).",базового языка программирования,sys,0
"128 огромное внимание в описываемой системе программирования уделяется подготовке программ для использования в пакетном режиме традиционном способе разработки программ, применяемом программистами для эвм, выпускавшимися компанией ibm, а также многими ее последователями в течение десятилетий.",течение,sys,0
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",правило,sys,0
"макропроцессоры и мобильность программного обеспечения , м.: мир , 1977).",мобильность,sys,0
"методы трансляции адресов могут основываться на сегментной, страничной или сегментно-страничной организации памяти.",организации,sys,0
однако простой демонстрацией текстов документов справочные системы современных систем программирования не ограничиваются.,системы,sys,0
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",монитора графические,sys,0
"внутри основного окна расположены различные панели, называемые видами, которые отображают консольный вывод, текущий проект в виде дерева объектов и т.",видами,sys,0
"в целом, dce это попытка стандартизовать понятие удаленного вызова процедуры.",вызова,sys,0
"контроль и координация календарного плана работ: работа с единой базой проекта, идентификация хода проекта по графикам и диаграммам, рассылка сообщений участникам проекта, генерация отчетов о выполнении работ.",координация календарного плана работ,sys,0
"во- вторых, процедуры, оптимизированные таким образом, не могут включаться в общие библиотеки, поскольку используют нестандартный метод получения параметров.",общие библиотеки,sys,0
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",комплектования программ,sys,0
их реализации позволяют скрытым от пользователей образом организовать маршалинг и сериализацию параметров и возвращаемых значений методов.,пользователей образом,sys,0
"это приводит к тому, что пользователи могут вносить замечания и пожелания по совершенствованию системы только после того, как работа над ней будет полностью завершена.",пользователи,sys,0
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",разработки,sys,0
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",дополнительных операторов,sys,0
удаление ненужных присваиваний и других операций.,присваиваний,sys,0
"средства автоматизации прогонов тестов, позволяющие избежать ручного запуска большого количества тестов.",прогонов,sys,0
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,компонентов системы,sys,0
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,особенную помощь интеграция,sys,0
"изменение свойств основного языка программирования, являющего ядром системы программирования повлияло на свойства самой системы программирования.",языка программирования,sys,0
"основное преимущество модели удаленного вызова процедуры состоит в том, что сам клиент не знает, что вызов был удаленный.",сам клиент,sys,0
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",язык программирования,sys,0
во многих языках программирования действуют правила хорошего программирования.,языках программирования,sys,0
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",единый интерфейс,sys,0
системы управления версиями программных комплексов в настоящее время многие системы программирования начали включать в свой состав системы управления версиями.,настоящее время,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",таблица очередн,sys,0
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",промежуточного представления,sys,0
(всего около 20 языков программирования).,программирования,sys,0
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",виде явных,sys,0
"реализации объектов создаются на основе нескольких классов, каждый из которых представляет различные варианты поведения объекта.",объектов,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",функцией современных систем программирования,sys,0
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",производительность,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",редактирования файлов,sys,0
"редакторы связей: назначение, принципы работы 60 3.5.",редакторы,sys,0
"программы, представленные в виде полиз трудно поддаются анализу, поэтому оптимизирующие компиляторы создают полиз после проведения глобальных оптимизирующих преобразований, когда требуется преобразовать уже оптимизированную древовидную 53 структуру в линейную.",преобразований,sys,0
создаваемые в этой интегрированной инструментальной среде программы обладают свойством автономности и в состоянии после завершения разработки функционировать в отрыве от самой среды.,инструментальной среде программы,sys,0
"их появление заставило разработчиков предпринять меры по интеграции серверов, а для размещения программ, ответственных за эту интеграцию, наилучшим образом подходил промежуточный уровень трехуровневых систем.",уровень трехуровневых,sys,0
"-oriented analysis and design with applications , benjamin/cummings, 1990, addison-wesley publishing company, inc., 1994 (г. буч объектно-ориентированный анализ и проектирование с примерами приложений на с++ , 2-е издание, м., спб.",издание,sys,0
"для распределенных систем это, прежде всего, использование формализованных протоколов взаимодействия в информационных сетях, в том числе, в глобальных сетях, корпоративных или общедоступных, например, в сети интернет.",систем,sys,0
"один брокер может иметь несколько репозиториев, и несколько брокеров могут иметь доступ к одному репозиторию.",доступ,sys,0
"кроме технических целей ричард столмен, недовольный ничем не ограниченной коммерциализацией системных программ и самого процесса системного программирования, ставил перед собой цель создать бесплатно распространяемую систему программирования, которая могла бы оказаться серьезным конкурентом дорогостоящим коммерческим системам.",процесса,sys,0
"определенными недостатками и ограничениями обладает и выбранный для систем com язык microsoft idl, в котором недостаточно развиты средства объявления типов данных, из которых строится программа.",определенными недостатками,sys,0
"если системы turbo pascal просто предоставляли удобный пользовательский интерфейс для создателей программ, то системы delphi прямо ориентированы на визуальное программирование.",создателей программ,sys,0
": издательский отдел факультета вмк мгу (лицензия ид no 05899 от 24.09.2001), 2009 129 с. isbn настоящее пособие является дополнением к ранее выпущенному несколькими изданиями пособию (волкова и.",изданиями пособию,sys,0
основная сложность проектирования определить основания для разделения общей системы на составляющие ее подсистемы.,основная сложность проектирования,sys,0
один из способов определения ключевого слова if в программе lex состоит в указании его правого контекста с помощью прогностического оператора.,указании,sys,0
"в рамках асинхронного или неблокирующего взаимодействия клиент после отправки запроса серверу может продолжать работу, даже если ответ на запрос еще не пришел.",отправки запроса серверу,sys,0
"необходимость оказания системной поддержки программам, проходящим обработку в системах программирования, повлияло на первоначальное наименование библиотек, которые сначала назывались библиотеками системных программ или библиотеками стандартных программ.",программ,sys,0
в правило можно вставлять явное задание приоритета правила с помощью конструкции %prec <терминал> (как в предпоследней альтернативе на приведенном выше примере).,выше примере,sys,0
"математически проблема генерации эффективной объектной программы является неразрешимой, но на практике применяются достаточно эффективные эвристические подходы, дающие хорошие результаты, хотя и не абсолютно оптимальные.",проблема генерации,sys,0
"полное владение ситуацией может обеспечить только операционная система, причем только в момент непосредственного занесения программы в память.",память,sys,0
", а также для переменных, размеры которых меняются в процессе выполнения программы (объекты типа vector из библиотеки stl).",процессе,sys,0
"сам процесс, выполняемый в программе, описывается в терминах посылки сообщений от объекта другим объектам.",сам процесс,sys,0
"современные генераторы синтаксических анализаторов yacc (а также другие генераторы, выполняющие аналогичные построения, например, bison) представляют собой мощные программные 155 инструменты.",другие генераторы,sys,0
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",процесса создания программ,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",средства компоновки программных комплексов,sys,0
"оптимизация однократно выполняемых участков программы практически не оказывает влияния на быстродействие программы и может сказываться только на объеме занимаемой программой памяти, поэтому наиболее тщательно всегда оптимизируется самый внутренний цикл программы.",объеме,sys,0
"вынесение инвариантных вычислений из тела цикла сводится к вынесению за пределы цикла тех операций, операнды которых не изменяются в процессе выполнения цикла.",операций,sys,0
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",система пользовательского оконного интерфейса,sys,0
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",записи,sys,0
"анализатор должен принимать меры для максимально более полной локализации ошибок, причем не только лексических, но также и синтаксических и семантических.",ошибок,sys,0
процессы жизненного цикла программных средств.,средств,sys,0
"компоновщик модулей, позволяющий собирать из ранее оттранслированных модульных фрагментов программ и библиотечных модулей полноценные исполняемые программы.",модульных фрагментов,sys,0
"после такой остановки программист имеет возможность исследовать значения переменных, а затем (если это необходимо) исправить текст программы и продолжить выполнение программы в пошаговом или в обычном режиме до выхода на следующую контрольную точку или до конца работы программы.",выхода,sys,0
"эта система, сопровождаемая компанией ibm, работает с различными операционными системами (windows, unix/linux) и различными языками программирования (java, си, си++, кобол, uml).",системами,sys,0
"другие макропроцессоры считают макровызовом произвольную строку текста, соответствующую некоторому заранее определенному шаблону, причем правила описания шаблонов могут достаточно сложными, а сами шаблоны могут быть параметризованными.",сами шаблоны,sys,0
"решают подобные проблемы созданием систем иерархий, то есть построением наборов иерархических деревьев ( леса ), которые между собой не связываются никакими отношениями (по такому принципу построены библиотека stl и стандартная библиотека языка си++).",библиотека,sys,0
с помощью стандартов удается проводить оценку качества проводимых процессов и выискивать возможности для их улучшения.,помощью стандартов,sys,0
"кроме того, языковое окружение упрощает взаимодействие между приложениями, написанными на разных языках или для разных операционных сред, за счет специальных интерфейсных средств.",языках,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",операций отношения,sys,0
"поддержка интеграции приложений обеспечивается специальными компонентами ejb, интерфейсом именования и каталогов jndi, службой сообщений и транзакционным интерфейсом.",интеграции приложений,sys,0
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",компьютером,sys,0
"другой стороной разрыва связи программы и библиотеки в момент их объединения является трудоемкость исправления программ в случае, если внесение изменений в библиотеку объясняется исправлением существовавшей в ней ошибки.",исправления программ,sys,0
"системы, выпускаемые компанией microsoft, выполнены в едином стиле, их интерфейс хорошо продуман.",компанией,sys,0
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",динамического обращения репозиторий интерфейсов,sys,0
"некоторые системы программирования включают в свой состав компоненты, облегчающие процесс написания программ и автоматически генерирующие заготовки программ, которые впоследствии превращаются программистами в полноценные программы.",состав компоненты,sys,0
"использовать локальную память вне пределов ее видимости, определяемых синтаксическими и семантическими правилами языков программирования, нельзя.",правилами языков программирования,sys,0
"так как перед началом генерации кода уже выполнен синтаксический разбор, отсеяны очевидно ошибочные конструкции и получено полное внутреннее представление исходной программы, во внутреннем представлении программы эти объекты обозначаются специально построенными внутренними именами, по которым записи об объектах легко отыскать в информационных таблицах, а не теми именами, которые присвоил им программист.",внутреннее представление,sys,0
во время каждой итерации система автоматически контролирует приближение реализации к описанным вариантам использования.,использования,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",блоков таблица циклов множеств,sys,0
"значительное облегчение пользователям приносят также библиотеки стандартных форм и элементов управления ( библиотеки компонентов ), а также развитая система оказания помощи пользователям, снабженная огромным количеством примеров.",система оказания помощи,sys,0
"этот продукт был подключен к системе bde по той причине, что в состав многочисленных продуктов компании microsoft, поддерживающих офисную автоматизацию, включена также и поддержка odbc, поэтому для odbc созданы драйверы почти всех субд, что обеспечила работу с этими системами и в системе delphi/bde.",драйверы,sys,0
"такие имена должны быть уникальными на уровне библиотек, в которые они могут попадать после завершения компиляции.",имена должны,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",присваивания типы переменной,sys,0
такая последовательность должна удовлетворять набору синтаксических и семантических правил.,последовательность должна,sys,0
"теперь при вводе текстов программ с помощью редактора, эта программа, получив сведения о том, на каком языке программирования написан вводимый текст, выделяет ключевые слова языка особым шрифтом и цветом, ""подсвечивает"" соответствующие открывающие и закрывающие скобки.",программа,sys,0
на основе объектно- ориентированной декомпозиции сложные программные системы удается строить путем эволюционного развития небольших подсистем.,декомпозиции сложные,sys,0
"например, для машин с конвейерной или векторной архитектурой очень важно распознавать в программах, так называемые ливерморские циклы.",архитектурой,sys,0
"многие алгоритмы устроены так, что в ходе вычислений некоторые величины оказываются пропорциональными номеру итерации.",номеру,sys,0
"такой выбор, с одной стороны, упрощает разработку компилятора, с другой стороны, ограничивает эффективность использования регистров.",использования,sys,0
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",методы вспомогательных,sys,0
"тем самым, во-первых, от пользователей скрыты различия между компьютерами и способы связи между ними (компьютеры распределенной системы автономны), во-вторых, пользователи и приложения единообразно работают в распределенных системах, независимо от того, где и когда происходит их взаимодействие.",распределенной системы автономны,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",анализа требований,sys,0
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",библиотеками,sys,0
"второй вариант, в котором программирование ведется на языке программирования, не совпадающем с машинным языком вычислительной системы, требует наличия системы программирования.",машинным языком вычислительной системы,sys,0
"не существует наилучшей стратегии, так как полезность стратегии зависит от природы тестируемого объекта, природы ошибок объекта и уровня знаний о программе.",полезность стратегии,sys,0
"наиболее успешными работы по автоматизации грамматического разбора были в области лексического анализа, так для описания лексики языков программирования оказалось достаточным использовать наиболее теоретически простые языки регулярные.",программирования,sys,0
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",введению,sys,0
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",системы,sys,0
"технология разработки распределенного программного обеспечения тоже может обладать прозрачностью настолько, насколько она позволяет разработчику забыть о том, что создаваемая система распределена, и насколько легко в ходе разработки можно отделить аспекты построения системы, связанные с ее распределенностью, от решения задач прикладной области, в рамках которых системе предстоит работать.",аспекты построения системы,sys,0
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",процессы,sys,0
использование абстракций и спецификаций при разработке программ .,программ,sys,0
"последнее важно не только при вводе сложных арифметических выражений, но и при работе с языками программирования, построенными на длинных конструкциях со сбалансированными скобками, например, с языком lisp.",языками программирования,sys,0
"таким образом, проектирование и программирование диалога с пользователем сводится к определению и установке значений свойств некоторых компонентов форм и программированию обработчиков событий.",обработчиков событий,sys,0
"в таких случаях происходит как экономия времени исполнения программ, так и экономия памяти, отведенной под хранение данных программы.",хранение данных,sys,0
"во время тестирования выявляется несоответствие программы исходным требованиям и спецификациям по тестам, то есть программам с заранее известными ответами.",ответами,sys,0
"фаулер, к. скотт.",фаулер,sys,0
"системы программирования компании microsoft к наиболее распространенным системам программирования для настольных эвм относятся системы, выпускаемые компанией microsoft.",программирования компании,sys,0
"если системы ""клиент-сервер"" привели к стандартизации интерфейсов прикладного слоя, то их развитие позволило стандартизовать интерфейсы слоя управления ресурсами, а это привело к возможности интеграции в рамках одной системы самых разнородных информационных ресурсов.",возможности интеграции,sys,0
"работа с блоками, выделенными и освобождаемыми по неявным запросам, проводится по-разному, в зависимости от выбираемого алгоритма определения занятости блока.",работа,sys,0
"их применение освобождает программистов от запоминания многих технических деталей, которые нужно точно знать только непосредственно в момент создания командного файла.",технических деталей,sys,0
"задачей лексического анализатора является замена разнообразных элементов текста стандартно выглядящими лексемами, которые в дальнейшем будет легче обрабатывать в других частях компилятора.",текста,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",работу векторного конвейера выполнением,sys,0
с распространением интегрированных систем документация также стала поставляться по-новому.,интегрированных систем документация,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",код фазы,sys,0
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",возможного упрощения,sys,0
для вычислительных машин с векторной архитектурой оптимизация циклов становится машинно-зависимой.,архитектурой,sys,0
"в тех случаях, когда такую формулу записать слишком сложно, в свободно распространяемые тексты программ компилятора можно добавить новый параметр, описывающий дополнительный режим трансляции.",тексты программ компилятора,sys,0
интерфейсы описываются на языке описания интерфейсов idl (стандарт corba предлагает свой собственный вариант такого языка).,языке описания,sys,0
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",элемента памяти,sys,0
"процесс макрообработки текстов концептуально делится на две фазы первая из них это ввод макроопределений, вторая фаза состоит в обработке макровызовов.",макрообработки,sys,0
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",переименование полей,sys,0
"в системе visual c++ имеется полный набор библиотек, позволяющих выполнять все виды работ, которые можно выполнять и в системах visual basic и vba.",системе,sys,0
97 результатом тестирования является вовсе не доказательство отсутствия ошибок в программе.,программе,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",программы,sys,0
"командные оболочки, за которыми работают командные интерпретаторы, позволяют не только выполнять отдельные команды операционной системы, но и формировать командные файлы, содержащие заранее сформированные последовательности команд.",командные оболочки,sys,0
наиболее распространенным и универсальным способом реализации синхронного взаимодействия в распределенных системах является удаленный вызов процедуры.,способом реализации,sys,0
создаваемые в этой интегрированной инструментальной среде программы обладают свойством автономности и в состоянии после завершения разработки функционировать в отрыве от самой среды.,интегрированной инструментальной среде программы,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",описаний,sys,0
"все, что может сделать компилятор, вставить в программу специальную подпрограмму, к которой можно будет обращаться для выделения места в динамической области памяти и освобождения этого места, когда потребность в нем исчезнет.",программу,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",таблица очередн имен,sys,0
взаимодействие между клиентскими и серверными частями распределенной программной системы может быть синхронным и асинхронным.,частями распределенной программной системы,sys,0
"триады требуют меньше памяти для представления программ и имеют в этом преимущество перед тетрадами, к тому же триады ближе к двухадресным машинным командам, чем тетрады, поэтому их легче преобразовывать к окончательному виду объектной программы.",командам,sys,0
"тестирование, выполненное с помощью стратегии структурного теста, называется также тестированием прозрачного ящика или тестированием белого ящика.",стратегии структурного,sys,0
"использовать локальную память вне пределов ее видимости, определяемых синтаксическими и семантическими правилами языков программирования, нельзя.",пределов,sys,0
"он позволяет готовить и вносить изменения в тексты исходных программ, однако в современных системах программирования его функции стали еще более широкими.",тексты,sys,0
"пакетные редакторы особенно удобны при пакетном формировании нескольких версий одних и тех же программ, отличающихся некоторыми важными параметрами, которые должны быть учтены непосредственно в тексте программы.",пакетном формировании,sys,0
"доступны и другие системы управления проектами, например, система timeline, представляющая собой очень хорошую систему для ведения единой базы проектов.",системы,sys,0
"тетрады представляют собой запись операций в форме четырех составляющих: операции, двух операндов и результата операции: <операция>(<операнд1>,<операнд2>,<результат>) тетрады составляют линейную последовательность команд, как в следующей записи арифметического выражения a=b c+d b 10 в виде последовательности тетрад: + b c d b 10 a = представление арифметического выражения языка си++ a = b c + d b 10 в виде дерева операций (один из возможных 51 1 b c t1 2 + t1 d t2 3 b 10 t3 4 - t2 t3 t4 5 = t4 ? a при вычислении выражения, записанного в форме тетрад, они вычисляются последовательно одна за другой, без каких-либо приоритетов.",арифметического выражения,sys,0
интегрированная среда разработки основной тенденций развития систем программирования является тенденция интеграции компонентов в единое системное окружение.,интеграции компонентов,sys,0
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,наличие,sys,0
"на одной машине в рамках разных процессов, при этом между клиентом и сервером возникают два промежуточных звена, а схема взаимодействия становится похожей на сокращенную схему удаленного обращения к методу (с переходниками, маршалингом и демаршалингом, но без выхода в сеть).",рамках разных,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",примером,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",таблица процедур таблица,sys,0
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",раздел,sys,0
текстовый редактор является наиболее частым начальным элементом процесса создания программы.,частым начальным элементом процесса,sys,0
вторая задача поиск эффективного эквивалента серьезно отличается от первой и требует других подходов и методов решения.,задача поиск эффективного эквивалента,sys,0
"сам результат может быть получен только при работе аппаратуры вычислительной системы, которой для работы должна быть передана программа в своем исходном или переработанном виде, а также входные данные, требующиеся программе при ее работе.",программе,sys,0
"семантическое действие, входящее в правило, обычно сводится к вычислению по i: expr : expr + term { = 1 + 3; } term ; по умолчанию выполняется простейшее семантическое действие: { = 1; } подпрограммы поддержки пишутся на том языке программирования, на котором будет сформирован синтаксический анализатор.",вычислению,sys,0
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",программирования,sys,0
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",программ,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",система аппаратной,sys,0
"сетевые службы имеют и другое важнейшее отличие от традиционных средств взаимодействия: для них удалось стандартизовать не только интерфейсы, как для процедур и методов классов, но и протоколы взаимодействия.",протоколы,sys,0
"если же такого просмотра оказывается недостаточно, а его часто оказывается недостаточно, организуются дополнительные просмотры отдельных фрагментов программы, причем выполняются они не по исходному тексту, а по его внутреннему представлению.",тексту,sys,0
"в настоящее время можно считать, что ни одна вычислительная система не воспринимает напрямую программы, подготавливаемые к исполнению людьми: все программы для получения результата их работы должны пройти предварительную обработку.",работы,sys,0
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",обработки,sys,0
"в ситуации с указанными языками программирования, чтобы считать if ключевым словом, а не именем массива, следует сканировать исходный текст в поисках правой (закрывающей) скобки, за которой следует буква, а не знак равенства.",равенства,sys,0
"в таких случаях отладочные операторы вставляются в условные операторы, которые выполняются при включении специального отладочного режима выполнения программ.",выполнения программ,sys,0
освобождение памяти для разных библиотек также происходит по- разному.,библиотек,sys,0
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",пометка,sys,0
"в случае выбора стековой дисциплины необходимо выделить некоторый фрагмент свободной памяти, на котором при запросах ресурсов памяти будет моделироваться работа со стеком областей памяти в стиле первым освобождается последний из ранее размещенных фрагментов памяти .",работа,sys,0
"символический отладчик dbx, позволяющий выполнять и отлаживать программы в пошаговом режиме, выполнять редактирование текстов программ непосредственно во время их отладки, получать доступ к значениям переменных и выполнять трассировку программ.",трассировку,sys,0
"особенно важны такие средства для тестовых сценариев, предусматривающих большое количество взаимодействий и наличие пиковых нагрузок на программы (например, для сетевых приложений с центральным серверным звеном).",пиковых нагрузок,sys,0
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",система,sys,0
"широко известны и свободно распространяемые системы управления версиями, среди которых лидером является система cvs (concurrent versions system).",управления версиями,sys,0
"введением функциональных объектов достигается даже больший эффект: функция sort() может сортировать объекты любой природы и сложности по свойственным только им критериям сравнения, причем сам алгоритм будет внешне выглядеть самым обычным образом.",функция,sys,0
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",ответственность сам,sys,0
", поэтому виртуальная исполняющая система, в принципе, может быть реализована на любой вычислительной системе.",система,sys,0
"(или - ), перед ними следует ставить символ обратной косой черты, например, класс символов [\.\-] состоит из двух символов .",символ обратной,sys,0
оптимизация вычисления логических выражений.,вычисления,sys,0
"генераторы тестов также способны генерировать тесты, содержащие ошибочные конструкции, что позволяет проверять диагностические средства трансляторов.",диагностические средства трансляторов,sys,0
возникли даже попытки стандартизовать глобальные свойства и интерфейсы между разными системными платформами на основе объектно- ориентированного подхода.,глобальные свойства,sys,0
"избежать подобных ошибок при работе с библиотеками удается только, если точно следовать правилам работы с внешними компонентами, которые подробно разъясняются их поставщиками.",подобных ошибок,sys,0
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",других компонентов системы программирования,sys,0
"однако в последнее время все чаще приходится видеть, что разработкой программ (тем более их сопровождением) занимаются целые коллективы разработчиков.",программ,sys,0
"широко используются системы suretrack и primavera project planner компании primavera, свободно распространяемая система openproj.",компании,sys,0
"другой стороной разрыва связи программы и библиотеки в момент их объединения является трудоемкость исправления программ в случае, если внесение изменений в библиотеку объясняется исправлением существовавшей в ней ошибки.",другой стороной,sys,0
"с этим можно было бы примириться, если бы разрывы между разработкой и сопровождением не приводили к разрыву между разработкой и использованием: приведенные схемы соответствуют, так называемым, одноразовым разработкам.",разрывы,sys,0
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",редактор,sys,0
"тексты программ, управляющих такими формами, генерируются автоматически с помощью визуального прототипа соответствующего компонента на основе используемых в системе библиотек компонентов.",компонентов,sys,0
"на одной машине в рамках разных процессов, при этом между клиентом и сервером возникают два промежуточных звена, а схема взаимодействия становится похожей на сокращенную схему удаленного обращения к методу (с переходниками, маршалингом и демаршалингом, но без выхода в сеть).",маршалингом,sys,0
"различаются два основных вида оптимизации: машинно-независимая оптимизация, то есть проведение преобразований исходной программы (в форме некоторого внутреннего представления), не зависящих от выходного языка компилятора (без учета конкретных свойств объектной машины).",учета конкретных свойств объектной,sys,0
в таком случае они не будут попадать и в файл готовой программы.,случае,sys,0
"современные системы программирования стараются комплектовать именно такими редакторами связей, использование которых снижает нагрузку на используемую память машины.",современные системы,sys,0
"библиотечные компоненты имеют общее программное ядро и проектируются на базе единых архитектурных принципов, что облегчает их совместное использование, сокращает время обучения для разработчика.",базе единых,sys,0
"так же, как и система программирования, система управления проектом ведет свою работу на протяжении всего жизненного цикла проекта.",программирования,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",завершение,sys,0
"начиная с версии 4.0 системы turbo pascal, появившейся примерно 15 лет назад, язык программирования, использованный в них, значительно отличается от того языка паскаль, классическое описания которого, дано его автором никлаусом виртом и другими в их многочисленных работах.",версии,sys,0
"однако и сервер не знает о том, что обрабатывал удаленный вызов.",удаленный вызов,sys,0
"в последнее время компания microsoft активно продвигает новое поколение систем программирования, объединяемых общим наименованием .net framework (управляемая среда для разработки и исполнения приложений).",поколение,sys,0
"при проведении таких действий производится компоновка данных в блоки, выравнивание данных на границы физических элементов памяти (байтов, слов, страниц), а также по регистрам специального назначения (векторным регистрам, регистрам устройства работы с вещественными числами).",памяти,sys,0
"даже если выражение из констант получить не удается, перестановка операций может привести к 58 экономии временных переменных, которые порождаются компилятором для хранения промежуточных результатов вычислений.",хранения промежуточных,sys,0
"наиболее известным программным продуктом, позволяющим осуществлять управление разработкой проектами, является компонент пакета офисных программ microsoft office, который носит название microsoft project.",разработкой проектами,sys,0
какие еще изменения произошли в то же самое время?,самое время,sys,0
"брокером объектов называют распределенные системы программного обеспечения, основанные на использовании понятия распределенного объекта и модели удаленного обращения к методам этого объекта, являющейся объектно-ориентированным расширением модели удаленного вызова процедуры.",брокером объектов,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",участков,sys,0
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,функций динамических,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",зависимости,sys,0
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",гиперссылок,sys,0
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",обязательный круг компонентов,sys,0
"современные библиотеки содержат также интерфейсную информацию, предназначенную для чтения автоматизированными системами программирования.",современные библиотеки,sys,0
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",начальные адреса,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,выделении лексем входного языка,sys,0
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",программ обычных,sys,0
"впоследствии, когда широко распространились принципы и приемы объектно-ориентированного программирования, система dce также была расширена и дополнена объектно-ориентированными языками.",приемы объектно-ориентированного,sys,0
недостатком деревьев является сложность их преобразования в линейную последовательность команд объектной программы.,сложность,sys,0
"слияние смежных циклов с независимыми внутренними операторами s1 и s2 позволяет снизить накладные расходы на организацию циклической работы: for (i = 0; i < n; i ++) { s1 } for (i = 0; i < n; i ++) { s1; s2 } for (i = 0; i < n; i ++) { s2 } замену циклов последовательностями операций можно выполнять для циклов, кратность которых известна уже на стадии компиляции.",циклов последовательностями операций,sys,0
"фактически ее решение приводит к тому, что с конечным автоматом, лежащим в основе лексического анализатора, ассоциируют не только входной язык, но и выходной.",конечным автоматом,sys,0
"выбрав любой из элементов иерархии, пользователь сразу видит в другом окне, предназначенном для отображения основного текста программы, тот фрагмент программы, где определяется выбранный элемент.",отображения,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",достаточной полнотой,sys,0
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",модели поведения,sys,0
"алгоритмы + структуры данных = программы , м.",структуры данных,sys,0
"занято свободно свободн занято о 71 выделяемый блок памяти уже не может состоять из фрагмента, нужного пользователю и (может быть) дополнительного небольшого расхода на хранение размера блока.",фрагмента,sys,0
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,окружением,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",именами блоков,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",распределение памяти распределение регистров,sys,0
"для достижения этого согласования необходимо вести базу данных проекта, что позволяет сохранять информацию о проекте и причинах принятия тех или иных решений при проектировании, а также контролировать его внутреннюю согласованность: изменения в составе требований должны приводить к указаниям на места проекта, в которых эти требования использованы.",информацию,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",границы,sys,0
"система управления версиями исходных текстов (source code control system, sccs), позволяющая отслеживать изменения, осуществляемые в текстах программ, работать с последними и более ранними версиями программ, восстанавливать предыдущие версии файлов и блокировать одновременное внесение исправлений в тексты со стороны нескольких пользователей.",управления версиями исходных,sys,0
"в свою очередь, разработчики библиотек, внося в библиотеки изменения, должны предпринимать меры, чтобы эти изменения минимальным образом сказывались на прикладных программах, основанных на предыдущих версиях библиотеки.",образом,sys,0
"например, для записей об активации процедур, которые содержат всю необходимую информацию для обеспечения выполнения процедур и возврата в точки вызова, в частности, фактические параметры, локальные, в том числе временные переменные, адреса возврата, значения регистров в момент входа в процедуру, ссылки на подобные записи объемлющих и вызвавших процедур.",ссылки,sys,0
"кроме того, для использования на этом этапе создается специальный инструментарий, в котором особую важность имеют средства контроля версий программных компонентов.",версий,sys,0
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",начале,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",компонентами,sys,0
набор стандартных системных модулей для работы с основными внешними устройствами эвм.,основными внешними устройствами эвм,sys,0
"различаются два основных вида оптимизации: машинно-независимая оптимизация, то есть проведение преобразований исходной программы (в форме некоторого внутреннего представления), не зависящих от выходного языка компилятора (без учета конкретных свойств объектной машины).",внутреннего представления,sys,0
однако простой демонстрацией текстов документов справочные системы современных систем программирования не ограничиваются.,текстов документов,sys,0
"главной программой является синтаксический анализатор, который запрашивает лексемы у лексического анализатора, начиная чтение оставшейся части исходного текста посимвольно и продолжая его до тех пор, пока не будет найдена самая длинная последовательность, соответствующая одному из регулярных выражений pi (это первое правило разрешения неоднозначностей при обработке регулярных выражений).",правило разрешения,sys,0
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",процесс,sys,0
"для компоновки программ используется часть инструментария, применяемого также на этапе программирования (прежде всего, редакторы связей).",этапе программирования,sys,0
"программы, которые обрабатывают тексты на таких языках, называются ассемблерами.",языках,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",трудности учет требований,sys,0
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",набора,sys,0
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",библиотеки,sys,0
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",состав,sys,0
"первые операционные системы могли позволить пользователям-программистам запускать компоненты систем программирования только в диалоге, последовательно, одну за другой, или собирая приказы на запуск этих компонентов в одном пакетном задании.",пользователям,sys,0
при этом запись на языке ассемблера может не сразу оказаться наиболее удобным представлением.,запись,sys,0
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,частью,sys,0
"компоновщик ld, представляющий собой классический редактор связей, позволяющий объединять оттранслированные модули и компоненты библиотек в единую программу, готовую к исполнению.",единую программу,sys,0
"благодаря этому системы delphi могут использоваться для решения широкого спектра задач, в которых обосновано применение универсального языка программирования, обеспечивающего контроль типов данных и развитые возможности для написания вычислительных задач (указатели, многомерные массивы, рекурсивные процедуры, встроенные функции).",универсального языка программирования,sys,0
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",систем,sys,0
"ситуация проста, если изменения были совершены в 94 разных участках файла, но может быть изменена одна и та же строка, что называется конфликтом.",ситуация проста,sys,0
"наиболее проста стратегия статического распределения памяти, в соответствии с которой память автоматически распределяется в статических областях компилятором.",стратегия статического распределения памяти,sys,0
работа с обратной польской записью в компиляторах подробно рассмотрена в пособии формальные грамма тики и языки.,формальные грамма тики,sys,0
"достигается это примененным методом описания той вычислительной машины, для которой должна осуществляться трансляция.",машины,sys,0
"задача семантического анализатора состоит в поиске всех мест, где нужно выполнить подобные преобразования типов и вставить во внутреннее представление явные команды преобразования.",явные команды преобразования,sys,0
"однако лучшим выходом из этой ситуации является усложнение алгоритма работы редактора связей, который обладает всей информацией, необходимой для отбора тех объектов модуля, которые реально используются в программе.",объектов модуля,sys,0
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",представление программы,sys,0
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",построения объектных,sys,0
существенным недостатком работы в таком режиме является необходимость постоянного присутствия квалифицированного пользователя системы на рабочем месте для постоянного запуска следующих и следующих компонентов.,запуска,sys,0
"в наилучшем случае переменная f совсем станет ненужной, значит, и память для нее тоже распределять не придется.",переменная f,sys,0
эта модель основана на объектно-ориентированном расширении понятия вызова процедуры и понятии о распределенном объекте.,распределенном объекте,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",спецификации,sys,0
"в программе lex введены несколько расширенные правила записи регулярных выражений, позволяющие оптимизировать их.",расширенные правила записи,sys,0
эффективность уплотнения свободных участков областей памяти (эффективность объединения свободных фрагментов во фрагменты суммарного размера).,эффективность уплотнения свободных участков,sys,0
"не существует наилучшей стратегии, так как полезность стратегии зависит от природы тестируемого объекта, природы ошибок объекта и уровня знаний о программе.",стратегии,sys,0
очень важным фактором развития системы eclipse является ее свободное распространение с полным набором исходных текстов.,распространение,sys,0
"во-первых, операции, необходимые для реализации высокоуровневых операций становятся на языках внутреннего представления программ более явными, что облегчает их обнаружение и оптимизацию.",оптимизацию,sys,0
"редактор связей должен заново прочитать все объектные модули (как откомпилированные, так и библиотечные), необходимые для формирования одной полной программы, и выявить в них все упоминания внешних объектов (процедур, функций, констант, переменных и т. д.).",процедур,sys,0
"качество оптимизации оказывается особенно высоким, если удается заменять не отдельные дорогие команды, а связки команд.",команды,sys,0
"однако модель удаленного обращения к методу допускает динамическое обнаружение новых объектов и построение обращений к ним в процессе работы, даже если для данного клиента не был создан никакой переходник.",обнаружение,sys,0
наличие общего корня библиотеки классов позволяет использовать полиморфизм для реализации общих алгоритмов и структур данных.,общих алгоритмов,sys,0
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",точности соответствующие интерфейсам реальных,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",терминах,sys,0
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",особенности,sys,0
удк ббк 3 isbn издательский отдел факультета вычислительной математики и кибернетики мгу им. м.,вычислительной математики,sys,0
"помощь в снижении трудоемкости формирования программных комплексов оказывает использование командных файлов, содержащих последовательности вызовов компонентов систем программирования.",формирования,sys,0
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",разработчик программы,sys,0
"результатом тестирования и отладки является доказательство, что все выявленные на данном комплекте тестов ошибки исправлены, а других ошибок не обнаружено.",тестов,sys,0
"результат проектирования диалога непосредственно виден на экране эвм, никакой компиляции не требуется.",проектирования диалога,sys,0
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",последовательностей символов,sys,0
обычно используют две стратегии оптимизации: оптимизация в целях повышения скорости работы программы и оптимизация в целях уменьшения размеров программ.,уменьшения,sys,0
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",исходным требованиям,sys,0
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",работы работа редактора связей,sys,0
"изменения обычно объединяются без проблем, а разработчики иногда забывают убрать блокировку, в обоих случаях явное блокирование приводит к ненужным задержкам.",случаях явное,sys,0
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",разницы,sys,0
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",запуска отдельных,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",составе современных систем программирования,sys,0
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",единой базы проектов,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",терминах входного,sys,0
некоторые известные своим широким применением в системах unix лицензированные программы имеют в системе gnu свои свободно распространяемые аналоги.,лицензированные программы,sys,0
"если системы ""клиент-сервер"" привели к стандартизации интерфейсов прикладного слоя, то их развитие позволило стандартизовать интерфейсы слоя управления ресурсами, а это привело к возможности интеграции в рамках одной системы самых разнородных информационных ресурсов.",интерфейсов прикладного,sys,0
"чтобы обобщенная функция сортировки sort(), которая должна упорядочивать целые числа по возрастанию, производила упорядочения целых чисел по убыванию, достаточно привлечь понятие функционального объекта: class intgreater { public: bool operator()(int x, int y) const { return x > y; } }; int main () { int x [1024]; ............ // инициализация sort ( x [0], x [1024]); // обычное упорядочивание sort ( x [0], x [1024], intgreater ()); // упорядочивание по убыванию } при таком использовании эффективность по скорости выполнения будет такой же, как и при написании сортировки целых чисел вручную, а реально может оказаться и выше за счет удачного выбора алгоритма сортировки.",алгоритма сортировки,sys,0
"выбрав любой из элементов иерархии, пользователь сразу видит в другом окне, предназначенном для отображения основного текста программы, тот фрагмент программы, где определяется выбранный элемент.",элементов иерархии,sys,0
проект этого компилятора возник на основе использования языка rtl (register transfer language) в качестве языка внутреннего представления программ.,проект,sys,0
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",поставщика,sys,0
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",ошибки,sys,0
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",ошибки,sys,0
проверка правил программирования 35 3.3.2.,проверка,sys,0
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",программ,sys,0
"проект gnu автором общего проекта мобильной (переносимой) операционной системы gnu (рекурсивный акроним gnu's not unix) и входящего в нее многоязыкового компилятора gcc является ричард столмен, сотрудник лаборатории искусственного интеллекта массачусетского технологического института, инициировавший работу в 1983 году.",системы,sys,0
"свойства расширяемости и настраиваемости позволяют ее пользователям самим создавать подобия систем программирования, подключая отдельно распространяемые модули или создавая такие модули своими силами.",расширяемости,sys,0
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",значений,sys,0
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",планировщика,sys,0
"в файле lex.l эти разделы следуют друг за другом именно в таком порядке, отделяясь друг от друга строками, состоящими из парных символов процента %% .",порядке,sys,0
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",теории,sys,0
"например, язык фортран своим стандартом определен через ядро и дополнительные слои, которые можно отключать при компиляции, борясь за эффективность программ, но (может быть) в ущерб удобству программирования.",стандартом,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",имен таблица процедур таблица,sys,0
"однако система com содержит все элементы, необходимые для построения распределенной системы, в частности, компонентную модель, библиотеки классов, которые могут быть импортированы для анализа структуры серверов сом, универсальный протокол обмена между клиентами и серверами и другие.",элементы,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",ресурсами системы программирования прикладное,sys,0
"точная граница между двумя динамическими зонами с разными стратегиями распределения памяти не предусматривается, вместо этого системная поддержка гарантирует проведение постоянного контроля за совокупным размером двух динамических зон.",стратегиями распределения,sys,0
тестирование программы есть процесс обнаружения дефектов в созданных программах.,обнаружения дефектов,sys,0
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",лексемы анализируемого,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",отношения,sys,0
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",реализации аспектах,sys,0
"регулярное выражение после прогностического оператора / указывает правый контекст 150 соответствия, который используется только для ограничения и не является частью шаблона.",шаблона,sys,0
внутри каждой из фаз также возможно циклическое повторение отдельных работ.,отдельных работ,sys,0
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",элемента,sys,0
"технология разработки распределенного программного обеспечения тоже может обладать прозрачностью настолько, насколько она позволяет разработчику забыть о том, что создаваемая система распределена, и насколько легко в ходе разработки можно отделить аспекты построения системы, связанные с ее распределенностью, от решения задач прикладной области, в рамках которых системе предстоит работать.",прикладной области,sys,0
средства автоматизации (хотя бы частичной) анализа результатов прогона тестов.,результатов,sys,0
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",параметров,sys,0
"ливерморские циклы представляют собой 24 программы (первоначально написанные на фортране) из состава производственных программ, разработанных ливеpмоpской национальной лабораторией имени лоуренса (сша).",национальной лабораторией имени,sys,0
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",запуск необходимых,sys,0
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",спиральная модель жизненного цикла,sys,0
"чтобы не вводить более в заблуждение программистское сообщество, разработчики стали называть новый вариант языка object pascal, а после внедрения в системы delphi новых сетевых технологий и очередной модернизации языка появилось наименование язык delphi.",заблуждение программистское,sys,0
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",правилам,sys,0
"обычно на этапе семантического анализа используются некоторые варианты синтаксических деревьев, построенных в результате синтаксического разбора.",варианты синтаксических,sys,0
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",других модулей,sys,0
"например: выполнение каждого оператора программы по меньшей мере один раз, выполнение каждой ветви программы по меньшей мере один раз, использование всех объектов данных, выполнение каждой команды объектной программы, полученной при компиляции.",использование,sys,0
"119 программа lint синтаксического контроля программ, написанных на языке программирования си.",программирования,sys,0
помощь в автоматизации графического интерфейса пользователя (graphical user interface gui).,автоматизации графического,sys,0
"при анализе программы из имеющихся в ней описаний, заголовков процедур, блоков, циклов и других структурных операторов извлекается информация, которая должна сохраняться для использования на последующих фазах компиляции.",использования,sys,0
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",структур данных,sys,0
"регулярные множества обозначаются с помощью регулярных выражений, которые рекурсивно вводятся следующим образом: 1.",помощью регулярных,sys,0
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",приложение,sys,0
"появились и элементы объектно-ориентированного программирования, в частности, привязка процедур и функций к 106 описаниям сложных объектов.",привязка,sys,0
"при этом в силе остается использование принципов объектно-ориентированного программирования, на которых основываются и современные серверы приложений и сетевые службы.",современные серверы,sys,0
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,подключения,sys,0
"скорость выполнения программы интерпретаторами во много раз меньше, чем при использовании компиляторов.",скорость выполнения программы,sys,0
"такой подход называется смешанной стратегией трансляции, это наиболее часто возникающая на практике ситуация.",стратегией,sys,0
"например, последовательность операторов s = 10; for (i = 0; i < n; i ++) a [i] = i s; может быть заменена последовательностью операций s = 10; t = 0; for (i = 0; i < 10; i ++) t = t + s, a [i] = t; вычисление значения a[i] тоже может потребовать индуктивной переменной, так как изменение значения переменной цикла на 1 может приводить к изменению адреса элемента массива на величину sizeof (a[0]), значит, a[i] a+sizeof(a[0]) i.",изменение значения переменной цикла,sys,0
командные интерпретаторы являются посредниками между пользователями и системными программами.,программами,sys,0
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",программа,sys,0
"к таким возможностям, прежде всего, можно отнести возможность прямого использования одного из самых популярных в мире языков программирования языка паскаль (хотя и в виде языков object pascal и delphi).",мире языков программирования,sys,0
"библиотеки языковой среды включают наиболее существенные и часто используемые компоненты времени выполнения, такие как формирование сообщений, обработка событий, управление памятью, поддержка функций даты и времени и т.",функций даты,sys,0
"сокращенный класс символов типа [a-z] означает регулярное выражение a b ... z. с использованием классов символов можно описать идентификаторы как строки, заданные регулярным выражением [a-za-z][a-za-z0-9].",использованием классов символов,sys,0
"любой генератор кода, независимо от формы внутреннего представления программ в компиляторе и вида выходного представления результатов компиляции, должен в своей работе решить две главные задачи: выполнить распределение памяти для объектов данных и фрагментов компилируемой программы, выполнить поиск и подбор семантических эквивалентов конструкциям внутреннего представления программ.",формы внутреннего представления программ,sys,0
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",формализованным правилам,sys,0
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",проектирования другого,sys,0
все это ставит перед разработчиками почти всех компиляторов задачи распределения регистров и оптимизации их использования.,компиляторов задачи,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",проектирования,sys,0
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",распределения,sys,0
в описании компонента реализация интерфейсов обычно не зафиксирована.,реализация,sys,0
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",количеству,sys,0
"как и компонентное программирование, визуальное программирование основывается на объектно- ориентированном подходе, поскольку с каждым наглядным элементом связан какой-нибудь класс или чаще целый набор классов, описывающих интерфейсы и реализации методов, с помощью которых осуществляется взаимодействие с данным элементом.",ориентированном подходе,sys,0
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",использование различных,sys,0
"в случае машинных команд распознавателем этой последовательности символов будет выступать целевая вычислительная система, для которой создается результирующая программа.",случае,sys,0
"проверка правил программирования многие современные компиляторы не только проверяют ограничения и требования, выставляемые семантикой языка, но также выполняют дополнительные проверки, способствуя выработке правильного стиля программирования.",программирования многие современные компиляторы,sys,0
"процессор bde поддерживает стандартный язык запросов sql, который позволяет выдавать запросы к серверам баз данных oracle, приложение delphi borland database engine (bde) драйвер paradox ...",серверам баз,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",триады оператор,sys,0
"111 библиотека vcl замечательна еще и тем, что она полностью построена на принципах объектно-ориентированного программирования и единой иерархии классов с общим базовым классом tobject, находящимся в основе этой иерархии.",классом,sys,0
"примерами интерпретируемых языков являются язык javascript , а также язык для решения задач искусственного интелллекта плэнер.",интерпретируемых языков,sys,0
некоторым недостатком имеющихся средств тестирования является их высокая стоимость и большие затраты времени на подготовку полноценных тестовых примеров.,недостатком,sys,0
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",процесса создания,sys,0
в описании компонента реализация интерфейсов обычно не зафиксирована.,компонента,sys,0
"примерами таких макропроцессоров могут служить препроцессоры, встроенные в компиляторы некоторых языков программирования (pl/1, си, си++, различные языки ассемблера).",языков,sys,0
"этот метод приводит к сокращению времени на передачу параметров и возвращаемого результата, на команды передачи управления, захвата памяти в стеке и другие вспомогательные операции.",параметров,sys,0
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",быстрого создания,sys,0
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,программ,sys,0
"важной дополнительной функцией генератора кода в таком процессе, заметно усложняющей весь процесс генерации в целом, является проведение одновременно с генерацией поиска стандартных последовательностей операторов по некоторым шаблонам и локальной оптимизации потока формируемых команд.",поиска стандартных последовательностей операторов,sys,0
"для этого из него удаляются цепочки нетерминальных символов, а также узлы, не несущие семантической нагрузки при генерации объектной программы (например, скобки, меняющие порядок операций): 50 грамматика исходного языка не имеет никакого влияния на то, какой узел в дереве будет операцией, а какой операндом.",влияния,sys,0
"в двухуровневых системах клиентские части чаще всего связаны с отображением 136 данных в виде, адекватно соответствующем конкретной прикладной области, назначение серверных частей выполнять основные прикладные программы и программы системной поддержки.",системах,sys,0
"20 библиотеки содержательная часть (средства ввода/вывода, наборы функций, для объектно-ориентированных языков классы и компоненты как системы классов) средства работы с библиотеками (например, работа с иерархиями классов), то есть библиотекари.",ориентированных языков классы,sys,0
во второй строке (с заголовком цикла) буквы d и o составляют ключевое слово do .,строке,sys,0
"при этом умножение b c будет выполнено только один раз, а не 10, как в исходном варианте.",исходном варианте,sys,0
"д. более развитые системы строят таблицы идентификаторов и констант, которые передаются компилятору, входящему в систему программирования.",таблицы,sys,0
"эта же технология используется для быстрого создания прототипа компилятора или при проведении процедуры раскрутки , когда сначала создается компилятор для некоторого языкового ядра (ограниченного варианта языка), а затем последовательными переходами от версии к версии создается серия компиляторов для все более и более полных вариантов языка.",серия компиляторов,sys,0
поддержка доступа к ресурсам осуществляется компонентами обеспечения связи с базами данных jdbc и подключения архитектур j2ca.,ресурсам,sys,0
"их появление заставило разработчиков предпринять меры по интеграции серверов, а для размещения программ, ответственных за эту интеграцию, наилучшим образом подходил промежуточный уровень трехуровневых систем.",размещения программ,sys,0
"требуется лишь написать процедуры реакции на события, возникающие при работе программы.",реакции,sys,0
"это обеспечивает возможность работать не только с локальными базами данных, то есть с базами, размещенными на тех же компьютерах, что и основная прикладная программа, но и с распределенными базами данных в системах с архитектурой клиент/сервер .",системах,sys,0
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",обеспечения,sys,0
"современные системы программирования для сетевых служб содержат одновременно и специальные средства генерации описания интерфейсов по исходным текстам на более традиционных языках программирования, например, по текстам на языке java.",средства генерации,sys,0
"всякий регулярный язык может быть одним из трех способов: с помощью регулярной (праволинейной или леволинейной) грамматики, с помощью конечного автомата, с помощью регулярного множества (так же, как и с помощью обозначающих их регулярных выражений).",грамматики,sys,0
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",данных,sys,0
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",требования,sys,0
"перед компиляторами это ставит задачу перераспределения последовательности вычислений так, чтобы рядом оказывались операции, не зависящие друг от друга (в противном случае, их нельзя будет выполнять параллельно).",случае,sys,0
"значительное облегчение пользователям приносят также библиотеки стандартных форм и элементов управления ( библиотеки компонентов ), а также развитая система оказания помощи пользователям, снабженная огромным количеством примеров.",библиотеки стандартных,sys,0
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",качествам отладчикам,sys,0
оптимизация в компиляторах переход от трансляции всей программы как целого к трансляции последовательности относительно независимых операторов (в синтаксическом плане в контекстно-свободных грамматиках операторы действительно не зависят друг от друга),контекстно-свободных грамматиках,sys,0
"они отличаются от динамических проверок, выполняемых в процессе работы программы.",проверок,sys,0
"все статические библиотеки подключаются к программам, готовящимся к выполнению, ровно один раз в момент формирования редактором связей полной программы.",момент формирования редактором связей,sys,0
"некоторые виды внутреннего представления больше подходят для фиксации структуры компилируемой программы, другие ориентированы на проведение оптимизирующих преобразований, третьи наиболее удобны при синтезе (генерации) результата компиляции.",фиксации структуры компилируемой программы,sys,0
проект этого компилятора возник на основе использования языка rtl (register transfer language) в качестве языка внутреннего представления программ.,языка внутреннего представления программ,sys,0
"первая часть выполняется после завершения синтаксического анализа очередной конструкции входного языка (процедуры, функции, блока операторов и т. п.) на 44 основе имеющихся в информационных таблицах данных.",синтаксического анализа очередной конструкции,sys,0
именно на примере си++ были продемонстрированы принципы объектно-ориентированного программирования и его достоинства.,принципы,sys,0
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",клиент,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",технических особенностей,sys,0
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",базирования,sys,0
"например, компилятор следует тестировать, подавая ему на вход не только правильные программы, но и программы, содержащие все возможные ошибки.",возможные ошибки,sys,0
для ее решения вводят временные ограничения на каждый из этапов жизненного цикла.,ограничения,sys,0
"более сложные варианты алгоритмов свертки принимают во внимание известные им значения переменных (например, сразу после присваивания) и даже функций.",алгоритмов,sys,0
в процессе интерпретации участвуют только две программы (программа интерпретатора и исходная программа) и два набора данных (входные данные программы и ее результат): 3.2.2.,процессе,sys,0
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,интеграция,sys,0
"серверы приложений и сетевые службы как и описанные ранее технологии построения распределенных систем com и dcom, стандарт corba не ставит целью зафиксировать какое-либо представление о том, какими должны быть системы программирования для распределенных систем.",службы,sys,0
фазы анализа программ.,анализа,sys,0
"при этом клиенты могут быть самыми разнообразными, они могут работать с разным аппаратным обеспечением, с разными операционными системами, с разными системами программирования.",системами,sys,0
проверка семантических соглашений и контекстных условий заключается в сопоставлении входных цепочек исходной программы с требованиями семантики языка программирования.,требованиями семантики языка,sys,0
"этого нельзя сделать даже символически, передав указание следующим компонентам системы программирования: редактор связей также не в состоянии будет определить этот адрес.",связей,sys,0
"кроме самой лексемы, 31 разработчику может быть предоставлена информация о ней, например, перечень доступных методов для типа или экземпляра класса, что избавляет от необходимости лишний раз заглядывать в документацию, и снижает вероятность ошибок при вводе текста.",необходимости,sys,0
критерии проектирования стандартных библиотек стандартная библиотека языка программирования является в настоящее время обязательной частью системной библиотеки.,библиотека языка программирования,sys,0
"полное владение ситуацией может обеспечить только операционная система, причем только в момент непосредственного занесения программы в память.",система,sys,0
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",присваиваниями,sys,0
"""unix network programming. networking apis"", prentice hall ptr, 2nd edition, 1998 (у. стивенс ""разработка сетевых приложений"", спб.",сетевых приложений,sys,0
"сетевые службы имеют и другое важнейшее отличие от традиционных средств взаимодействия: для них удалось стандартизовать не только интерфейсы, как для процедур и методов классов, но и протоколы взаимодействия.",службы,sys,0
"в основе такого анализа лежат идеи теории графов, связанные с анализом потока управления и потока данных.",анализом потока управления,sys,0
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,получения единого исполняемого модуля,sys,0
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,недостатка,sys,0
вторая задача поиск эффективного эквивалента серьезно отличается от первой и требует других подходов и методов решения.,вторая задача поиск,sys,0
"тексты программ, управляющих такими формами, генерируются автоматически с помощью визуального прототипа соответствующего компонента на основе используемых в системе библиотек компонентов.",помощью визуального,sys,0
это и есть принципиальное отличие интерпретатора от компилятора.,отличие,sys,0
"например, во многих языках программирования, где есть оператор перебора, все метки в конструкциях описания альтернатив case одного оператора должны быть уникальными, элементы в перечислениях enum также не должны повторяться.",описания альтернатив,sys,0
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",деятельности планировщика заданий,sys,0
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",подготовки программ,sys,0
библиотеки компонентов библиотеки компонентов представляют собой развитие понятия библиотек языков программирования на основе развития концепции классов.,понятия библиотек языков программирования,sys,0
"если алгоритмическая декомпозиция концентрируется на последовательности происходящих событий, то декомпозиция по объектам фиксируется на этих объектах и на событиях, происходящих в системе и вызывающих действия.",объектам,sys,0
"международной организаций по стандартам iso, институтом ieee и другими организациями, в том числе структурами правительства россии, утверждены стандарты, описывающие процессы, виды деятельности и задачи жизненного цикла программ и программно-аппаратных систем, а также результаты, достигаемые с помощью различных видов деятельности.",другими организациями,sys,0
альтернативы в правилах разделяются символами вертикальная черта .,символами вертикальная,sys,0
"проблемой при таком подходе является обработка недостижимых циклических ссылок: размер данного блока памяти счетчик ссылок или пометки занятости указатели, ссылающиеся на данный блок память, выделяемая по 72 при работе программ возможно возникновение сложных списочных структур, создающих закольцованные последовательности ссылок.",программ возможно возникновение сложных,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,существенной особенностью,sys,0
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",способу работы использованию специализированных,sys,0
"удаленный вызов процедур определяется как способ организации взаимодействия между компонентами, так и методику разработки этих компонентов.",организации взаимодействия,sys,0
для проведения таких преобразований разработан целый ряд формальных математических методов.,методов,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",отдельном модуле,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",запись,sys,0
"в любом случае за распределение и освобождение памяти несет ответственность сам автор программы, а компилятор лишь вставляет в нужные места программы обращения к нужным функциям.",программы обращения,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,определение занятости блоков,sys,0
"в современных условиях, когда библиотеки достигли высокой степени развития, доля компонентов библиотек в объеме готовых программ уже превышает половину этого объема.",степени развития,sys,0
"д. однако большинство реальных языков программирования допускает некоторые вольности при записи выражений, гарантируя, что в компиляторах будут предприняты меры по согласованию типов.",большинство реальных,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",таблице,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",графических форм,sys,0
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",объектов редактор,sys,0
"для каждой области редактор связей вводит свой начальный адрес (реальное его значение определяется на более поздних стадиях, вплоть до загрузки программы в оперативную память для выполнения).",начальный адрес,sys,0
"технология разработки распределенного программного обеспечения тоже может обладать прозрачностью настолько, насколько она позволяет разработчику забыть о том, что создаваемая система распределена, и насколько легко в ходе разработки можно отделить аспекты построения системы, связанные с ее распределенностью, от решения задач прикладной области, в рамках которых системе предстоит работать.",система,sys,0
"такой подход становится приемлемым только в тех случаях, когда над всеми другими соображениями по поводу способов записи программ превалируют соображения эффективности.",другими соображениями,sys,0
"единственное требование, поставленное в спецификации corba, заключается в том, что каждый брокер должен иметь хотя бы один репозиторий.",спецификации,sys,0
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,компонентов,sys,0
"в метаданные помещаются имя и версия сборки, сведения о локализации, данные о типах, включенных в сборку, список внешних файлов (сборок), от которых зависит данная сборка и т.",список внешних,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",операнды операций отношения,sys,0
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",внутренним кодированием,sys,0
"если на некотором линейном участке между двумя операциями присваивания какой-либо переменной значений (одинаковых или разных, не имеет значения) не было ни одного оператора, в котором использовалось бы первое значение переменной, это присваивание является бесполезным и может быть удалено из программы без изменения ее смысла.",значение переменной,sys,0
"эта система, сопровождаемая компанией ibm, работает с различными операционными системами (windows, unix/linux) и различными языками программирования (java, си, си++, кобол, uml).",различными языками,sys,0
"сплошные стрелки на этом рисунке указывают порядок работы компилятора, а пунктирные линии потоки информации.",работы,sys,0
"серверный переходник располагается на той же машине, где находится компонент-сервер.",компонент,sys,0
"вторая задача лексического анализатора есть выполнение действий, связанных с обнаружением и распознаванием той или иной лексемы.",выполнение,sys,0
такие контейнеры поддерживают развивающуюся технологию визуального программирования (в стиле drag drop ).,программирования,sys,0
"граф потока управления строится из узлов, которыми являются базовые блоки программы (последовательности команд, имеющие один вход и один выход), и дуг, соответствующих переходам от одного базового блока к другому при наличии некоторых входных для базового блока данных.",последовательности,sys,0
"в дополнение к описанию методов, в отличие от систем на базе удаленного вызова процедур, язык idl спецификации corba поддерживает множество объектно-ориентированных концепций, например, наследование и полиморфизм.",множество объектно,sys,0
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",лексемой начальные,sys,0
задачи семантического анализа 33 3.3.2.,задачи,sys,0
"во многих языках существуют данные, позволяющие ссылаться на другие данные указатели и ссылки.",данные указатели,sys,0
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,программа,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",вызове,sys,0
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",компонентов,sys,0
"трансляторы (используются также на других этапах разработки, например, при тестировании и отладке).",этапах,sys,0
"даже если выражение из констант получить не удается, перестановка операций может привести к 58 экономии временных переменных, которые порождаются компилятором для хранения промежуточных результатов вычислений.",вычислений,sys,0
"появились и элементы объектно-ориентированного программирования, в частности, привязка процедур и функций к 106 описаниям сложных объектов.",элементы объектно,sys,0
"базовый компонент z/os, называемый языковым окружением le, поддерживает единую универсальную среду выполнения для приложений, созданных на языках программирования высокого уровня cи, cи++, кобол, pl/1 и фортран.",высокого уровня,sys,0
"в тех случаях, когда такую формулу записать слишком сложно, в свободно распространяемые тексты программ компилятора можно добавить новый параметр, описывающий дополнительный режим трансляции.",случаях,sys,0
выбор зависит от размеров библиотек и количества обращений к их компонентам.,размеров,sys,0
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",основой,sys,0
"86 пустой базовый класс просто имитирует связь нижних уровней иерархии между собой, фактически же такая связь в данном случае отсутствует.",связь нижних,sys,0
надежность типов объектов есть надежность их изоляции от других объектов и надежность их защиты от ошибочного или злонамеренного разрушения.,защиты,sys,0
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",наличной памяти вычислительной системы,sys,0
"некоторые объекты данных программы могут при распределении памяти получить одинаковые адреса (например, две одинаковые строковые константы или две разные локальные переменные, никогда не используемые одновременно).",объекты данных,sys,0
"структурированные типы данных class, struct, union, sequence отображаются в структуры или классы си++.",структуры,sys,0
"в то же время эти стандарты направлены на решение задач, являющихся одновременно и задачами систем программирования обеспечение поддержки программных продуктов на протяжении их жизненного цикла.",решение,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",частности,sys,0
"блок считается свободным, если значение его счетчика ссылок стало равным нулю.",равным нулю,sys,0
однако простой демонстрацией текстов документов справочные системы современных систем программирования не ограничиваются.,текстов документов справочные системы,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,пометок,sys,0
фиксация помеченного файла не уничтожает историю этого файла к ней просто добавляется еще одна редакция ( не существует ).,помеченного файла,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",сопровождения,sys,0
"блокировки уместны в некоторых ситуациях, но их использование не всегда лучше, чем использование cvs без блокировок.",блокировки,sys,0
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",готовности другими,sys,0
стратегия структурного теста определяется структурой тестируемого объекта.,структурой тестируемого,sys,0
"спецификация corba позволяет пользователям систем, построенных на ее основе, организовывать свои программы в виде служб, предоставляющих услуги другим программам, то есть таким же службам или более традиционно построенным программам пользователей.",программам пользователей,sys,0
особенную помощь интеграция компонентов системы программирования приобретает при проведении отладки программ.,интеграция компонентов,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",скалярной переменной,sys,0
"например, режимы автоувеличения и автоуменьшения очень удобны для организации работы со стеком, а также при выполнении операций вида i:=i+1.",организации работы,sys,0
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",причины,sys,0
"их использование возможно только в тех случаях, когда над разработкой или сопровождением программного комплекса работает один программист (если таких программистов много, они должны работать последовательно друг за другом, сообщая друг другу обо всех сделанных ими изменениях в программах).",разработкой,sys,0
"однако обычно (по аналогии с библиотеками стандартных программ) вместе с базовой системой (самим брокером corba) могут распространяться программы служб, спецификации которых также стандартизованы.",брокером,sys,0
"в состав систем программирования стали включаться справочные системы, представляющие собой обширные базы данных с включенными в них сведениями по всем интересующим пользователей вопросам.",вопросам,sys,0
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",решений,sys,0
после его работы останется только осуществить прибавление начального адреса загрузки области памяти.,прибавление начального,sys,0
"не существует наилучшей стратегии, так как полезность стратегии зависит от природы тестируемого объекта, природы ошибок объекта и уровня знаний о программе.",природы ошибок объекта,sys,0
основная сложность проектирования определить основания для разделения общей системы на составляющие ее подсистемы.,разделения общей,sys,0
"если какой-то из операндов (или оба) в тетраде отсутствует (как в унарной операции), он заменяется признаком пустого операнда.",признаком пустого,sys,0
"тем более, подобные действия по формированию зон или блоков памяти, определению смещений в этих зонах, приписке регистров некоторым элементам данных, необходимы в компиляторах.",формированию,sys,0
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",система,sys,0
"например, в сервере приложений j2ee имеется специальный компонент, позволяющий создавать сервлеты, представляющие собой классы языка программирования java, реализующие обработку запросов по протоколу взаимодействия http и генерацию ответных сообщений в формате этого протокола, и взаимодействовать с созданными сервлетами.",сервлеты,sys,0
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",выбор поставщика,sys,0
"поскольку программы часто имеют несколько уровней, может оказаться, что наиболее трудоемкие функции вызываются неявно.",функции,sys,0
"эти программные комплексы не только работают, но и создаются в распределенном окружении, в котором разные программисты работают с разными системами программирования, создавая относительно независимые компоненты единой сложной программы.",комплексы,sys,0
"turbo pascal наиболее известной серией этих систем, продолжающейся до сих пор, является самая первая из них, связанная с программированием на языке паскаль в самой первой операционной системе персональных эвм ms dos.",операционной системе персональных эвм,sys,0
"в ответ на явные запросы пользователей, оформленные в виде явных обращений к системным функциям захвата памяти, обычно выделяются блоки одинакового размера: по мере освобождения таких блоков начинает формироваться список свободных блоков, дальнейшие запросы пользователей приводят к выделению блоков из списка свободных, что позволяет снизить требования к наличной памяти вычислительной системы.",запросы пользователей,sys,0
фазы оптимизации программ.,оптимизации,sys,0
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",классов,sys,0
"для pl/1 и современных версий языка фортран шаблон должен быть несколько усложнён, чтобы допустить поиск закрывающей скобки не только в той же строке, где записано слово if, но и в последующих строках.",версий,sys,0
"вместо модулей определений и реализации в языке turbo pascal появились модули, имеющие разделы интерфейса и реализации.",реализации,sys,0
"они получают на вход исправляемый текст и пакетное задание на редактирование, в котором указано, какие фрагменты текста надо из текста исключить, какие переставить местами, какие фрагменты следует заменить другой информацией, которая также включена в пакетное задание.",редактирование,sys,0
"например, требование обязательного описания идентификаторов в некоторых языках отсутствует.",требование,sys,0
"правильная организация процессов верификации, тестирования и документирования имеет особое значение для последующего внедрения, тиражирования и сопровождения создаваемых программ.",правильная организация процессов верификации,sys,0
"в последние комплекты поставок программного обеспечения все эти системы уже не входят, однако, то широкое распространение, которое они нашли, доказывает их высокие потребительские качества.",комплекты поставок программного,sys,0
"особенностью оптимизации логических выражений является то, что для получения их значений не всегда требуется проводить вычисление всего выражения до конца.",выражения,sys,0
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",процесс последовательного,sys,0
"п. эти компоненты доступны всем приложениям, независимо от используемого языка программирования.",программирования,sys,0
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,содержание понятия модуля наличие,sys,0
"определение занятости блока с помощью счетчика ссылок основано на постоянном контроле числа указателей, имеющихся в программе и содержащих ссылки на объекты, размещенные в данном блоке памяти.",счетчика,sys,0
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",программирования,sys,0
каждый отдельный полученный в результате модуль системы выполняет какой-либо один этапов работы общего системного процесса.,работы общего системного процесса,sys,0
"единственное, что можно утверждать, это, что все выявленные на данном комплекте тестов ошибки исправлены, а других ошибок не обнаружено.",комплекте тестов ошибки,sys,0
"такой выбор, с одной стороны, упрощает разработку компилятора, с другой стороны, ограничивает эффективность использования регистров.",разработку компилятора,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",системы программирования прикладное программное,sys,0
"набор служб, известный под этим собирательным именем, доступен с помощью стандартизованного прикладного программного интерфейса.",собирательным именем,sys,0
примером такой ситуации может служить внешне простая операция конкатенации строковых переменных в языке basic.,конкатенации строковых,sys,0
с помощью стандартов удается проводить оценку качества проводимых процессов и выискивать возможности для их улучшения.,стандартов,sys,0
"сервер выполняет саму отрисовку, управляет дисплеем, а клиент выполняет вычисления и связывается с сервером при необходимости отобразить их результаты на экране.",результаты,sys,0
"для оптимизации циклов разработаны и специальные методы: вынесение инвариантных вычислений из тела цикла, замена операций с переменными цикла, слияние, расщепление и развертывание циклов.",замена,sys,0
"заместитель объекта это переходник, ответственный за сокрытие распределенности.",сокрытие распределенности,sys,0
"компания microsoft, разрабатывая новую технологию .net, стала поддерживать многоязыковое программирование, то есть такой способ взаимодействия программ, при котором программы, написанные на разных языках, могут работать совместно.",взаимодействия программ,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,определение занятости,sys,0
"во время тестирования выявляется несоответствие программы исходным требованиям и спецификациям по тестам, то есть программам с заранее известными ответами.",программам,sys,0
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",программ,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",автономной отладке программ,sys,0
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",графических кнопок,sys,0
"пользователю при этом не надо ждать завершения интерпретации, чтобы увидеть первые исходна я програм интерпретат ор входные результа набтор данных no 2 программа no 1 программа no 2 набор данных no 1 35 результаты работы программы, он может получать результаты постепенно, по мере работы интерпретатора.",исходна,sys,0
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",огромным количеством,sys,0
"использование ado позволяет решить проблемы локализации данных (в частности, проблемы многоязыковых данных и шрифтов), и полностью отказаться от специализированного процессора bde, поскольку поддержка ado включена в типовую поставку операционной системы ms windows.",использование,sys,0
жизненный цикл программного продукта 5 1.1.,продукта,sys,0
"в частности, в ней имеются возможности использования прогностических операторов, позволяющих распознавать лексемы, в зависимости от той последовательности символов, которые располагаются за ними.",последовательности символов,sys,0
именно на примере си++ были продемонстрированы принципы объектно-ориентированного программирования и его достоинства.,принципы объектно-ориентированного,sys,0
"второй вариант обработки явных запросов пользователей основан на более гибком подходе, при котором размер блоков не фиксируется заранее, а выбирается на основе параметров запроса и хранится в самом блоке: это позволяет оставить почти без изменения работу системы при захвате памяти, но значительно усложняет ее при освобождении, а особенно при повторном выделении, которое может потребовать склеивания смежных блоков, а иногда и уплотнения занятых участков.",обработки явных запросов пользователей,sys,0
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",областей,sys,0
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",системой управления,sys,0
при этом программист имеет возможность пользоваться одними и теми же абстракциями.,абстракциями,sys,0
"конечно, такая возможность подразумевает введение некоторых ограничений на использование языка java (в частности, нельзя использовать параметры inout и out, все выходы в idl присутствуют в возвращаемом значении).",ограничений,sys,0
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",степени,sys,0
"изменения в библиотеках осуществляются системными средствами, не зависящими от разработчиков прикладного обеспечения, а эти изменения могут влиять на работу программ, которые сами не менялись перед этим продолжительное время.",изменения,sys,0
"этот компонент может присутствовать в конкретной программной системе или отсутствовать в ней (если взаимодействие через интернет не является задачей системы), благодаря точному описанию интерфейса и независимости от других компонентов сервера приложений, он 104 может даже использоваться в других системах, не обязательно написанных на языке java.",точному описанию интерфейса,sys,0
"если p и q регулярные выражения, обозначающие регулярные множества p и q, то p q, pq, p и p+ есть регулярные выражения, обозначающие регулярные множества p q, pq, p и p+.",выражения,sys,0
в рамках расширения возможностей и эффективности работы системы программирования delphi в составе операционной системы ms windows компания borland начала использование разработанной в microsoft технологии ado (activex data objects).,компания,sys,0
"многие программные компоненты системы unix получили возможность работать не только в режиме командной строки, но и в интегрированной среде x window.",строки,sys,0
visual basic наиболее известной и распространенной системой программирования компании microsoft является система visual basic.,системой программирования компании,sys,0
"включение в технологию .net именно исполняющей среды clr, а не виртуальной машины, работу которой надо интерпретировать специальными программами (аналогично jvm), существенным образом отличает технологию .net от технологии java.",программами,sys,0
эквивалентность программ означает совпадение их смысла с точки зрения (семантики) входного языка (для входной программы) и (семантики) выходного языка (для объектной программы).,выходного языка,sys,0
(всего около 20 языков программирования).,языков,sys,0
"в двухуровневых системах клиентские части чаще всего связаны с отображением 136 данных в виде, адекватно соответствующем конкретной прикладной области, назначение серверных частей выполнять основные прикладные программы и программы системной поддержки.",клиентские части,sys,0
"удобны координаторы make тем, что позволяют отслеживать зависимости в больших наборах файлов, составляющих цельную программу, что упрощает процесс сборки проектов.",цельную программу,sys,0
одним из примеров такой стандартизации является стандарт брокера объектов corba (common object request broker architecture).,стандарт брокера объектов,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",анализа программ фазы синтеза,sys,0
загрузка при обращении к компоненту библиотеки имеет определенные преимущества перед загрузкой при начале выполнения программы.,компоненту,sys,0
"к таким техническим характеристикам относят обычно две: объем памяти, необходимый для выполнения объектной программы (для хранения данных и самих команд программы), и скорость выполнения программы (ее быстродействие).",хранения данных,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",схемой классической,sys,0
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,наличие средств,sys,0
visual basic наиболее известной и распространенной системой программирования компании microsoft является система visual basic.,компании,sys,0
"тексты программ, управляющих такими формами, генерируются автоматически с помощью визуального прототипа соответствующего компонента на основе используемых в системе библиотек компонентов.",визуального прототипа соответствующего компонента,sys,0
"важность данного метода постоянно возрастает с ростом возможностей вычислительной аппаратуры, но метод имеет ряд выраженных недостатков.",возможностей вычислительной,sys,0
"избежать подобных ошибок при работе с библиотеками удается только, если точно следовать правилам работы с внешними компонентами, которые подробно разъясняются их поставщиками.",поставщиками,sys,0
"к документации программных продуктов следует относить не только пользовательскую документацию, предназначенную для фазы использования, но также техническую документацию для сопровождения программных продуктов.",сопровождения программных,sys,0
все свои действия он выполняет непосредственно в окне редактирования исходного текста программы.,исходного текста,sys,0
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",компиляторами ошибок,sys,0
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",особенностей,sys,0
"\..\exe\cpu -x0x86 -d-s0xfe000 -b0x4005ab -e0x400900 -zt40.n40 - k0x0 -f0x0 -ot40.se0 del t40.?40 особенно эффективна работа в режиме командного файла при выполнении массовых подготовок версий одной программы, отличающихся каким-либо важным параметром, например, паролем, блокирующим несанкционированный запуск готовой программы.",выполнении массовых подготовок версий,sys,0
"многие интегрированные отладчики позволяют проводить редактирование текста программы прямо в процессе отладки, что подразумевает еще более тесное взаимодействие текстовых редакторов, компиляторов и отладчиков.",редактирование текста программы,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",програм,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,систем,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",свойства,sys,0
"редакторы называются текстовыми, поскольку они предназначены для редактирования и хранения в архиве любой текстовой информации от текстов программ до документации по вычислительной системе.",редактирования,sys,0
"разработка распределенных программ особую важность приобретают системы программирования, когда возникает необходимость использования их для создания распределенных программ.",создания,sys,0
распределение памяти и регистров.,памяти,sys,0
полученный документ можно затем редактировать в диалоговом режиме с помощью текстового процессора word.,помощью текстового,sys,0
"выработанная система понятий должна использоваться для описания объектов автоматизации, их сходства с другими объектами и их своеобразия, то есть отличий от объектов, остающихся за рамками осуществляемого проекта разработки программного обеспечения.",осуществляемого проекта разработки программного,sys,0
передача управления за пределы синтаксических конструкций должна производиться только в разрешенные места программы.,разрешенные места программы,sys,0
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",программ,sys,0
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",процессе,sys,0
чтобы в компилятор lex компилятор си программа анализатора исходная программа lex lex.l lex.c входной поток символов программы lex.c программа анализатора последовательн ость лексем программы 147 класс символов поместить непосредственно сам символ .,символов программы,sys,0
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",системами типа клиент,sys,0
"используя справочную службу, клиенты могут искать не только объекты, реализующие тот или иной интерфейс, но также объекты, свойства которых имеют заданные значения (например, книги по си).",службу,sys,0
"текстовые редакторы интегрируются также с отладчиками, для которых они позволяют расставлять в программе точки останова, показывать значения переменных во время приостановки работы программы и выполнять другие полезные действия.",программы,sys,0
"с другой стороны скелетон защищает от проблем распределенности сервер, поэтому сервер может разрабатываться так, как если бы вызовы к нему поступали из локального окружения.",проблем распределенности,sys,0
"в программе lex введены несколько расширенные правила записи регулярных выражений, позволяющие оптимизировать их.",записи регулярных,sys,0
"например, в сервере приложений j2ee для поддержки взаимодействия и презентации предназначены сервлеты, а также язык тегов jsp и его интерпретатор, прикладной интерфейс для работы с языком xml (jaxp прикладной программный интерфейс для синтаксического анализа текстов на языке xml), система электронной почты, служба аутентификации и авторизации.",презентации,sys,0
"система, обеспечивающая трансляцию и выполнение cil- программ, называется виртуальной исполняющей системой (virtual execution system ves).",системой,sys,0
"во-первых, он сильно зависит от особенностей конкретной архитектуры вычислительной машины.",особенностей конкретной,sys,0
"118 кроме командных интерпретаторов, система unix содержит весь комплекс программ, обеспечивающих жизненный цикл программ: редактор, компиляторы с библиотеками классов, процедур и функций, необходимых для компоновки программ, подготовленных системой программирования, стандартный ассемблер и компоновщик.",цикл программ,sys,0
"распределенная система это набор независимых компьютеров, представляющихся их пользователям единой объединенной системой.",системой,sys,0
не все языки программирования допускают такое построение интерпретаторов.,программирования,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",каторы,sys,0
"наконец, в распределенных программных системах (серверах приложений, сетевых службах) под компонентом часто понимают определенную функционально законченную и самодостаточную структурную единицу программы, обладающую точно описанным интерфейсом и даже некоторую независимость от других подобных компонентов этого же программного комплекса.",самодостаточную структурную единицу программы,sys,0
"при проектировании сложных программных комплексов их обычно стараются разложить на некоторое число относительно небольших подсистем, каждую из которых можно отладить независимо от других ( автономно ).",небольших подсистем,sys,0
во время сопровождения программного продукта можно наблюдать продолжение контактов пользователей и разработчиков.,продолжение,sys,0
"перед компиляторами это ставит задачу перераспределения последовательности вычислений так, чтобы рядом оказывались операции, не зависящие друг от друга (в противном случае, их нельзя будет выполнять параллельно).",вычислений,sys,0
"по способу использования области памяти делятся на глобальные и локальные, а по способу распределения на статические и динамические.",способу использования области памяти,sys,0
"в последнее время стал применяться метод удаленной работы с документацией: сами тексты документов не тиражируются и не передаются пользователям, но становятся доступными через интернет.",удаленной работы,sys,0
"компилятор gcc получает основную информацию об объектной вычислительной машине из ее описаний, выполненных в виде алгебраических формул каждой из машинных команд.",основную информацию,sys,0
"как и все сложные системы, сложные программы имеют иерархическую структуру, а уровни их иерархии отражают различные уровни абстракции, следующие друг из друга, но не тождественные друг другу.",уровни абстракции,sys,0
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",хода выполнения объектной программы,sys,0
"уровни приоритетов лексем определяются порядком их перечисления в разделе объявлений, поэтому приоритет унарного минуса из приведенного примера оказывается выше приоритета умножения и деления.",унарного минуса,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",определения,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,выделении лексем входного,sys,0
"наиболее известным программным продуктом, позволяющим осуществлять управление разработкой проектами, является компонент пакета офисных программ microsoft office, который носит название microsoft project.",управление,sys,0
"поиски путей снижения зависимости программного обеспечения от конкретных параметров окружения, в котором это обеспечение разрабатывается и функционирует, привело к попыткам выносить описания параметров окружения, а также режимов формирования и использования программ за пределы этих самых программ.",снижения зависимости программного,sys,0
"распределенные системы обычно строятся с использованием служб, предоставляемых другими системами, и в то же время сами часто являются составными элементами или поставщиками служб для других систем, поэтому при разработке распределенных часто систем используется компонентный подход.",систем,sys,0
"процессор bde поддерживает стандартный язык запросов sql, который позволяет выдавать запросы к серверам баз данных oracle, приложение delphi borland database engine (bde) драйвер paradox ...",стандартный язык запросов,sys,0
"полное владение ситуацией может обеспечить только операционная система, причем только в момент непосредственного занесения программы в память.",полное владение ситуацией,sys,0
"для выполнения программ, основанных на динамическом подключении библиотек, необходимо принимать специальные меры, гарантирующие наличие всех необходимых библиотечных компонентов в составе той вычислительной системы, 83 где предполагается исполнять эти программы.",выполнения,sys,0
"программным продуктом называется такая программа, которая работает без авторского присутствия в рамках некоторого набора операционных сред.",набора операционных,sys,0
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",программам пользователей,sys,0
"удаленный вызов процедур определяется как способ организации взаимодействия между компонентами, так и методику разработки этих компонентов.",организации,sys,0
"с одной стороны это означает, что объекты нельзя использовать вне тех блоков, где они описаны и видны, с другой стороны, это ослабляет требования уникальности имен, поскольку объектам, относящимся к разным блокам, можно давать одинаковые имена, не внося при этом путаницы в программу.",разным блокам,sys,0
"генерация перемещаемого объектного модуля с внутренним кодированием на машинном языке обеспечивает возможность раздельной компиляции файлов, из которых строится текст программы.",компиляции файлов,sys,0
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",генерация,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",универсальную обработку,sys,0
"в этом смысле термин транслятор является самым общим и обозначает, как компиляторы и ассемблеры, так и интерпретаторы.",термин транслятор,sys,0
эта информация собирается на основе обработки операторов описания объектов данных программы и пополняется при компиляции исполняемых операторов программы на основе семантических правил входного языка.,объектов,sys,0
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",редактор,sys,0
"на вход генератора кода поступает внутреннее, промежуточное представление компилируемой программы, полученное на начальных стадиях компиляции, осуществляющих анализ исходной программы и построение информационных таблиц компилятора.",построение информационных таблиц компилятора,sys,0
"эта оптимизация обычно выполняется на специально выделенной фазе компиляции (пометка ii на рисунке), машинно-зависимая оптимизация, то есть преобразование программы на выходном языке компилятора.",выходном языке компилятора,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",программных проектах,sys,0
средства отладки и тестирования программ любая полезная программа может содержать ошибки даже после ее передачи пользователям.,пользователям,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",единицам исходной программы адрес,sys,0
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",серьезных проблем,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",фазы оптимизации программ,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",системы,sys,0
"проблемой при таком подходе является обработка недостижимых циклических ссылок: размер данного блока памяти счетчик ссылок или пометки занятости указатели, ссылающиеся на данный блок память, выделяемая по 72 при работе программ возможно возникновение сложных списочных структур, создающих закольцованные последовательности ссылок.",пометки,sys,0
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",промежуточное внутреннее представление компилируемой,sys,0
иногда программисты оставляют отладочные операторы в текстах программ и после передачи этих программ пользователям.,программисты,sys,0
"компилятор должен проверять, что во всех местах использовано одинаковое имя.",одинаковое имя,sys,0
средства автоматизации (хотя бы частичной) анализа результатов прогона тестов.,анализа результатов,sys,0
некоторым недостатком имеющихся средств тестирования является их высокая стоимость и большие затраты времени на подготовку полноценных тестовых примеров.,большие затраты времени,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",регистровой структуры,sys,0
"сопровождение является зеркальным отражением разработки и внутри себя содержит все этапы фазы разработки (от определения требований до документирования, внедрения и тиражирования).",отражением разработки,sys,0
"известным недостатком динамических библиотек является зависимость программного обеспечения от библиотечных объектов, непосредственно не связанных с этим обеспечением, то есть зависимость программ пользователей от неизвестных им динамических библиотек.",известным недостатком динамических библиотек,sys,0
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",первом шаге,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",терминах,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",средство редактирования файлов,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",определения,sys,0
возможны два принципиально различных метода организации взаимосвязи лексического и синтаксического анализа последовательный и параллельный.,метода,sys,0
"однако сетевые службы выглядят гораздо более симметричными, чем клиенты и сообщения запрашивающий службу поставщик службы промежуточны й слой, основанный на асинхронных wsdl поставщика службы компилятор wsdl (клиентская компилятор wsdl (серверная сторона) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон генератор wsdl промежуточны й слой, основанный на асинхронных 142 серверы в более традиционных распределенных системах.",поставщика службы,sys,0
"средства стандартной библиотеки должны (требования по свойствам компонентов) быть важными и удобными для использования всеми программистами для решения всех задач, для которых предназначена библиотека (структуры данных и алгоритмы для работы с ними должны иметь общезначимый характер стек, очередь, список, ..., сортировка, поиск, копирование, ...);",работы,sys,0
"этап компоновки есть этап формирования полной программы или программного комплекса из некоторого количества автономно запрограммированных, автономно отлаженных и автономно протестированных компонентов.",этап компоновки,sys,0
"этот метод приводит к сокращению времени на передачу параметров и возвращаемого результата, на команды передачи управления, захвата памяти в стеке и другие вспомогательные операции.",сокращению,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",остановки,sys,0
"теоретические основы проектирования компиляторов , м.: мир , 1979).",основы проектирования,sys,0
"например, во многих языках программирования, где есть оператор перебора, все метки в конструкциях описания альтернатив case одного оператора должны быть уникальными, элементы в перечислениях enum также не должны повторяться.",описания,sys,0
"как и компонентное программирование, визуальное программирование основывается на объектно- ориентированном подходе, поскольку с каждым наглядным элементом связан какой-нибудь класс или чаще целый набор классов, описывающих интерфейсы и реализации методов, с помощью которых осуществляется взаимодействие с данным элементом.",набор классов,sys,0
36 в настоящее время практически все компиляторы языков программирования просматривают сам исходный текст только один раз.,настоящее время,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",программирования свойства,sys,0
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",одиночные команды,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",языках,sys,0
многое определяется в этом процессе реализацией компилятора и особенностями вычислительной архитектуры.,процессе реализацией,sys,0
"кроме общей системы типов cts и общего языка внутреннего представления программ, в общеязыковую инфраструктуру входят следующие спецификации: 116 extensible metadata - расширяемые метаданные.",спецификации,sys,0
"методы формальной спецификации программ: языки msc и sdl , м.: изд-во диалог- мгу , 1998 (шифр в библиотеке мгу: 5вг66 м-238).",методы формальной спецификации программ,sys,0
"в настоящее время программные компоненты могут выступать как в роли клиента, так и в роли сервера.",настоящее время программные компоненты,sys,0
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",источников затруднений,sys,0
"визуальным называется такой стиль программирования, который предусматривает создание приложений с помощью наглядных средств.",помощью,sys,0
"приложения могут использовать репозиторий для поиска, редактирования или удаления idl-интерфейсов.",приложения,sys,0
"многие современные языки, среди которых си, си++, java, предлагают другую концепцию программы, основанную на понятии единицы трансляции .",концепцию,sys,0
интегрированная среда разработки 17 3.,интегрированная среда разработки,sys,0
"службы предоставляют функциональность, обычно 137 необходимую большинству объектов, например, сохранность, управление жизненным циклом и безопасность.",большинству,sys,0
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",соответствующие интерфейсам реальных удаленных,sys,0
"благодаря возможностям фильтрации событий и вывода информации о них на экран разработчик может выделять те участки программ, которые вызывают снижение производительности, и видеть полную картину взаимодействия процессов.",картину взаимодействия,sys,0
"текстовые редакторы интегрируются также с отладчиками, для которых они позволяют расставлять в программе точки останова, показывать значения переменных во время приостановки работы программы и выполнять другие полезные действия.",полезные действия,sys,0
"редактор связей в состоянии провести и другой контроль контроль соответствия между объектным модулем, в котором упоминается некоторое внешнее имя (используется объект с этим именем), и объектным модулем, в котором данный объект определен.",другой контроль контроль,sys,0
в результате для клиента удаленный вызов процедуры выглядит как обращение к обычной функции.,вызов процедуры,sys,0
"качество оптимизации оказывается особенно высоким, если удается заменять не отдельные дорогие команды, а связки команд.",качество,sys,0
генерация кода 57 3.4.,генерация,sys,0
средства отладки и тестирования программ любая полезная программа может содержать ошибки даже после ее передачи пользователям.,передачи,sys,0
"программа заместителя содержит в себе описание методов, предоставляемых реализацией объекта.",описание методов,sys,0
"в ситуации с указанными языками программирования, чтобы считать if ключевым словом, а не именем массива, следует сканировать исходный текст в поисках правой (закрывающей) скобки, за которой следует буква, а не знак равенства.",языками,sys,0
"поэтому справочными системами в настоящее время снабжаются не только системы программирования и другие компоненты системного программного обеспечения, но также и системы прикладных программ.",справочными системами,sys,0
проверки единственности.,единственности,sys,0
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",рынке систем программирования,sys,0
"компилятор стремится снизить совокупную стоимость программы, то есть заменить дорогие команды более дешевыми , но дающими тот же результат.",стоимость,sys,0
"введением функциональных объектов достигается даже больший эффект: функция sort() может сортировать объекты любой природы и сложности по свойственным только им критериям сравнения, причем сам алгоритм будет внешне выглядеть самым обычным образом.",обычным образом,sys,0
"однако синтаксис языков программирования может быть описан грамматиками без неоднозначностей (т.к. любая правильная программа должна иметь единственную структуру), т.е. языки программирования являются детерминированными.",правильная программа,sys,0
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,функции загрузчика,sys,0
эта модель основана на объектно-ориентированном расширении понятия вызова процедуры и понятии о распределенном объекте.,понятия,sys,0
"такой подход позволяет компаниям поставщикам систем программирования своевременно вносить все необходимые исправления, поддерживая актуальность документации.",актуальность,sys,0
"библиотеки языковой среды включают наиболее существенные и часто используемые компоненты времени выполнения, такие как формирование сообщений, обработка событий, управление памятью, поддержка функций даты и времени и т.",компоненты времени выполнения,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",вызове функции число,sys,0
"открытость системы есть использование синтаксических и семантических правил, основанных на открытых стандартах.",системы,sys,0
40 в подобных случаях интерпретацию программы также нельзя проводить непосредственно после ее компиляции.,подобных случаях,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",редактор реального,sys,0
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",проблем,sys,0
"как и при использовании ""классического"" удаленного вызова процедуры, при удаленном обращении к методу не только клиент не знает о том, что взаимодействует с удаленным сервером, но и сервер не знает, что обращение к нему осуществлено со стороны.",удаленным сервером,sys,0
виды текстовых редакторов 21 3.1.2 .,виды текстовых,sys,0
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",последовательность,sys,0
"например: выполнение каждого оператора программы по меньшей мере один раз, выполнение каждой ветви программы по меньшей мере один раз, использование всех объектов данных, выполнение каждой команды объектной программы, полученной при компиляции.",команды объектной,sys,0
"ни одна операция линейного участка не может быть выполнена большее число раз, чем смежные с нею операции.",операция линейного,sys,0
"например: выполнение каждого оператора программы по меньшей мере один раз, выполнение каждой ветви программы по меньшей мере один раз, использование всех объектов данных, выполнение каждой команды объектной программы, полученной при компиляции.",оператора,sys,0
"для программных продуктов разрабатывается документация, необходимая для пользователей, чтобы они могли работать с программным продуктом в целях решения собственных задач, и разработчиков, модифицирующих продукт.",продуктом,sys,0
"современные версии спецификации corba допускают и обратные отображения: например, в стандарте corba 3 прямо предусмотрено проведение отображения записи интерфейсов на языке java в записи интерфейсов на idl.",отображения,sys,0
"в случае выбора стековой дисциплины необходимо выделить некоторый фрагмент свободной памяти, на котором при запросах ресурсов памяти будет моделироваться работа со стеком областей памяти в стиле первым освобождается последний из ранее размещенных фрагментов памяти .",областей памяти,sys,0
в объектно-ориентированных языках программирования к такому перераспределению могут приводить некоторые операции над экземплярами объектов.,операции,sys,0
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",важнейших свойств современной системы,sys,0
"полное владение ситуацией может обеспечить только операционная система, причем только в момент непосредственного занесения программы в память.",момент непосредственного занесения программы,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",устранение,sys,0
"тем самым, при отождествлении входной строки с шаблоном возможно не полное совпадение, а совпадение с выделением фактических параметров.",параметров,sys,0
"тем самым, удается добиться некоторой общности, то есть возможности сортировать некоторые объекты (доступные с помощью указателей, передаваемых функции сортировки в качестве других параметров) не только по возрастанию, но и по убыванию и, вообще, по произвольным критериям.",других параметров,sys,0
"в этих случаях лексический анализатор продолжает поиск лексем в тексте, пока действие, соответствующее одной из них, не возвратит управление синтаксическому анализатору.",случаях,sys,0
"простейший вариант удаление недостижимых фрагментов, выделяемых с помощью препроцессорных операторов.",помощью препроцессорных,sys,0
"в настоящее время доступно множество специальных средств автоматизированного тестирования программ, обеспечивающих управление тестированием, высокую скорость тестирования и повторяемость тестов.",настоящее время доступно множество,sys,0
"при их отсутствии операции выполняются слева направо с учетом приоритетов, наивысший из которых имеет левоассоциативная операция итерации, средний операция конкатенации, низший операция объединения множеств.",учетом приоритетов,sys,0
"контроль и координация календарного плана работ: работа с единой базой проекта, идентификация хода проекта по графикам и диаграммам, рассылка сообщений участникам проекта, генерация отчетов о выполнении работ.",генерация,sys,0
"основные требования к системам программирования важнейшим из требований, которые предъявляются системам программирования, является требование согласованности интерфейсов и непротиворечивости результатов работы компонентов этих систем.",работы,sys,0
"брокером объектов называют распределенные системы программного обеспечения, основанные на использовании понятия распределенного объекта и модели удаленного обращения к методам этого объекта, являющейся объектно-ориентированным расширением модели удаленного вызова процедуры.",использовании,sys,0
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",запросу,sys,0
"особенно важны такие средства для тестовых сценариев, предусматривающих большое количество взаимодействий и наличие пиковых нагрузок на программы (например, для сетевых приложений с центральным серверным звеном).",сценариев,sys,0
"такое свойство триад приводит к необходимости использования в компиляторах специальных алгоритмов распределения памяти для хранения 52 промежуточных результатов, поскольку в отличие от тетрад, какие- либо явные временные переменные в триадах не используются.",компиляторах специальных,sys,0
"другие макропроцессоры считают макровызовом произвольную строку текста, соответствующую некоторому заранее определенному шаблону, причем правила описания шаблонов могут достаточно сложными, а сами шаблоны могут быть параметризованными.",текста,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",внутреннее представление,sys,0
"библиотеки шаблонов построены на основе параметрического полиморфизма, то есть параметризации типов, использования типовых параметров.",типовых параметров,sys,0
"таким образом, проектирование и программирование диалога с пользователем сводится к определению и установке значений свойств некоторых компонентов форм и программированию обработчиков событий.",компонентов форм,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",системы,sys,0
для удобства записи регулярных выражений часто вводятся классы символов.,удобства записи регулярных выражений,sys,0
"в свою очередь, разработчики библиотек, внося в библиотеки изменения, должны предпринимать меры, чтобы эти изменения минимальным образом сказывались на прикладных программах, основанных на предыдущих версиях библиотеки.",библиотеки изменения,sys,0
26 основное преимущество интегрированной среды в удобстве работы ее пользователя.,работы,sys,0
сама компания borland также продолжила развитие собственной системы программирования в части поддержки работы с базами данных.,компания,sys,0
"в настоящее время это объектно-ориентированный язык, обладающий всеми возможностями других, более новых языков программирования, но оставшийся весьма простым для изучения, благодаря простым изобразительным средствам.",средствам,sys,0
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",внутреннего представления,sys,0
"получая на вход исходную программу как последовательность символов входного языка ( цепочку ), компилятор должен проверить, принадлежит ли она входному языку, а также определить правила, по которым эта последовательность строилась.",входному языку,sys,0
"кроме технических целей ричард столмен, недовольный ничем не ограниченной коммерциализацией системных программ и самого процесса системного программирования, ставил перед собой цель создать бесплатно распространяемую систему программирования, которая могла бы оказаться серьезным конкурентом дорогостоящим коммерческим системам.",технических целей,sys,0
системы программирования компании borland фирма borland внесла существенный вклад в создание современных представлений о системах программирования персональных эвм.,представлений,sys,0
при использовании динамических объектов говорят о динамическом связывании объекта данных и области памяти.,динамическом связывании объекта,sys,0
"; предоставлять программисту нетривиальные средства, на которые он может рассчитывать, заботясь о переносимости программ, например, средства работы со списками, функции сортировки, потоки ввода/вывода; предоставлять основу для расширения собственных возможностей, в частности, соглашения и средства 88 поддержки, позволяющие обеспечить операции для данных, имеющих определяемые пользователями типы, в том же стиле, в котором обеспечиваются операции для встроенных типов (например, ввод/вывод); служить основой и теоретическим базисом других библиотек.",базисом других,sys,0
"более сложные варианты алгоритмов свертки принимают во внимание известные им значения переменных (например, сразу после присваивания) и даже функций.",внимание известные,sys,0
"в общем случае, для разных библиотек можно выбирать разные методы.",библиотек,sys,0
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",макрогенераторы компиляторы,sys,0
другой вид трансляторов компиляторы.,вид трансляторов компиляторы,sys,0
"проверка правил программирования многие современные компиляторы не только проверяют ограничения и требования, выставляемые семантикой языка, но также выполняют дополнительные проверки, способствуя выработке правильного стиля программирования.",правил,sys,0
"однако лучшим выходом из этой ситуации является усложнение алгоритма работы редактора связей, который обладает всей информацией, необходимой для отбора тех объектов модуля, которые реально используются в программе.",отбора,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",возникновению,sys,0
"в состав этой системы входят совокупность приемов и решений rup (rational unified process), распространяемая не только в виде пособий и книг, но и в виде гипертекста с помощью страниц интернета; программные средства rational suite, состоящие из средств управления требованиями (rational requisite pro); средств визуального проектирования (rational rose), основанные на формальном языке моделирования uml (unified modeling language), ставшем всеобщим стандартом описания сложных систем (например, систем рабочих потоков workflow).",описания,sys,0
программа lex позволяет проводить и еще более сложный анализ лексем.,программа,sys,0
"обычно списки используются для представления синтаксических деревьев таких структур, вершинами которых являются операции, а листьями операнды.",листьями,sys,0
"первоначально эта программа была создана как компонент операционной системы unix, однако сейчас имеется множество ее вариантов, работающих в различных операционных системах, в том числе, в системах ms-dos и microsoft windows.",компонент,sys,0
оптимизация в компиляторах переход от трансляции всей программы как целого к трансляции последовательности относительно независимых операторов (в синтаксическом плане в контекстно-свободных грамматиках операторы действительно не зависят друг от друга),последовательности,sys,0
в некоторых случаях перестановка операций может приводить к потере точности вычислений.,перестановка,sys,0
наличие общего корня библиотеки классов позволяет использовать полиморфизм для реализации общих алгоритмов и структур данных.,корня библиотеки классов,sys,0
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",состав,sys,0
на этой стадии совершенно не принимаются во внимание аспекты взаимодействия данной программы с другими программами комплекса.,программами комплекса,sys,0
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",оптимиза тор,sys,0
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",поддержку процесса,sys,0
"построение лексических анализаторов по регулярным выражениям разработка теории формальных грамматик привела к разработке практических систем, осуществляющих автоматический разбор текстов, записанных на формальных языках, по формализованным правилам.",выражениям разработка теории формальных,sys,0
"другое требование полнота набора системных компонентов, является важным, но вторичным.",системных компонентов,sys,0
"наиболее известным программным продуктом, позволяющим осуществлять управление разработкой проектами, является компонент пакета офисных программ microsoft office, который носит название microsoft project.",пакета,sys,0
"проблемой при таком подходе является обработка недостижимых циклических ссылок: размер данного блока памяти счетчик ссылок или пометки занятости указатели, ссылающиеся на данный блок память, выделяемая по 72 при работе программ возможно возникновение сложных списочных структур, создающих закольцованные последовательности ссылок.",списочных структур,sys,0
"эффективность решений, заложенных в язык промежуточного представления, доказывается тем, что трансляцию в этот язык, а значит и включение в общую исполняющую среду clr, выполнили еще некоторые компании, создавшие трансляторы с языков фортран, кобол и др.",фортран,sys,0
"расщепление цикла может оказаться полезным в случае наличия в теле цикла условных операторов: for (i = 0; i < n; i ++) if (x < y) {if (x < y) { s1; } for (i = 0; i < n; i ++) { s1; } else { s2; } } else for (i = 0; i < n; i ++) { s2; } развертывание цикла позволяет в определенных случаях уменьшить число проверок условий завершения цикла, а также создать предпосылки для последующего распараллеливания выполнения операций: for (i = 0; i < n; i ++) for (i = 0; i < n; i += 2) { a [i] = b [i] c [i]; } {a [i] = b [i] c [i]; a [i+1] = b [i+1] c [i+1]; } кажущиеся правильными преобразования не всегда ведут к построению эквивалентной программы.",операторов,sys,0
"если алгоритмическая декомпозиция концентрируется на последовательности происходящих событий, то декомпозиция по объектам фиксируется на этих объектах и на событиях, происходящих в системе и вызывающих действия.",последовательности,sys,0
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",тексту,sys,0
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,интегрированных средах разработки,sys,0
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",пользователями,sys,0
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",клиент-,sys,0
"таблицы lalr(1)-анализатора весьма компактны, что обеспечивает эффективность алгоритма анализа.",эффективность алгоритма анализа,sys,0
"загрузка динамических библиотек в оперативную память, освобождение этой памяти, а также связывание основной программы и ее данных с компонентами библиотек (программами и данными) выполняется динамическим загрузчиком.",загрузка динамических,sys,0
примером такой ситуации может служить внешне простая операция конкатенации строковых переменных в языке basic.,ситуации,sys,0
карпов системы программирования удк ббк печатается по решению редакционно- издательского совета факультета вычислительной математики и кибернетики мгу им. м.,удк ббк,sys,0
"концепция стандартных модулей, предложенная в языке под названием turbo pascal, некоторыми своими чертами напоминает подход, описанный в языке модула-2 с помощью модулей определений и модулей реализации.",подход,sys,0
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",цепными присваиваниями перестановка,sys,0
"линейные участки имеются в любой программе и чаще всего содержат последовательности вычислений, состоящие из арифметических выражений и операторов присваивания значений переменным программы.",линейные участки,sys,0
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",свойств,sys,0
внедрением называется работа по привлечению заказчика к использованию созданного программного продукта.,привлечению заказчика,sys,0
"этот режим приводит к дополнительным затратам на связывание модулей, но раздельная компиляция имеет так много преимуществ (например, с ее помощью удается строить библиотеки программ), что компенсирует все эти затраты.",преимуществ,sys,0
"циклом в программе называется любая последовательность участков программы, которая может выполняться повторно.",участков,sys,0
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",библиотек,sys,0
"работа с контекстными справками не может заменить систематического изучения важнейших документов (например, описания языка), но значительно облегчает работу опытным пользователям, желающим быстро вспомнить знакомую им информацию.",описания,sys,0
"таким образом, либо исходный базовый класс оказывается пустым (то есть присущей абсолютно всем элементам иерархии общей функциональности выделить не удается), либо строится абстрактный класс с огромным набором виртуальных функций.",абстрактный класс,sys,0
"в то же время эти стандарты направлены на решение задач, являющихся одновременно и задачами систем программирования обеспечение поддержки программных продуктов на протяжении их жизненного цикла.",обеспечение поддержки,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",использование,sys,0
"при проектировании сложных программных комплексов их обычно стараются разложить на некоторое число относительно небольших подсистем, каждую из которых можно отладить независимо от других ( автономно ).",проектировании сложных,sys,0
"выбор подсистем часто зависит от разработчика и существенно влияет как на сложность процесса проектирования, так и на конечное качество программного продукта.",конечное качество программного продукта,sys,0
наличие промежуточного уровня (для обозначения которого часто используется англоязычный термин middleware) существенно расширяет возможности распределенных систем.,термин,sys,0
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",перечнями,sys,0
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",программ,sys,0
"например, требование обязательного описания идентификаторов в некоторых языках отсутствует.",языках,sys,0
редактор vi позволяет также осуществлять поиск по тексту и контекстную замену.,замену,sys,0
во время каждой итерации система автоматически контролирует приближение реализации к описанным вариантам использования.,вариантам,sys,0
"часто компоненты поставляются в виде двоичных модулей, что позволяет сделать их более независимыми от конкретных систем программирования и использовать в распределенном системном окружении, но противоречит стремлению сделать эти компоненты настраиваемыми (гибкими).",окружении,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",времени,sys,0
"только когда поставщик службы заканчивает выполнение своей работы, он выдает ответ клиенту.",поставщик службы,sys,0
"регулярное выражение после прогностического оператора / указывает правый контекст 150 соответствия, который используется только для ограничения и не является частью шаблона.",правый контекст,sys,0
"решают подобные проблемы созданием систем иерархий, то есть построением наборов иерархических деревьев ( леса ), которые между собой не связываются никакими отношениями (по такому принципу построены библиотека stl и стандартная библиотека языка си++).",систем,sys,0
системы управления версиями программных комплексов 72 3.9.,версиями,sys,0
"сопровождение является зеркальным отражением разработки и внутри себя содержит все этапы фазы разработки (от определения требований до документирования, внедрения и тиражирования).",тиражирования,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",проблемы модификации,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",трудности учет требований выравнивания,sys,0
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",арифметических выражений,sys,0
"21 важную роль в получении высококачественного программного продукта играют средства, применяемые на этапах отладки и тестирования программ.",получении высококачественного,sys,0
"набор средств и инструментов, известный под этим собирательным именем, предоставляет службы верхнего уровня, необходимые приложениям, а не индивидуальным объектам.",инструментов,sys,0
системы программирования компании ibm 4.6.1.,программирования,sys,0
"например, во многих языках программирования, где есть оператор перебора, все метки в конструкциях описания альтернатив case одного оператора должны быть уникальными, элементы в перечислениях enum также не должны повторяться.",конструкциях,sys,0
"чтобы иметь техническую возможность взаимодействовать с некоторым сервером, все, что требуется знать программисту, это idl- интерфейс этого сервера.",возможность,sys,0
"некоторые современные теории предсказывают, что по мере приближения к теоретическому минимуму числа ошибок исправления, вносимые в программы, могут приводить к появлению даже большего числа ошибок, чем было ранее: во время пользовательского тестирования результаты работы программы проверяются с прикладной точки зрения.",зрения,sys,0
"в двухуровневых системах клиентские части чаще всего связаны с отображением 136 данных в виде, адекватно соответствующем конкретной прикладной области, назначение серверных частей выполнять основные прикладные программы и программы системной поддержки.",назначение серверных,sys,0
"обработка ведется на основе концепции конечного автомата, диаграмма состояний которого описывается регулярными выражениями.",диаграмма,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",формулирования требований,sys,0
"таким образом, проектирование и программирование диалога с пользователем сводится к определению и установке значений свойств некоторых компонентов форм и программированию обработчиков событий.",программирование диалога,sys,0
", а также для переменных, размеры которых меняются в процессе выполнения программы (объекты типа vector из библиотеки stl).",программы,sys,0
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",случая,sys,0
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",системе,sys,0
"перспектива может иметь много видов, но только один редактор, являющийся центральным объектом рабочего стола.",объектом рабочего,sys,0
"работа в режиме командной строки предполагает последовательное обращение к тем или иным компонентам системы программирования и передачу им параметров в виде последовательностей символов, входящих в эту командную строку.",компонентам,sys,0
"проверка правил программирования многие современные компиляторы не только проверяют ограничения и требования, выставляемые семантикой языка, но также выполняют дополнительные проверки, способствуя выработке правильного стиля программирования.",программирования,sys,0
"функциональность на этом этапе проверяется только в смысле ее влияния на важнейшие технические параметры программы, например, на время реакции системы на запрос пользователя.",влияния,sys,0
"в стандартной библиотеке языка программирования си эта функция (в языке си функция сортировки реализует алгоритм быстрой сортировки и называется qsort()) получает в качестве параметра функцию сравнения сортируемых элементов, а не использует для сравнения какую-либо операцию языка си, например, операцию < .",сортировки,sys,0
"граф потока управления строится из узлов, которыми являются базовые блоки программы (последовательности команд, имеющие один вход и один выход), и дуг, соответствующих переходам от одного базового блока к другому при наличии некоторых входных для базового блока данных.",управления,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",программы адрес,sys,0
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",способность,sys,0
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",алгоритму,sys,0
основные компоненты компилятора и фазы компиляции информационные таблицы.,фазы компиляции информационные,sys,0
"""технология corba для профессионалов"".",профессионалов,sys,0
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",компонентами систем программирования,sys,0
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,системах,sys,0
"результат проектирования диалога непосредственно виден на экране эвм, никакой компиляции не требуется.",проектирования,sys,0
"на этапе лексического анализа разрешить все эти проблемы абсолютно невозможно там уникальность имен определяется только их записью как последовательности букв, цифр и других разрешенных символов.",проблемы,sys,0
"с другой стороны, библиотеки сами формируются компиляторами, поскольку реализации библиотечных элементов описываются на языках программирования.",реализации,sys,0
"потери памяти, возникающие из-за выравнивания, можно легко оценить, сравнив значения размеров сложных объектов (структур, массивов) с суммой размеров составляющих их элементов.",суммой размеров,sys,0
"внутри основного окна расположены различные панели, называемые видами, которые отображают консольный вывод, текущий проект в виде дерева объектов и т.",виде дерева,sys,0
повторяемость тестов важна для повторных проверок после внесения исправлений.,внесения исправлений,sys,0
"в тех случаях, когда синтаксическому дереву соответствует последовательность операций, порождающая в результате команды объектной программы, такое дерево называют деревом операций.",последовательность операций,sys,0
однако разработчик системы (компания microsoft) объявила эту технологию устаревшей и активно продвигает другой подход технологию .net.,технологию,sys,0
приводит к потере информации о взаимосвязи этих операторов.,потере,sys,0
"профилировщик аналогичен программному логическому анализатору, способному выдавать огромные объемы информации.",огромные объемы,sys,0
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",версиями,sys,0
краткий обзор современных систем программирования 4.1.,обзор современных систем программирования,sys,0
второй главной работой компилятора является генерация результирующей программы.,главной работой,sys,0
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",процедур,sys,0
"статические библиотеки статические библиотеки фактически представляют собой процедуры и функции, встраиваемые внутрь программ, подготавливаемых системами программирования на этапе обработки 80 этих программ.",этапе обработки,sys,0
системы программирования ос unix и linux с самого начала разработки системы unix она рассматривалась в качестве переносимой (мобильной) операционной системы.,качестве переносимой,sys,0
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",синтаксическим анализатором компилятора,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",триады,sys,0
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",качестве,sys,0
"это максимально возможная общность для языка си: void qsort (const void base, size t nmemb, size t size, int ( compar)(const void , const void )); однако учитывая, что затраты на вызовы функции при проведении каждого элементарного сравнения элементов могут в некоторых случаях становиться слишком большими, надо стараться найти более эффективное решение.",элементарного сравнения,sys,0
"в последние комплекты поставок программного обеспечения все эти системы уже не входят, однако, то широкое распространение, которое они нашли, доказывает их высокие потребительские качества.",распространение,sys,0
схемы работы трансляторов степень преобразования программ трансляторами может быть различной.,работы трансляторов степень,sys,0
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",части метода,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",предыдущие этапы этап постановки,sys,0
"в состав этой системы входят совокупность приемов и решений rup (rational unified process), распространяемая не только в виде пособий и книг, но и в виде гипертекста с помощью страниц интернета; программные средства rational suite, состоящие из средств управления требованиями (rational requisite pro); средств визуального проектирования (rational rose), основанные на формальном языке моделирования uml (unified modeling language), ставшем всеобщим стандартом описания сложных систем (например, систем рабочих потоков workflow).",стандартом описания сложных систем,sys,0
массивы отображаются в определения массивов си++.,определения массивов,sys,0
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",систем,sys,0
"выделение памяти в соответствии с дисциплиной произвольного распределения памяти может происходить явно самим разработчиком программы, а может осуществляться компилятором автоматически, то есть неявно.",соответствии,sys,0
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",автоматизация,sys,0
основные компоненты систем программирования 12 2.,систем,sys,0
"именно поэтому унарный минус, определяемый предпоследней альтернативой в приведенном примере, получает наивысший приоритет, по сравнению с другими операторами.",приоритет,sys,0
"во всех таких случаях компилятор должен сформировать команды, обеспечивающие своевременное выделение памяти, необходимой для выполнения операции, а также последующее освобождение этой памяти.",своевременное выделение,sys,0
"можно встретить системы команд с аппаратными возможностями по вычислению тригонометрических функций, с одновременным вычислением частного и остатка в целочисленном делении, с выполнением некоторых команд в режиме автоувеличения или автоуменьшения, при которых к операнду прибавляется (или вычитается из него) единица до или после использования его значения в операции.",системы,sys,0
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",уровня,sys,0
для сетевых служб протоколы их функционирования в информационной сети описываются на специально для этого разработанном языке описания протоколов.,служб протоколы,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",новой системы программирования,sys,0
"подобные указания имеют для компиляторов рекомендательный характер, но часто помогают получить хорошо оптимизированные программы.",характер,sys,0
при этом запись на языке ассемблера может не сразу оказаться наиболее удобным представлением.,представлением,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",управлением системы,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",входной поток,sys,0
"до сих пор этот режим работы в системе unix (и в системах, основанных на ней или функционально и организационно близких) остается актуальным.",системе,sys,0
"в приведенном выше примере задано, что приоритет сложения равен приоритету вычитания, но меньше приоритета умножения и деления.",сложения равен,sys,0
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",программ,sys,0
все эти проблемы обычно решаются в рамках каждой конкретной вычислительной системы по-разному (возможно даже хранение данных в упакованном виде с распаковкой их значений при попытке доступа к ним).,данных,sys,0
эта модель основана на объектно-ориентированном расширении понятия вызова процедуры и понятии о распределенном объекте.,расширении понятия вызова процедуры,sys,0
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",собственные варианты программ,sys,0
"доступны и другие системы управления проектами, например, система timeline, представляющая собой очень хорошую систему для ведения единой базы проектов.",управления,sys,0
"удаленный вызов процедуры клиентом реализуется как обычный, локальный вызов определенной функции в клиентском переходнике.",клиентском переходнике,sys,0
при этом простым включением объектно-ориентированных языков в состав систем программирования дело обычно не ограничивается.,систем,sys,0
"имеются в виду объекты, имеющие объектную ссылку corba и доступ к межброкерному протоколу iiop (internet inter-orb protocol).",объектную ссылку,sys,0
большинство этих файлов рабочие копии исходных текстов.,файлов рабочие,sys,0
"конфликты разрешаются применением по умолчанию двух следующих правил: порядок правил имеет значение и, в случае конфликта, нужным правилом будет считаться правило, стоящее в списке правил перед конфликтующим.",конфликты,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",редактор текста исходной,sys,0
"необходимо сначала подключить к программе недостающие фрагменты, одни из которых (может быть) надо сначала откомпилировать, а другие (может быть) добавить из набора уже откомпилированных программ, либо из библиотек.",программ,sys,0
"функциональность на этом этапе проверяется только в смысле ее влияния на важнейшие технические параметры программы, например, на время реакции системы на запрос пользователя.",запрос пользователя,sys,0
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",интегрированная среда разработки,sys,0
"все вариации конфигураций можно получать, используя развитые языки управления заданиями современных операционных систем, например, возможности условного вызова программ системы программирования или значения переменных системного окружения.",системы,sys,0
"решают подобные проблемы созданием систем иерархий, то есть построением наборов иерархических деревьев ( леса ), которые между собой не связываются никакими отношениями (по такому принципу построены библиотека stl и стандартная библиотека языка си++).",проблемы созданием,sys,0
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",профилировщики справочные,sys,0
профилировщик позволяет разработчику точно настраивать поведение системы в условиях реальной эксплуатации и визуализировать события для быстрого обнаружения проблемы.,быстрого обнаружения проблемы,sys,0
"эти компоненты работают лишь с относительными адресами, которые отсчитываются от некоторой условной точки (обычно она совпадает с началом разделов памяти, отводимых для объектов самого первого модуля, поданного для компоновки редактору связей).",объектов самого первого модуля,sys,0
такое преобразование выполняется загрузчиками.,преобразование,sys,0
чтобы в компилятор lex компилятор си программа анализатора исходная программа lex lex.l lex.c входной поток символов программы lex.c программа анализатора последовательн ость лексем программы 147 класс символов поместить непосредственно сам символ .,лексем программы,sys,0
"при управлении неявных запросов памяти в состав выделяемого блока приходится дополнительно включать специальный счетчик числа указателей, связанных с данным блоком, либо специальный признак занятости блока ( пометку ): в блок обычно включается также полный список всех указателей, связанных с объектами данного блока.",пометку,sys,0
"более того, возможно и такое взаимодействие сетевых служб, когда они одновременно являются клиентами одних служб и серверами запросов других служб.",клиентами,sys,0
иногда по результату первых же операций можно заранее определить окончательный результат.,результату,sys,0
на этапе написания программ (кодирования) в системах программирования нужно иметь средства автоматизации (пусть частичной) написания программ.,программирования,sys,0
"лучше иметь синтаксически ориентированные текстовые редакторы, которые обеспечивают подсветку служебных слов, обеспечивают работу с функциональной клавиатурой, позволяющей вводить сложные языковые конструкции одним нажатием на клавишу, проверяют баланс скобок.",клавиатурой,sys,0
"именно поэтому на фазе разработки программных комплексов обязательно проводятся мероприятия по тестированию программ, которое представляет собой процесс сравнения результатов работы программ с заранее рассчитанными результатами выполнения тестовых примеров.",тестовых примеров,sys,0
"когда изменения будут проверены, их надо зафиксировать в репозитории и сделать доступными остальным.",репозитории,sys,0
"иногда по наличию операторов присваивания одним переменным значений других переменных удается исключить использование некоторых переменных, заменив их использованием их копий (метод носит название распространение копий ).",название,sys,0
одни и те же службы могут попеременно выступать в обеих ролях быть и клиентами и серверами.,службы,sys,0
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",целому числу машинных слов,sys,0
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",перевода программ,sys,0
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",объектных модулей старого формата,sys,0
"например, после записи содержимого некоторого регистра в память может сразу следовать команда загрузки этого регистра из того же элемента памяти (проблема считывания после записи ).",команда загрузки,sys,0
"сокращенный класс символов типа [a-z] означает регулярное выражение a b ... z. с использованием классов символов можно описать идентификаторы как строки, заданные регулярным выражением [a-za-z][a-za-z0-9].",идентификаторы,sys,0
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",командной строкой оператора,sys,0
иногда программисты оставляют отладочные операторы в текстах программ и после передачи этих программ пользователям.,пользователям,sys,0
"такой способ работы подразумевает высокую квалификацию пользователя системы программирования, который должен точно знать все компоненты конкретной системы программирования, необходимые для формирования нужной ему программы, необходимые им параметры, а также правильную последовательность их вызова.",конкретной системы,sys,0
"простейшим методом распределения регистров является их жесткое распределение, например, только для хранения фактических параметров процедур и/или важнейших переменных.",фактических параметров процедур,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",параметров,sys,0
"turbo pascal наиболее известной серией этих систем, продолжающейся до сих пор, является самая первая из них, связанная с программированием на языке паскаль в самой первой операционной системе персональных эвм ms dos.",известной серией,sys,0
"обработанная по этой технологии программа может быть исполнена на любой платформе, имеющей виртуальную машину jvm.",программа,sys,0
"в остальном схема формирования сетевой службы напоминает аналогичные схемы формирования серверной и клиентской частей в системах, основанных на моделях удаленного вызова процедур и удаленного обращения к методам.",схемы формирования,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",соответствии,sys,0
процесс подготовки большого числа почти одинаковых программ проводится в пакетном режиме работы операционной системы без оперативного контроля со стороны оператора и даже без его присутствия.,подготовки,sys,0
"чтобы иметь техническую возможность взаимодействовать с некоторым сервером, все, что требуется знать программисту, это idl- интерфейс этого сервера.",техническую возможность,sys,0
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",версиями программных,sys,0
проверка семантических соглашений и контекстных условий заключается в сопоставлении входных цепочек исходной программы с требованиями семантики языка программирования.,требованиями семантики языка программирования,sys,0
"однако имеется некоторый анализ (определение требований) проектировани е написание текста компоновка верификация, тестирование, отладка документирова ние внедрение тиражирование версия в1ерсия в2ерсия 3 17 уже обязательный круг компонентов, лакуны в котором недопустимы.",в1ерсия в2ерсия,sys,0
"однако в его заголовке имеется бит, указывающий на то, что файл относится к технологии .net.",технологии,sys,0
"регрессивные тесты, повторяемые после каждого исправления программы, позволяют убедиться, что функциональность программы, не связанная с внесенным исправлением, не затронута этим исправлением и не утрачена из-за него.",внесенным исправлением,sys,0
"методы вспомогательных объектов, включаемых в состав клиентского и серверного переходников, которые строятся для реализации удаленного обращения к методу, имеют интерфейсы в точности соответствующие интерфейсам реальных удаленных объектов.",состав клиентского,sys,0
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",управления сборкой,sys,0
эффективность уплотнения свободных участков областей памяти (эффективность объединения свободных фрагментов во фрагменты суммарного размера).,участков,sys,0
"прозрачностью программной системы называется целый комплекс ее свойств, благодаря которым обеспечивается сокрытие (упрятывание) особенностей реализации системы, например, разницы в способах представления данных и доступа к ресурсам, местоположения составных частей и параллельного использования системы несколькими пользователями одновременно.",реализации,sys,0
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",интерпретации пар,sys,0
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",вход текстов,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",стадии,sys,0
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",выполнения программ,sys,0
"методы формальной спецификации программ: языки msc и sdl , м.: изд-во диалог- мгу , 1998 (шифр в библиотеке мгу: 5вг66 м-238).",изд-во диалог-,sys,0
"множество из одного элемента алфавита {a, a v} есть регулярное множество.",элемента алфавита,sys,0
множество из одного пустого элемента { } есть регулярное множество.,элемента,sys,0
системы программирования компании borland 83 4.2.1 .,компании,sys,0
"современные методы и средства проектирования информационных систем , http://www.citforum.ru/database/case/index.shtml. л.",информационных систем,sys,0
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",первичных требований,sys,0
однопроходный компилятор 30 3.3.2 .,однопроходный компилятор,sys,0
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",иерархию устройств,sys,0
"граф потока управления строится из узлов, которыми являются базовые блоки программы (последовательности команд, имеющие один вход и один выход), и дуг, соответствующих переходам от одного базового блока к другому при наличии некоторых входных для базового блока данных.",базовые блоки,sys,0
"training kit mcad/mcsd, microsoft corporation, 2002 ( разработка windows-приложений на microsoft visual basic .net и microsoft visual c# .net .",приложений,sys,0
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",требования,sys,0
"поддержка интеграции приложений обеспечивается специальными компонентами ejb, интерфейсом именования и каталогов jndi, службой сообщений и транзакционным интерфейсом.",именования,sys,0
"в ситуации с указанными языками программирования, чтобы считать if ключевым словом, а не именем массива, следует сканировать исходный текст в поисках правой (закрывающей) скобки, за которой следует буква, а не знак равенства.",знак равенства,sys,0
"например, не требуется записывать историю изменений объектных и выполняемых файлов, потому что их содержимое всегда может быть воссоздано из исходных файлов.",историю изменений,sys,0
"сервер выполняет саму отрисовку, управляет дисплеем, а клиент выполняет вычисления и связывается с сервером при необходимости отобразить их результаты на экране.",саму отрисовку,sys,0
"vba для создания интегрированных приложений компанией microsoft предлагается система, называемая visual basic for applications или vba.",создания,sys,0
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",участков,sys,0
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",особенностями,sys,0
"операция линейного участка может оказаться избыточной, если ранее на этом же линейном участке уже выполнялась идентичная операция, и никакой операнд данной операции не был изменен в промежутке между двумя идентичными операциями.",операция,sys,0
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",основе стандарта,sys,0
однопроходный компилятор разобранная схема работы компилятора является концептуальной.,разобранная схема,sys,0
"тем самым (хотя и с некоторой потерей эффективности), системы фирмы borland могут работать с любыми базами данных, которые подключаются с помощью odbc: сам по себе программный продукт odbc по своему назначению и своим функциям аналогичен процессору bde, но разработан компанией, конкурирующей с компанией borland на рынке систем программирования компанией microsoft.",эффективности,sys,0
на этих этапах реализуемость технических решений проверяется путем создания прототипов.,прототипов,sys,0
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",других случаях,sys,0
"таким же образом производится обработка программ, написанных на любых других языках программирования, входящих в состав системы программирования.",образом,sys,0
"некоторые требования кажутся противоречащими друг другу (например, требование элементарности и удобства), но если что-то можно сделать по-настоящему удобным, не следует отказываться от этого, под предлогом недостаточной элементарности.",предлогом недостаточной,sys,0
"поскольку этап проектирования опирается на результаты первого этапа, уже на этом этапе широко используется база данных проекта.",результаты первого,sys,0
единственной трудностью при данном подходе является выбор оптимального размера элементарного блока.,трудностью,sys,0
возможность динамического построения обращений к методам на основе динамически обнаруженных интерфейсов решает только часть проблемы динамического обращения к службе.,возможность динамического,sys,0
"в состав процессора bde входят драйверы систем управления базами данных (субд) для некоторых, наиболее распространенных на персональных эвм субд: microsoft access, foxpro, paradox, dbase и некоторых других.",драйверы систем управления,sys,0
по оценкам эта фаза занимает около 10% времени и требует около 5% бюджета всего проекта.,времени,sys,0
"однако в последнее время все большее распространение приобретают подходы, поддерживающие более динамичные асинхронные формы взаимодействия, а также системы распределенного программного обеспечения, взаимодействующие на основе обмена сообщениями.",основе обмена,sys,0
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",приложений,sys,0
"редактор связей должен заново прочитать все объектные модули (как откомпилированные, так и библиотечные), необходимые для формирования одной полной программы, и выявить в них все упоминания внешних объектов (процедур, функций, констант, переменных и т. д.).",формирования,sys,0
обычно с динамическими областями памяти связаны многие операции с указателями и конструкторами экземпляров классов (объектов).,конструкторами экземпляров,sys,0
"основные компоненты систем программирования содержание работ, производимых на отдельных этапах, базируется на результатах других этапов, все этапы должны быть согласованы между собой.",компоненты систем программирования содержание,sys,0
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,разработчики систем программирования,sys,0
"средства языковой среды le через соответствующие макровызовы доступны и тем приложениям, которые написаны на языке ассемблера.",средства языковой,sys,0
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",количестве,sys,0
"такие ссылки учитываются при подсчете значений счетчиков ссылок блоков памяти, но сами структуры могут реально оказаться недостижимыми в программе, так как ни один из указателей, не входящих в созданное кольцо (внешних по отношению к этому кольцу), не ссылается ни на один из элементов списочного кольца.",ссылок блоков памяти,sys,0
"система управления версиями исходных текстов (source code control system, sccs), позволяющая отслеживать изменения, осуществляемые в текстах программ, работать с последними и более ранними версиями программ, восстанавливать предыдущие версии файлов и блокировать одновременное внесение исправлений в тексты со стороны нескольких пользователей.",система управления,sys,0
"это, скорее, система библиотек компонентов и правил их использования.",компонентов,sys,0
"например, непосредственное вычисление выражения a=(b+c)+(d+e) может потребовать, по крайней мере, одной временной переменной для хранения промежуточного результата сложения b и c. если же провести перестановку операций, эта переменная будет не нужна, а результат останется прежним: a=((b+c)+d)+e.",временной переменной,sys,0
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",проблем каскадно,sys,0
получающаяся система должна удовлетворять всем выделенным вариантам ее использования.,система должна,sys,0
"в свою очередь, разработчики библиотек, внося в библиотеки изменения, должны предпринимать меры, чтобы эти изменения минимальным образом сказывались на прикладных программах, основанных на предыдущих версиях библиотеки.",версиях библиотеки,sys,0
все эти стандарты описывают только интерфейсы и не содержат никакой реализации.,стандарты,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",запуск,sys,0
"в состав систем программирования стали включаться библиотеки, обеспечивающие поддержку графического интерфейса.",программирования,sys,0
"серверный переходник располагается на той же машине, где находится компонент-сервер.",машине,sys,0
"более того, блокировки предотвращают только текстуальные конфликты они ничего не могут поделать с семантическими конфликтами типа вышеописанного, когда два разработчика редактируют разные файлы.",разработчика,sys,0
"результатом работы транслятора также является программа, строится она по синтаксическим правилам выходного языка, ее семантика определяется семантикой выходного языка (программа no 3, результирующая).",результатом работы,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",следующие преобразования,sys,0
"каждая переменная программы должна получить значение до своего первого использования (например, до использования в правой части оператора присваивания).",значение,sys,0
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",версий,sys,0
"стандартный редактор связей служит для 127 построения объектных модулей старого формата, поддерживающих только 24- и 31-разрядные режимы адресации с ограничением общего объема кода в 16 мегабайт.",модулей старого,sys,0
"при управлении неявных запросов памяти в состав выделяемого блока приходится дополнительно включать специальный счетчик числа указателей, связанных с данным блоком, либо специальный признак занятости блока ( пометку ): в блок обычно включается также полный список всех указателей, связанных с объектами данного блока.",объектами данного,sys,0
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",заданиями,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",возможностью передачи вызовов,sys,0
к таковым относятся ввод и обработка режимов запуска компилятора и первичное заполнение таблиц исходной информацией.,обработка режимов запуска,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",анализатор лексемы,sys,0
"почти все языки программирования включают в себя некоторые элементы, реализация которых подразумевает, что во время выполнения программы должна 84 обеспечиваться связь с операционной системой.",элементы,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",компоненты классической системы программирования,sys,0
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",библиотеки редакторы связей средства,sys,0
"компилятор должен проверять, что во всех местах использовано одинаковое имя.",компилятор должен,sys,0
процедура заносит лексему в таблицу анализатора / }i nt found num (void) { / на первый символ числа указывает переменная yytext.,таблицу,sys,0
библиотеки московский государственный университет имени м.,университет,sys,0
"д. тестирование, выполняемое с помощью стратегии поведенческого теста, называется поведенческим тестированием.",помощью стратегии поведенческого теста,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",основными компонентами,sys,0
"в системе имеются многоязыковый компилятор gcc с библиотекой классов, процедур и функций, необходимой для правильного функционирования компилятора и программ, обработанных системой программирования, компоновщик и ассемблер gas (по скорости превышающий возможности стандартного ассемблера unix почти вдвое).",возможности стандартного,sys,0
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",проектирования множества,sys,0
"это ограничение приводит к таким свойствам языков программирования, как необходимость описаний объектов данных до их первого использования в программе.",описаний,sys,0
"этот механизм включается в момент, когда перед системой управления памяти возникает необходимость выделить фрагмент памяти такого размера, который невозможно обеспечить, не проведя уплотнения занятых блоков памяти.",системой,sys,0
"компилятор как основной компонент системы программирования на начальном этапе развития теории построения компиляторов их сравнивали между собой по количеству проходов по тексту исходной программы, которые выполнялись при компиляции программ.",построения,sys,0
"с самого начала она обеспечивала межъязыковую совместимость программ, написанных на трех языках программирования visual basic .net, visual c# и visual c++, а также сценариев, написанных на языках vbscript и jscript.",совместимость программ,sys,0
альтернативы в правилах разделяются символами вертикальная черта .,символами,sys,0
"в программе lex предусмотрено, что дополнительные атрибуты лексемы могут содержаться в глобальной переменной yylval, текстовое представление лексемы находится в переменной yytext, а длина лексемы в символах в переменной yyleng.",yylval,sys,0
"профилировщик помогает определить, где в действительности находится ошибка, снижающая производительность программы.",ошибка,sys,0
"изменение свойств основного языка программирования, являющего ядром системы программирования повлияло на свойства самой системы программирования.",программирования,sys,0
"система cvs обращается с добавлением и удалением файлов так же, как и с прочими изменениями, записывая такие события в истории файлов.",удалением,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",языка определения интерфейсов,sys,0
"extended portable executable (pe) file format стандартный формат исполняемых файлов, используемый для хранения объектов технологии.",технологии,sys,0
язык программирования с++ .,язык программирования,sys,0
основная проблема спирального цикла определение момента перехода на следующий этап.,определение,sys,0
"система delphi это не просто интегрированная система программирования, а интегрированная среда разработки (ide integrated development environment), предоставляющая 108 программистам формы с огромным количеством различных компонентов.",количеством различных,sys,0
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",количества,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",соответствие языковым,sys,0
"как и компонентное программирование, визуальное программирование основывается на объектно- ориентированном подходе, поскольку с каждым наглядным элементом связан какой-нибудь класс или чаще целый набор классов, описывающих интерфейсы и реализации методов, с помощью которых осуществляется взаимодействие с данным элементом.",элементом,sys,0
"информация о ходе выполнения программы и состоянии переменных выдается в терминах исходного языка программирования, что значительно упрощает процесс отладки программ.",выполнения,sys,0
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",времени,sys,0
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",преимуществом,sys,0
"некоторые системы программирования имеют особую структуру, предполагающую ввод исходной информации в виде графических объектов с помощью графического пользовательского интерфейса.",программирования,sys,0
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",системам,sys,0
"термин компилятор обычно используется вместо термина транслятор в тех случаях, когда исходным языком трансляции является язык программирования высокого уровня, например паскаль или си++, а объектным языком является автокод, язык ассемблера или машинный язык некоторой вычислительной машины.",программирования,sys,0
"для выполнения программ, основанных на динамическом подключении библиотек, необходимо принимать специальные меры, гарантирующие наличие всех необходимых библиотечных компонентов в составе той вычислительной системы, 83 где предполагается исполнять эти программы.",выполнения программ,sys,0
"все эти системы являются наследницами систем, выпускавшихся с 1983 года, и во многом совместимы с ними как по самому языку программирования, для которого они разработаны, так и по возможностям интегрированной среды разработки и отладки программ.",наследницами систем,sys,0
"если системы turbo pascal просто предоставляли удобный пользовательский интерфейс для создателей программ, то системы delphi прямо ориентированы на визуальное программирование.",создателей,sys,0
в процессе работы пользователь может свободно переключаться из режима просмотра и редактирования текста программ в режим графического редактирования форм.,текста программ,sys,0
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",программирования,sys,0
"описанное повышение эффективности использования памяти вычислительной системы происходит за счет увеличения времени выполнения программ, поскольку на динамическую загрузку приходится тратить дополнительное время.",памяти,sys,0
в дополнение к аспектам модульного программирования к нему были добавлены практически все признаки объектно-ориентированных языков.,объектно-ориентированных языков,sys,0
"поскольку некоторыми системными и стандартными библиотеками пользуются почти все программы, размеры непроизводительно используемой памяти, как в архивах программ, так и в памяти вычислительных машин при выполнении программ, могут быть очень большими.",памяти вычислительных,sys,0
"компоненты, включаемые в библиотеки, подчиняются правилам инкапсуляции, то есть имеют открытые реализованные интерфейсы, а детали реализации скрываются внутри библиотек и не видны пользователям.",детали реализации,sys,0
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",элементы текста,sys,0
"тем самым, удается добиться некоторой общности, то есть возможности сортировать некоторые объекты (доступные с помощью указателей, передаваемых функции сортировки в качестве других параметров) не только по возрастанию, но и по убыванию и, вообще, по произвольным критериям.",помощью,sys,0
"его результатом является адрес машины, на которую нужно передать вызов.",адрес машины,sys,0
объем кода при этом может достигать одного гигабайта.,объем кода,sys,0
"элементы теории трансляции , м.: мгу, 1999 (шифр в библиотеке мгу: 5вг66 в-676; http://sp.cmc.msu.ru/courses/prak2/lang grams.pdf).",элементы теории трансляции,sys,0
"если на некотором линейном участке между двумя операциями присваивания какой-либо переменной значений (одинаковых или разных, не имеет значения) не было ни одного оператора, в котором использовалось бы первое значение переменной, это присваивание является бесполезным и может быть удалено из программы без изменения ее смысла.",участке,sys,0
технологии com/dcom технология com (component object model) и ее вариант для распределенных систем dcom (distributed com) была разработана компанией microsoft.,технология,sys,0
"работая в текстовом редакторе, пользователь может выделить в тексте программы желаемый идентификатор и, нажав некоторую комбинацию клавиш на клавиатуре, получить информацию об объектах, имеющих такое имя.",объектах,sys,0
"в состав систем программирования стали включаться библиотеки, обеспечивающие поддержку графического интерфейса.",библиотеки,sys,0
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",запрос серверу,sys,0
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",методы обратной передачи значения,sys,0
"важной дополнительной функцией генератора кода в таком процессе, заметно усложняющей весь процесс генерации в целом, является проведение одновременно с генерацией поиска стандартных последовательностей операторов по некоторым шаблонам и локальной оптимизации потока формируемых команд.",оптимизации потока,sys,0
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",языке программирования,sys,0
"\) {letter} точка со звездочкой означает многократное повторение любого символа, кроме символа конца строки, а обратная косая черта перед скобками указывает, что скобки не являются метасимволами группирования, а являются обычными символами.",повторение,sys,0
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",основе,sys,0
"самый простой редактор связей при обнаружении ссылки на некоторый объектный модуль (или даже при передаче некоторого объектного модуля на редактирование, независимо от того, имеются на его объекты ссылки в других объектных модулях или нет) просто вставлять в готовую программу все определенные в нем объекты, как программы, так и данные.",обнаружении,sys,0
"в такой схеме внутреннее представление программы существует только на концептуальном уровне, выражаясь только в последовательности шагов преобразований.",схеме внутреннее представление программы,sys,0
"теоретически возможно, что стратегия по отношению к специфическим программам совершенствуется во времени, на самом деле эффективность большинства стратегий со временем убывает.",эффективность большинства,sys,0
системы программирования ос unix и linux с самого начала разработки системы unix она рассматривалась в качестве переносимой (мобильной) операционной системы.,начала,sys,0
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,работа,sys,0
"размеры объектов, размещаемых в этих областях, никогда не меняются, как и та часть адресов этих объектов, которая указывает их положение внутри области.",адресов,sys,0
"для записей о текущем состоянии процесса выполнения программ, а также для записей о входах в блоки операторов, которые можно рассматривать в качестве процедур без параметров.",процесса выполнения программ,sys,0
каскадная схема является одним из вариантов итеративных схем разработки программного обеспечения.,разработки программного,sys,0
"результатом первого этапа являются сформулированные требования, то есть внешняя спецификация, описание системы с точки зрения пользователя.",первого этапа,sys,0
"загрузчики обязательно входят в состав тех систем программирования, которые передают подготовленные компиляторами и редакторами связей программы не аппаратуре на исполнение, а программе интерпретатора для интерпретации.",программе интерпретатора,sys,0
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",текстов,sys,0
качество программного продукта должно быть существенно выше качества обычной программы.,продукта,sys,0
"чаще всего, когда говорят о компонентном подходе к построению современных систем программного обеспечения, имеют в виду именно эту, последнюю трактовку термина компонент .",последнюю трактовку,sys,0
"для достижения этого согласования необходимо вести базу данных проекта, что позволяет сохранять информацию о проекте и причинах принятия тех или иных решений при проектировании, а также контролировать его внутреннюю согласованность: изменения в составе требований должны приводить к указаниям на места проекта, в которых эти требования использованы.",данных,sys,0
"генератор программ на си++ и java, работающий на основе выбранного каркаса приложения (rational apex); средства автоматизации тестирования rational team test (rtt), rational robot (часть rtt, используемая для автоматизации прогонов тестов), rational test factory (для автоматизации тестирования интерактивных задач) и rational pure coverage (для контроля полноты покрытия тестами).",контроля полноты покрытия тестами,sys,0
"внутреннее представление программ дополнительную сложность задаче компиляции придает тот факт, что из-за серьезных различий между входным и выходным языками провести непосредственное преобразование из одного языка в другой не всегда представляется возможным.",представление программ,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",текста,sys,0
"использование компилятора gcc не требует от пользователей полного отказа от работы с другими компиляторами, а также с библиотеками, созданными другими компиляторами.",библиотеками,sys,0
"в то же время триады можно рассматривать и как линейную последовательность, если результаты вычислений операций триад хранить во временно выделяемой памяти.",операций,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",информации,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",контроля непротиворечивости таблиц,sys,0
"в состав этой системы входят совокупность приемов и решений rup (rational unified process), распространяемая не только в виде пособий и книг, но и в виде гипертекста с помощью страниц интернета; программные средства rational suite, состоящие из средств управления требованиями (rational requisite pro); средств визуального проектирования (rational rose), основанные на формальном языке моделирования uml (unified modeling language), ставшем всеобщим стандартом описания сложных систем (например, систем рабочих потоков workflow).",пособий,sys,0
"примером системы, позволявшей создавать прикладные системы типа клиент/сервер на вызовах удаленных процедур, является система dce (distributed computing environment), предложенная группой open software foundation (open group).",системы,sys,0
"теперь при вводе текстов программ с помощью редактора, эта программа, получив сведения о том, на каком языке программирования написан вводимый текст, выделяет ключевые слова языка особым шрифтом и цветом, ""подсвечивает"" соответствующие открывающие и закрывающие скобки.",цветом,sys,0
генерация ключа файл определения idl программа клиента/сервера библиотека код клиента/сервера модуль переходника клиента/сервера компилятор си компилятор idl файл-заголовок клиента/сервера ( .h) компоновка код переходника клиента/сервера компилятор си модуль клиента/сервера 134 следующий шаг написание реальных программ клиента и сервера.,сервера модуль,sys,0
"средства компоновки больших программ, которые на основе отдельно транслируемых фрагментов (модулей) и компонентов библиотек создают исполняемые программы (редакторы связей).",связей,sys,0
"такое связывание выполняется редактором связей, а размещение в памяти загрузчиком.",связей,sys,0
"второй вариант обработки явных запросов пользователей основан на более гибком подходе, при котором размер блоков не фиксируется заранее, а выбирается на основе параметров запроса и хранится в самом блоке: это позволяет оставить почти без изменения работу системы при захвате памяти, но значительно усложняет ее при освобождении, а особенно при повторном выделении, которое может потребовать склеивания смежных блоков, а иногда и уплотнения занятых участков.",явных запросов пользователей,sys,0
"задача редактора связей отыскать среди всего набора объектных модулей те, которые определяют или реализуют внешние объекты других модулей.",набора объектных,sys,0
"для широкого распространения библиотечных средств в программировании имеются, по крайней мере, две причины: необходимость оказывать поддержку программам во время их исполнения на вычислительной машине, потребность накапливать полезные программы и передавать их другим пользователям, не раскрывая деталей реализации алгоритмов, запрограммированных в них.",поддержку программам,sys,0
такие недостижимые циклические ссылки становятся препятствием для освобождения ставшей ненужной памяти и создают реальные проблемы для систем управления памятью.,памяти,sys,0
"в одном компиляторе может использоваться любая из этих форм, обычно выбираются несколько разных видов внутреннего представления программ для разных стадий компиляции.",программ,sys,0
"он позволяет готовить и вносить изменения в тексты исходных программ, однако в современных системах программирования его функции стали еще более широкими.",современных системах программирования,sys,0
"в обычных языках программирования лексемами являются числа (десятичные целые, вещественные), идентификаторы, служебные слова, разделители.",языках,sys,0
"международной организаций по стандартам iso, институтом ieee и другими организациями, в том числе структурами правительства россии, утверждены стандарты, описывающие процессы, виды деятельности и задачи жизненного цикла программ и программно-аппаратных систем, а также результаты, достигаемые с помощью различных видов деятельности.",аппаратных систем,sys,0
"стандарт corba это спецификация для создания и управления объектно-ориентированными приложениями, распределенными в вычислительной сети.",приложениями,sys,0
основная сложность проектирования определить основания для разделения общей системы на составляющие ее подсистемы.,основная сложность,sys,0
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",компаний,sys,0
"единственным их недостатком по сравнению с lr(1)-грамматиками является то, что lalr(1)-грамматики ограничивают возможности распознавателей по обнаружению ошибок во входных цепочках символов, точнее заставляют для обнаружения ошибок делать больше шагов вывода.",недостатком,sys,0
для других языков больше подходят другие режимы работы компиляторов.,другие режимы работы,sys,0
однако такой подход может привести к возникновению проблемы жирного интерфейса .,проблемы жирного,sys,0
базовые типы данных idl имеют естественное отображение в типы данных си++.,отображение,sys,0
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",состав системы программирования,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",распределения памяти компилятор,sys,0
"в то же время вынесение загрузчика из состава систем программирования в состав операционных систем делает структуру этой таблицы более общей, 79 не зависящей от конкретной системы программирования.",время вынесение,sys,0
"генерация кода завершающей стадией работы компилятора является генерация кода (команд, констант и т. д.) объектной программы.",стадией работы,sys,0
помощь в автоматизации графического интерфейса пользователя (graphical user interface gui).,автоматизации,sys,0
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",качествам отладчикам других,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",работу,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",удобства работы,sys,0
системы программирования ос unix и linux 93 4.5.,программирования,sys,0
"истинные адреса начала областей обычно используются только в командах загрузки адресов на регистры базирования, поэтому только эти команды обычно остаются не до конца сформированными после завершения редактирования связей.",редактирования,sys,0
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",сообщение,sys,0
"так как программа изменяется при исправлении ошибок и росте ее функциональности, типы ошибок, находимые в ней, меняются со временем, и, следовательно, меняется эффективность стратегии.",стратегии,sys,0
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",управления,sys,0
"д. однако большинство реальных языков программирования допускает некоторые вольности при записи выражений, гарантируя, что в компиляторах будут предприняты меры по согласованию типов.",реальных языков программирования,sys,0
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",языка программирования,sys,0
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",видимости,sys,0
"для создания справочных систем разрабатывается специальный системный инструментарий, который можно использовать при разработке собственных программ, обеспечивая и для их пользователей такой же сервис контекстно-зависимых справок, который предоставляется их разработчикам.",разработке собственных,sys,0
"именно поэтому часто в компиляторах на некоторых стадиях обработки программ возникает некоторое промежуточное внутреннее представление компилируемой программы, которое лишь на завершающей стадии преобразуется в представление программы на выходном языке компилятора.",представление компилируемой,sys,0
"справочник снабжен большим количеством примеров, которые часто позволяют повысить 114 эффективность как процесса программирования, так и процесса работы уже подготовленной программы.",большим количеством примеров,sys,0
"триады представляют собой запись операций в форме из трех составляющих: операции и двух операндов: <операция>(<операнд1>,<операнд2>) особенностью триад является то, что один или оба операнда в триаде могут быть ссылками на другую триаду в том случае, если в качестве операнда данной триады выступает результат выполнения другой триады, например, так в виде триад можно записать арифметическое выражение a=b c+d b 10: 1 b c 2 + 1 d 3 b 10 4 - 2 3 5 = a 4 ссылка на триады в реальных компиляторах обычно реализуется настоящим указателем, что делает триады списочной структурой и облегчает процессы преобразования триад.",качестве операнда данной триады,sys,0
обычно используют две стратегии оптимизации: оптимизация в целях повышения скорости работы программы и оптимизация в целях уменьшения размеров программ.,уменьшения размеров,sys,0
"контроль и координация календарного плана работ: работа с единой базой проекта, идентификация хода проекта по графикам и диаграммам, рассылка сообщений участникам проекта, генерация отчетов о выполнении работ.",сообщений участникам проекта,sys,0
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",автоматического управления распределением,sys,0
процесс создания диалоговых форм и расстановки на них элементов управления диалогом благодаря визуальному подходу стал несложным и понятным.,элементов,sys,0
эта информация собирается на основе обработки операторов описания объектов данных программы и пополняется при компиляции исполняемых операторов программы на основе семантических правил входного языка.,информация,sys,0
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",результате преобразований,sys,0
"благодаря возможностям фильтрации событий и вывода информации о них на экран разработчик может выделять те участки программ, которые вызывают снижение производительности, и видеть полную картину взаимодействия процессов.",фильтрации,sys,0
эта трудоемкость связана с необходимостью произвести повторную полную сборку программы из объектных модулей и исправленных библиотечных компонентов.,компонентов,sys,0
"общая структура размещения в памяти отдельных областей такова: из нее понятно, что для двух динамических областей, границы которых нельзя определить заранее, можно выделить общую зону и организовать в ней встречные направления роста стековой области и области с произвольной дисциплиной распределения.",произвольной дисциплиной распределения,sys,0
"открытость системы есть использование синтаксических и семантических правил, основанных на открытых стандартах.",открытость системы,sys,0
"для данных разной природы, необходимых для работы различных программ: статические области памяти и стратегию статического распределения для глобальных, статических (не глобальных, а собственных) переменных, констант, 67 внутренних структур данных, возникающих при трансляции некоторых языковых конструкций, например, таблиц виртуальных функций для полиморфных классов;",констант,sys,0
"73 работа генератора не зависит от того, имеется ли перед фазой генерации дополнительная фаза оптимизации, или она отсутствует.",дополнительная фаза,sys,0
"таким образом, проектирование и программирование диалога с пользователем сводится к определению и установке значений свойств некоторых компонентов форм и программированию обработчиков событий.",обработчиков,sys,0
"во всех таких случаях компилятор должен сформировать команды, обеспечивающие своевременное выделение памяти, необходимой для выполнения операции, а также последующее освобождение этой памяти.",операции,sys,0
"программа заместителя содержит в себе описание методов, предоставляемых реализацией объекта.",реализацией,sys,0
внутри каждой из фаз также возможно циклическое повторение отдельных работ.,повторение,sys,0
"в других случаях большие возможности ms dos 107 по управлению компьютером превращаются в ненужные усложнения и представляют собой излишнюю нагрузку на программиста, заставляя вручную программировать использование различных аппаратных и программных ресурсов, совместно используемых модулями программы.",других случаях большие возможности,sys,0
"математически проблема генерации эффективной объектной программы является неразрешимой, но на практике применяются достаточно эффективные эвристические подходы, дающие хорошие результаты, хотя и не абсолютно оптимальные.",проблема,sys,0
"имеется также определенный выбор систем управления версиями, которые не привязаны жестко к какой-либо системе программирования, а могут работать с любыми из них, ведя базы данных или репозитории файлов, составляющих законченные программные комплексы.",программирования,sys,0
однако разработчик системы (компания microsoft) объявила эту технологию устаревшей и активно продвигает другой подход технологию .net.,системы,sys,0
"потребность автоматически распределять динамическую память возникает, когда в программе используются такие операции над данными, которые требуют перераспределения памяти, а сами операторы перераспределения в программе отсутствуют.",операторы,sys,0
"некоторые системы программирования предлагают поддержку пользовательской оптимизации, в частности, имеют в своем составе профилировщики, помогающие выявить те фрагменты программ, которые для своего выполнения требуют максимальной доли времени работы программы.",составе профилировщики,sys,0
"например, непосредственное вычисление выражения a=(b+c)+(d+e) может потребовать, по крайней мере, одной временной переменной для хранения промежуточного результата сложения b и c. если же провести перестановку операций, эта переменная будет не нужна, а результат останется прежним: a=((b+c)+d)+e.",сложения,sys,0
"чтобы уменьшить число ошибок в программах, еще на этапе программирования (до объединения с другими компонентами создаваемого комплекса) разработчики проводят над своими программами цикл отладки: расставляют операторы выдачи промежуточных результатов работы программы, исследуют содержимое памяти, занятой командами или данными тестируемой (отлаживаемой) программы, применяют автоматизированные средства отладки и тестирования (двоичные и символьные отладчики).",памяти,sys,0
"наиболее известным программным продуктом, позволяющим осуществлять управление разработкой проектами, является компонент пакета офисных программ microsoft office, который носит название microsoft project.",офисных программ,sys,0
"128 огромное внимание в описываемой системе программирования уделяется подготовке программ для использования в пакетном режиме традиционном способе разработки программ, применяемом программистами для эвм, выпускавшимися компанией ibm, а также многими ее последователями в течение десятилетий.",огромное внимание,sys,0
"аналогичным образом производится оптимизация специальных регистров сумматоров, индексных регистров, регистров базирования и других.",регистров сумматоров,sys,0
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",методе загрузке,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",разных языках,sys,0
"определенными недостатками и ограничениями обладает и выбранный для систем com язык microsoft idl, в котором недостаточно развиты средства объявления типов данных, из которых строится программа.",программа,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",системы,sys,0
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",сопровождения,sys,0
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",варианты программ,sys,0
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,вызова функций динамических библиотек,sys,0
схемы работы трансляторов степень преобразования программ трансляторами может быть различной.,трансляторов степень преобразования,sys,0
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",разных языках,sys,0
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,единая база,sys,0
"методы формальной спецификации программ: языки msc и sdl , м.: изд-во диалог- мгу , 1998 (шифр в библиотеке мгу: 5вг66 м-238).",формальной спецификации,sys,0
"в тех вычислительных системах, в которых время выполнения операции умножения превышает время выполнения сложения, удается добиться немалого эффекта.",немалого эффекта,sys,0
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",среда разработки программ,sys,0
"в целом, dce это попытка стандартизовать понятие удаленного вызова процедуры.",процедуры,sys,0
"в дополнение к описанию методов, в отличие от систем на базе удаленного вызова процедур, язык idl спецификации corba поддерживает множество объектно-ориентированных концепций, например, наследование и полиморфизм.",описанию методов,sys,0
"алгоритмы + структуры данных = программы , м.",структуры,sys,0
"в настоящее время программные компоненты могут выступать как в роли клиента, так и в роли сервера.",клиента,sys,0
при открытии нескольких файлов эти виды будут меняться при переходе на различные файлы в редакторе.,различные файлы,sys,0
"автомат должен не только распознать правильную лексему на входе, но и породить связанную с ней последовательность символов на выходе.",автомат,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",правила,sys,0
"например, исходный оператор s=s+a[i] b[i] скрывает, что вычисление адресов для элементов a[i] и b[i] содержит общие подвыражения sizeof(тип) i.",общие подвыражения,sys,0
"как и в технологии java, трансляция с любого языка программирования сначала осуществляется в единый промежуточный язык cil.",программирования,sys,0
"разработчик прикладной программы должен тщательно придерживаться правил, предложенных разработчиками библиотек.",правил,sys,0
"скорость выполнения программы интерпретаторами во много раз меньше, чем при использовании компиляторов.",программы интерпретаторами,sys,0
"например, режимы автоувеличения и автоуменьшения очень удобны для организации работы со стеком, а также при выполнении операций вида i:=i+1.",стеком,sys,0
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,результатами предыдущих стадий компиляции,sys,0
на первом этапе создаются материалы различных видов: от простого текста до частично формализованных описаний требований.,описаний,sys,0
"132 эта же техника может быть использована и для реализации взаимодействия компонентов, работающих в рамках различных процессов на одной машине.",машине,sys,0
"что должно присутствовать во внутреннем представлении это операторы и операнды исходной программы, записанные в более удобной для последующей обработки форме.",обработки форме,sys,0
первая перспектива служит для выбора репозиториев и модулей для подсоединения и анализа содержащихся в них файлов.,выбора репозиториев,sys,0
в процессе интерпретации участвуют только две программы (программа интерпретатора и исходная программа) и два набора данных (входные данные программы и ее результат): 3.2.2.,набора данных,sys,0
"такой способ работы подразумевает высокую квалификацию пользователя системы программирования, который должен точно знать все компоненты конкретной системы программирования, необходимые для формирования нужной ему программы, необходимые им параметры, а также правильную последовательность их вызова.",конкретной системы программирования,sys,0
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",записи регулярных,sys,0
качество программного продукта должно быть существенно выше качества обычной программы.,продукта должно,sys,0
"по сравнению с генератором лексических анализаторов, работающим с регулярными выражениями, работа генератора синтаксических анализаторов осложнена возможными неоднозначностями в грамматиках.",работа генератора,sys,0
"в дальнейшем программист имеет возможность, редактируя автоматически созданные таблицы свойств компонентов, изменять значения отдельных свойств, полученные компонентами форм по умолчанию, и создавать обработчики некоторых событий, связанных с компонентами форм.",свойств компонентов,sys,0
"они включают в себя как общие математические операции (скалярное произведение и умножение матриц), так и сложные алгоритмы поиска и хранения (поисковый цикл монте-карло), например, так на языке си выглядит четвертый ливерморский цикл, построенный на базе фрагмента подпрограммы решения ленточных линейных уравнений: void loop4 (int n, real x [ar 1001], real y [ar 1001]) { for (int k = 6; k < ar 1001; k += (ar 1001 - 7) / 2) { int lw = k - 6; for (int j = 4; j < n; j += 5) x [k - 1] -= x [lw ++] y [j]; x [k - 1] = y [4]; } } обнаружение подобной критической последовательности операторов позволяет вместо прямой подстановки обычной последовательности команд сформировать последовательность, специфическую для данного шаблона и конкретной вычислительной архитектуры.",фрагмента,sys,0
обычно с динамическими областями памяти связаны многие операции с указателями и конструкторами экземпляров классов (объектов).,объектов,sys,0
"системы ""клиент- сервер"" в качестве одной из самых своих серьезных проблем имеют ограниченность возможностей сервера по связи со многими клиентами одновременно.",ограниченность,sys,0
"текстовые редакторы интегрируются также с отладчиками, для которых они позволяют расставлять в программе точки останова, показывать значения переменных во время приостановки работы программы и выполнять другие полезные действия.",значения,sys,0
система сом не является системой программирования в классическом значении этого термина.,программирования,sys,0
"однако модель удаленного обращения к методу допускает динамическое обнаружение новых объектов и построение обращений к ним в процессе работы, даже если для данного клиента не был создан никакой переходник.",динамическое обнаружение,sys,0
40 в подобных случаях интерпретацию программы также нельзя проводить непосредственно после ее компиляции.,подобных случаях интерпретацию,sys,0
"визуальным называется такой стиль программирования, который предусматривает создание приложений с помощью наглядных средств.",программирования,sys,0
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",программирования,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,помощью пометок,sys,0
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",динамическая распределяе мая,sys,0
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",подготовка таблицы трансляции,sys,0
"программа заместителя содержит в себе описание методов, предоставляемых реализацией объекта.",реализацией объекта,sys,0
"например, компилятор следует тестировать, подавая ему на вход не только правильные программы, но и программы, содержащие все возможные ошибки.",программы,sys,0
"требования различных языков программирования, предъявляемые к именам используемых в программах объектов, распространяются на имена объектов, относящиеся к одним пространствам именования и видимости.",пространствам,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",классов,sys,0
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",программирования,sys,0
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",открытию элементов,sys,0
"для написания текста программ чаще всего выбирается язык, соответствующий методам, выбиравшимся при анализе и формировании требований к программному продукту и проведении декомпозиции строящейся системы.",текста программ,sys,0
такой подход связан с контролем всех операторов присваивания вида p = q; где p и q указатели на некоторые динамически созданные объекты.,присваивания вида,sys,0
"компания microsoft, разрабатывая новую технологию .net, стала поддерживать многоязыковое программирование, то есть такой способ взаимодействия программ, при котором программы, написанные на разных языках, могут работать совместно.",способ взаимодействия программ,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",обработку,sys,0
"\..\exe\cpu -x0x86 -d-s0xfe000 -b0x4005ab -e0x400900 -zt40.n40 - k0x0 -f0x0 -ot40.se0 del t40.?40 особенно эффективна работа в режиме командного файла при выполнении массовых подготовок версий одной программы, отличающихся каким-либо важным параметром, например, паролем, блокирующим несанкционированный запуск готовой программы.",подготовок,sys,0
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",результате преобразований программы,sys,0
"профилировщик аналогичен программному логическому анализатору, способному выдавать огромные объемы информации.",огромные объемы информации,sys,0
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",памятью,sys,0
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",мусора,sys,0
"справочную информацию теперь можно получать, не только обращаясь к базе данных документов и проводя поиск по индексам, но и выполняя быстрый контекстный поиск необходимой информации.",данных документов,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",ора таблицы,sys,0
"некоторое неудобство прямой польской записи, которое привело к использованию обратной записи, состоит в том, что операторы в ней следуют не в том порядке, в каком они должны выполняться в вычислительной машине: = a - + b c d b 10 постфиксная (инверсная, обратная, суффиксная) запись.",неудобство прямой,sys,0
в таких случаях часто используют представление программы с помощью псевдокода.,псевдокода,sys,0
с помощью стандартов удается проводить оценку качества проводимых процессов и выискивать возможности для их улучшения.,помощью,sys,0
"с помощью методов этих классов программист непосредственно из программы на языке basic может активизировать приложения, создавать документы, редактировать их, передавать из одного приложения в другое и делать многое другое.",помощью методов,sys,0
"язык java решил многие проблемы переносимости программ, однако, выбранная технология работы с этим языком (использование java как единственного языка для программирования любых приложений) поставила его в изолированное положение по отношению к другим языкам программирования.",языкам,sys,0
"основные компоненты систем программирования содержание работ, производимых на отдельных этапах, базируется на результатах других этапов, все этапы должны быть согласованы между собой.",компоненты систем,sys,0
"одновременно с вводом текста программы с помощью текстового редактора система программирования отыскивает в этом тексте лексемы по правилам того языка программирования, на работу с которым она в данный момент настроена.",текстового редактора система программирования,sys,0
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",современных системах,sys,0
"базовый компонент z/os, называемый языковым окружением le, поддерживает единую универсальную среду выполнения для приложений, созданных на языках программирования высокого уровня cи, cи++, кобол, pl/1 и фортран.",программирования высокого,sys,0
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",другими компонентами,sys,0
"слияние смежных циклов с независимыми внутренними операторами s1 и s2 позволяет снизить накладные расходы на организацию циклической работы: for (i = 0; i < n; i ++) { s1 } for (i = 0; i < n; i ++) { s1; s2 } for (i = 0; i < n; i ++) { s2 } замену циклов последовательностями операций можно выполнять для циклов, кратность которых известна уже на стадии компиляции.",слияние смежных,sys,0
буквальное следование каскадной схеме разработки приводит к существенному запаздыванию получения результатов.,следование,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",классической системы,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",программа,sys,0
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,анализа,sys,0
однако разработчик системы (компания microsoft) объявила эту технологию устаревшей и активно продвигает другой подход технологию .net.,разработчик системы,sys,0
"библиотеки классов могут представлять собой совокупности независимых классов, иерархии классов, иерархии шаблонов классов.",иерархии,sys,0
"тесная связь с языком позволяет включать в состав интегрированных систем полезные вспомогательные средства, которые способны проводить анализ текстов программ и находить в них определения объектов данных, их структур, классов.",объектов,sys,0
"в системе unix имеется огромное количество полезных системных программ, а многочисленные версии этой системы могут содержать свои собственные варианты программ и дополнительные программы, прямо связанные с особенностями конкретных реализаций.",программ,sys,0
"этот метод приводит к сокращению времени на передачу параметров и возвращаемого результата, на команды передачи управления, захвата памяти в стеке и другие вспомогательные операции.",операции,sys,0
библиотеки компонентов библиотеки компонентов представляют собой развитие понятия библиотек языков программирования на основе развития концепции классов.,концепции,sys,0
очень важным фактором развития системы eclipse является ее свободное распространение с полным набором исходных текстов.,полным набором исходных текстов,sys,0
"однако обычно (по аналогии с библиотеками стандартных программ) вместе с базовой системой (самим брокером corba) могут распространяться программы служб, спецификации которых также стандартизованы.",спецификации,sys,0
"загрузчик, который выполняет трансляцию адресов в момент запуска программы, называется настраивающим загрузчиком.",запуска,sys,0
тестирование программы есть процесс обнаружения дефектов в созданных программах.,процесс обнаружения дефектов,sys,0
часто подобные действия выполняются непосредственно при обнаружении лексемы в исходном тексте.,подобные действия,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",таблиц решений,sys,0
карпов системы программирования удк ббк печатается по решению редакционно- издательского совета факультета вычислительной математики и кибернетики мгу им. м.,издательского совета факультета,sys,0
"их составляющие не должны включаться в состав исполняемых файлов программ, что значительно сокращает их размеры.",составляющие,sys,0
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",отдельных компонентов,sys,0
"заместитель объекта это переходник, ответственный за сокрытие распределенности.",объекта,sys,0
"пользователю при этом не надо ждать завершения интерпретации, чтобы увидеть первые исходна я програм интерпретат ор входные результа набтор данных no 2 программа no 1 программа no 2 набор данных no 1 35 результаты работы программы, он может получать результаты постепенно, по мере работы интерпретатора.",программы,sys,0
"другие библиотеки попадают в оперативную память только тогда, когда происходит реальное обращение к какому-нибудь одному из их компонентов (к какой-либо процедуре или функции из этих библиотек).",реальное обращение,sys,0
разработка системы занимает около 50% времени и 65% бюджета.,разработка,sys,0
"однако расширение возможностей грамматического описания языков введением описаний действий, то есть замена обычных грамматик на грамматики с действиями, позволяет снизить требования к используемым грамматикам, а значит, к синтаксическим анализаторам и их генераторам.",описаний действий,sys,0
исправление одной ошибки с большой вероятностью (от 2 до 50 процентов) вносит другую.,ошибки,sys,0
"на клиентских местах разрешается использовать все наиболее распространенные операционные системы (windows, unix, linux, mainframe z/os), а также наиболее современные системы разработки, включая rational application developer, websphere studio, microsoft visual studio .net, eclipse.",системы разработки,sys,0
"тесная связь с языком позволяет включать в состав интегрированных систем полезные вспомогательные средства, которые способны проводить анализ текстов программ и находить в них определения объектов данных, их структур, классов.",структур,sys,0
простые наборы описаний классов встречаются в системах программирования все реже и реже.,наборы описаний,sys,0
"от текстовых редакторов требуется помощь при расстановке точек останова и определении деления текста на отдельные строки при пошаговом исполнении, от компиляторов и редакторов связей потребовалась возможность предоставлять отладчикам доступ к таблицам имен и адресов, к описаниям областей видимости.",помощь,sys,0
"такие соглашения есть в каждом языке, проверять их на этапе синтаксического анализа невозможно.",анализа,sys,0
"основной недостаток технологии com, который и привел к отказу от нее, это серьезные ограничения в организации взаимодействия между разными платформами, которые постоянно возникают в глобальных сетях.",основной недостаток технологии,sys,0
"наиболее известным и широко распространенным (хотя и не самым лучшим) профилировщиком является программа prof, входящая в состав операционных систем unix.",состав,sys,0
"существуют и другие критерии, например, планируемая скорость работы транслятора, степень оптимизации программ.",скорость работы транслятора,sys,0
системы управления версиями программных комплексов в настоящее время многие системы программирования начали включать в свой состав системы управления версиями.,состав системы управления,sys,0
"он до сих пор используется при отладке, как небольших программ, так и крупных отладочных комплексов.",отладочных комплексов,sys,0
"сюда входят управление документами, интернационализация, поддержка мобильных агентов.",интернационализация,sys,0
"поддержка нескольких проектов позволяет пользователям систем сохранять в архивах сделанные ими настройки и установки режимов для ведущихся ими проектов разработки и быстро извлекать их оттуда, легко восстанавливая сохраненный контекст.",поддержка,sys,0
с распространением интегрированных систем документация также стала поставляться по-новому.,систем документация,sys,0
в дополнение к аспектам модульного программирования к нему были добавлены практически все признаки объектно-ориентированных языков.,признаки объектно,sys,0
такой метод декомпозиции ассоциируется со структурным программированием и методом проектирования сверху-вниз .,декомпозиции,sys,0
78 статическое подключение библиотек с целью получения единого исполняемого модуля; подготовка таблицы точек вызова функций динамических библиотек (см. 3.6.2).,подготовка,sys,0
"регулярное выражение после прогностического оператора / указывает правый контекст 150 соответствия, который используется только для ограничения и не является частью шаблона.",частью шаблона,sys,0
внутреннее представление программ 37 5 3.3.4 .,представление,sys,0
"информация о ходе выполнения программы и состоянии переменных выдается в терминах исходного языка программирования, что значительно упрощает процесс отладки программ.",терминах исходного,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",разработки,sys,0
"имея такой перечень, который обычно передается компоновщику в качестве одного из параметров его запуска, он может обеспечить загрузку всех библиотек в память перед началом работы основной программы.",память,sys,0
многие оптимизирующие компиляторы выбирают именно древовидные структуры для внутреннего представления программ.,структуры,sys,0
"линейные участки имеются в любой программе и чаще всего содержат последовательности вычислений, состоящие из арифметических выражений и операторов присваивания значений переменным программы.",программе,sys,0
"иногда оказывается возможным отказаться от переменной цикла, как в следующем примере: s = 10; for (i = 0; i < n; i ++) r = r + f (s), s = s + 10; в этом примере две индуктивные переменные, но переменную цикла можно просто исключить: s = 10; m = s + n 10; while (s <= m) r = r + f (s), s = s + 10; таким преобразованием за счет введения дополнительной переменной m удалось исключить n операций сложения для переменной i. слияние и развертывание циклов это два различных варианта преобразований: слияния двух смежных или вложенных 61 циклов в один и замена цикла на последовательность операций (часто линейную).",счет введения дополнительной,sys,0
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",таблицу констант,sys,0
"задача семантического анализатора состоит в поиске всех мест, где нужно выполнить подобные преобразования типов и вставить во внутреннее представление явные команды преобразования.",внутреннее представление,sys,0
"пакетные редакторы особенно удобны при пакетном формировании нескольких версий одних и тех же программ, отличающихся некоторыми важными параметрами, которые должны быть учтены непосредственно в тексте программы.",версий,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,библиотек,sys,0
"при асинхронном взаимодействии клиент, запрашивающий услугу у сервера, после выдачи запроса продолжает свою работу в той мере, в которой это возможно, не тратя время на ожидание результата.",взаимодействии,sys,0
"например, требование обязательного описания идентификаторов в некоторых языках отсутствует.",обязательного описания идентификаторов,sys,0
особенно удобно работать в системе visual basic с приложениями microsoft office.,системе,sys,0
интегрированная среда разработки основной тенденций развития систем программирования является тенденция интеграции компонентов в единое системное окружение.,разработки основной,sys,0
"в ситуации с указанными языками программирования, чтобы считать if ключевым словом, а не именем массива, следует сканировать исходный текст в поисках правой (закрывающей) скобки, за которой следует буква, а не знак равенства.",именем,sys,0
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",значения функций,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",логическими ресурсами системы,sys,0
"по техническому составу библиотеки делятся на две категории: библиотеки функций исходного языка и библиотеки функций операционной системы, в составе которой должна будет работать обрабатываемая программа.",функций исходного,sys,0
"значительное облегчение пользователям приносят также библиотеки стандартных форм и элементов управления ( библиотеки компонентов ), а также развитая система оказания помощи пользователям, снабженная огромным количеством примеров.",система,sys,0
"наиболее успешными работы по автоматизации грамматического разбора были в области лексического анализа, так для описания лексики языков программирования оказалось достаточным использовать наиболее теоретически простые языки регулярные.",языки регулярные,sys,0
"лексический анализ сопровождается исключением незначащих фрагментов текстов программ, например, комментариев.",программ,sys,0
"внутреннее представление программ дополнительную сложность задаче компиляции придает тот факт, что из-за серьезных различий между входным и выходным языками провести непосредственное преобразование из одного языка в другой не всегда представляется возможным.",сложность задаче компиляции,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",диаграмм,sys,0
"для их построения входные данные разбиваются на группы, представители которых обрабатываются программным продуктом практически одинаково.",представители,sys,0
"в настоящее время компания рекомендует пользоваться не процессором bde, а более современной технологией dbexpress, которая использует для получения данных исключительно запросы sql.",современной технологией,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",отображения информации,sys,0
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",непосредственного использования констант,sys,0
средства автоматизации (хотя бы частичной) анализа результатов прогона тестов.,анализа результатов прогона,sys,0
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",объектные файлы,sys,0
"оба языка используют синтаксис и основные концепции языка си++, хотя, конечно, отличаются от него.",концепции языка,sys,0
"кроме самой лексемы, 31 разработчику может быть предоставлена информация о ней, например, перечень доступных методов для типа или экземпляра класса, что избавляет от необходимости лишний раз заглядывать в документацию, и снижает вероятность ошибок при вводе текста.",информация,sys,0
"к основным свойствам языков внутреннего представления программ можно отнести такие: языки внутреннего представления позволяют фиксировать синтаксическую структуру исходной программы; текст на языках внутреннего представления можно автоматически генерировать во время синтаксического анализа; конструкции языков внутреннего представления относительно просто транслируются в объектный код, либо достаточно эффективно интерпретируются.",синтаксическую структуру исходной программы,sys,0
"к документации программных продуктов следует относить не только пользовательскую документацию, предназначенную для фазы использования, но также техническую документацию для сопровождения программных продуктов.",техническую документацию,sys,0
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",генератор,sys,0
"важнее, чтобы при оптимизации не вносились дополнительные ошибки, на исправление которых затрачиваются дополнительные усилия; в результате преобразований программы в среднем должны улучшаться (почти для всех допустимых данных), лишь на анализирую щая часть компилятора генерат ор кода оптимиза тор программ информационные таблицы исходная программа объектн ая програм промежуточ ное представлен промежуточ ное представлен i ii iii 55 каких-то (редко встречающихся) комбинациях данных допускается обратный эффект (ухудшение характеристик).",результате,sys,0
автоматизация построения анализаторов программ m. e. lesk.,построения анализаторов,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",общих подвыражений,sys,0
во время сопровождения программного продукта можно наблюдать продолжение контактов пользователей и разработчиков.,пользователей,sys,0
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",масштабе времени,sys,0
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",машины,sys,0
"для создания справочных систем разрабатывается специальный системный инструментарий, который можно использовать при разработке собственных программ, обеспечивая и для их пользователей такой же сервис контекстно-зависимых справок, который предоставляется их разработчикам.",системный инструментарий,sys,0
"чтобы не вводить более в заблуждение программистское сообщество, разработчики стали называть новый вариант языка object pascal, а после внедрения в системы delphi новых сетевых технологий и очередной модернизации языка появилось наименование язык delphi.",наименование язык,sys,0
"обычно компоновщик в системе программирования ос unix вызывается автоматически, заданием нужных параметров при обращении к компилятору, но может вызываться и явными командами операционной системы.",командами,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",конвейера выполнением,sys,0
"деревом операций обычно пользуются на внутренних стадиях компиляции, предшествующих генерации объектной программы.",генерации,sys,0
"это делает несовместимыми друг с другом программы, подготовленные в рамках разных операционных систем (например, программы, подготовленные для систем windows и linux, имеют разные по структуре таблицы трансляции адресов, хотя и те, и другие должны выполняться на одной и той же аппаратуре процессоре персонального компьютера).",аппаратуре процессоре персонального компьютера,sys,0
оптимизация программ проводится в компиляторах в различных местах: первичную оптимизацию может проводить сам пользователь (пометка i).,первичную оптимизацию,sys,0
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",сборки,sys,0
"означает, что в классе символов на этом месте может стоять любой символ, кроме символа новой строки.",классе символов,sys,0
чаще всего отсутствуют средства первых этапов подготовки требований и проектирования.,подготовки,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",программа пакетной,sys,0
"прямая подстановка функций в основной цикл программы может привести к существенному увеличению скорости работы программы, но одновременно и к увеличению размеров программы (если функция вызывается из нескольких разных мест).",скорости работы программы,sys,0
"начав с проектирования транслятора с языка программирования паскаль, фирма за непродолжительное время создала несколько серий прекрасных систем программирования на языках паскаль, си, си++, пролог и других, включая язык ассемблера для персональной эвм на базе процессоров с архитектурой х86.",серий прекрасных систем программирования,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",конвейерных свойств архитектуры,sys,0
"почти все языки программирования включают в себя некоторые элементы, реализация которых подразумевает, что во время выполнения программы должна 84 обеспечиваться связь с операционной системой.",реализация,sys,0
системы программирования эвм zseries 100 5.,программирования эвм,sys,0
это и есть принципиальное отличие интерпретатора от компилятора.,отличие интерпретатора,sys,0
"поиск по шаблонам помогает обнаруживать в программах некоторые часто используемые ресурсоемкие последовательности 75 операторов, для которых в конкретной аппаратуре объектной машины могут иметься решения, существенно повышающие эффективность их выполнения.",конкретной аппаратуре объектной машины,sys,0
"значениями, которыми инициируются разделы памяти, могут быть последовательности команд (программные разделы) или начальные значения статических объектов данных, в том числе констант.",данных,sys,0
пакетные редакторы не требуют непосредственного присутствия программиста для своей работы.,присутствия,sys,0
"сопровождение является зеркальным отражением разработки и внутри себя содержит все этапы фазы разработки (от определения требований до документирования, внедрения и тиражирования).",этапы фазы,sys,0
"общая структура размещения в памяти отдельных областей такова: из нее понятно, что для двух динамических областей, границы которых нельзя определить заранее, можно выделить общую зону и организовать в ней встречные направления роста стековой области и области с произвольной дисциплиной распределения.",памяти отдельных,sys,0
"в дальнейшем программист имеет возможность, редактируя автоматически созданные таблицы свойств компонентов, изменять значения отдельных свойств, полученные компонентами форм по умолчанию, и создавать обработчики некоторых событий, связанных с компонентами форм.",возможность,sys,0
пустое множество есть регулярное множество.,пустое множество,sys,0
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",использованию,sys,0
"пользователю теперь предоставляют набор как традиционных редакторских возможностей, основанных на редактировании строк по их номерам, которые обычно показываются среди другой служебной информации, так и контекстное редактирование.",редактировании строк,sys,0
"в обычных языках программирования лексемами являются числа (десятичные целые, вещественные), идентификаторы, служебные слова, разделители.",языках программирования,sys,0
"стандарт corba это спецификация для создания и управления объектно-ориентированными приложениями, распределенными в вычислительной сети.",управления,sys,0
"тем самым, при отождествлении входной строки с шаблоном возможно не полное совпадение, а совпадение с выделением фактических параметров.",полное совпадение,sys,0
"\..\exe\cpu -x0x86 -d-s0xfe000 -b0x4005ab -e0x400900 -zt40.n40 - k0x0 -f0x0 -ot40.se0 del t40.?40 особенно эффективна работа в режиме командного файла при выполнении массовых подготовок версий одной программы, отличающихся каким-либо важным параметром, например, паролем, блокирующим несанкционированный запуск готовой программы.",массовых подготовок версий,sys,0
"подобные преобразования могут, например, приводить к замене операции возвышения в степень операциями умножения, а в определенных случаях даже операциями сдвига влево.",степень операциями,sys,0
"это ядро основано на использовании многопотоковых серверов, обменивающихся сообщениями и работающих поверх микроядра mach, разработанного в университете карнеги-меллон (carnegie mellon university) и позднее в университете штата юта (university of utah).",использовании многопотоковых,sys,0
"если в библиотеку будут внесены изменения, вносить какие-либо параллельные изменения в программу, использующую исправленную библиотеку не требуется.",программу,sys,0
"для создания справочных систем разрабатывается специальный системный инструментарий, который можно использовать при разработке собственных программ, обеспечивая и для их пользователей такой же сервис контекстно-зависимых справок, который предоставляется их разработчикам.",систем,sys,0
"в систему программирования встроен удобный интерактивный отладчик, работающий в терминах языка си++ или языка ассемблера и позволяющий одновременно видеть на экране тексты различных фрагментов программ, значения переменных и регистров центрального процессора эвм, стек вызовов процедур и другую необходимую при отладке информацию.",информацию,sys,0
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",процесса преобразования,sys,0
"точная граница между двумя динамическими зонами с разными стратегиями распределения памяти не предусматривается, вместо этого системная поддержка гарантирует проведение постоянного контроля за совокупным размером двух динамических зон.",разными стратегиями распределения,sys,0
"тем самым, при отождествлении входной строки с шаблоном возможно не полное совпадение, а совпадение с выделением фактических параметров.",выделением,sys,0
89 классическим примером проектирования библиотечных средств является пример библиотечной функции сортировки.,примером проектирования библиотечных средств,sys,0
"единственным их недостатком по сравнению с lr(1)-грамматиками является то, что lalr(1)-грамматики ограничивают возможности распознавателей по обнаружению ошибок во входных цепочках символов, точнее заставляют для обнаружения ошибок делать больше шагов вывода.",шагов вывода,sys,0
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",программирования,sys,0
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",момент реального,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",сжатия,sys,0
"этого нельзя сделать даже символически, передав указание следующим компонентам системы программирования: редактор связей также не в состоянии будет определить этот адрес.",программирования,sys,0
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",затруднений,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",входной поток символов,sys,0
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",экране монитора графические,sys,0
"спецификации, написанные на idl corba, могут быть переданы компилятору с этого языка, idl поставщика службы компилятор idl (клиентская сторона) компилятор idl (серверная сторона) прикладной объект (клиент) прикладной объект (клиент) переходник прикладной объект (поставщик скелетон брокер запросов объектов (orb) интерфейс динамического обращения репозиторий интерфейсов interface purchasing { float getquote (in long productid); float purchasegoods (in long productid, in long 138 который формирует заместителя объекта и скелетон.",динамического обращения репозиторий,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",выражения,sys,0
"по техническому составу библиотеки делятся на две категории: библиотеки функций исходного языка и библиотеки функций операционной системы, в составе которой должна будет работать обрабатываемая программа.",техническому составу библиотеки,sys,0
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",программы,sys,0
"128 огромное внимание в описываемой системе программирования уделяется подготовке программ для использования в пакетном режиме традиционном способе разработки программ, применяемом программистами для эвм, выпускавшимися компанией ibm, а также многими ее последователями в течение десятилетий.",режиме традиционном способе разработки,sys,0
"с учетом выделенных объектов для хранения в памяти наиболее целесообразно выбирать для кодов пользовательских программ, кодов системных программ, буферов ввода/вывода: статические области памяти и стратегию статического распределения.",вывода,sys,0
"однако в современных системах программирования наиболее удобным и часто используемым компонентом, обеспечивающим быструю отладку программ, является отладчик, то есть программный компонент, который позволяет выполнять основные задачи, связанные с отслеживанием хода выполнения объектной программы организовывать проверочные запуски программ, способствовать локализации и исправлению ошибок.",основные задачи,sys,0
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",данным,sys,0
"память может освобождаться либо после завершения выполнения всей программы, либо по указанию главной программы, 81 которая просигнализирует, что некоторая библиотека больше использоваться ею не будет.",выполнения,sys,0
"однако лексический анализатор не может действовать, как простой синтаксическ ий анализатор исходная программа лексически й анализатор таблица идентификато ров (таблица очередн имен) ая лексема обращени е за лексемой идентифи- каторы исходная программа лексически й анализатор таблица идентификато ров (таблица имен) таблица лексем очередная лексема и идентификато ры обращени е за лексемой идентифи- каторы синтаксическ ий анализатор лексемы 43 преобразователь, его задача шире, чем только порождение цепочки символов выходного языка.",лексемой идентифи-,sys,0
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",достаточной гибкостью,sys,0
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",именованных констант,sys,0
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",вариантам управления,sys,0
"серверы приложений позволяют работать с самыми разнообразными клиентскими программами, что важно при работе именно в разнородной глобальной сети.",приложений,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",реальных компиляторах,sys,0
"как и языки ассемблеров, язык внутреннего представления программ в интерпретаторах разрабатывается в таком виде, чтобы на второй фазе (фазе интерпретации) легко его расшифровывать и тратить минимум времени на анализ каждого отдельного предложения внутреннего языка при его выполнении.",времени,sys,0
"во-вторых, внутреннее представление может оказаться относительно независимым от объектной машины, что делает оптимизатор достаточно устойчивым к изменениям при переносе на другую машину.",машину,sys,0
"значениями, которыми инициируются разделы памяти, могут быть последовательности команд (программные разделы) или начальные значения статических объектов данных, в том числе констант.",начальные значения статических объектов,sys,0
в обычных системах последовательность вызова процедур или обращений к методам классов формально никак не регламентирована.,методам,sys,0
"в то же время сетевые службы сами по себе пригодны для использования и в более локальных системах, с их помощью могут даже взаимодействовать отдельные независимые компоненты серверов приложений.",использования,sys,0
при этом в программах производится умножение этих величин на значение переменной цикла.,значение,sys,0
"кроме того, языковое окружение упрощает взаимодействие между приложениями, написанными на разных языках или для разных операционных сред, за счет специальных интерфейсных средств.",приложениями,sys,0
эти процедуры непосредственно отвечают за подбор параметров и их упаковку в исходящие сообщения с последующими обращениями к системе для их отправки.,системе,sys,0
"обработка ведется на основе концепции конечного автомата, диаграмма состояний которого описывается регулярными выражениями.",выражениями,sys,0
"результатом работы транслятора также является программа, строится она по синтаксическим правилам выходного языка, ее семантика определяется семантикой выходного языка (программа no 3, результирующая).",семантикой выходного,sys,0
"объектно-ориентированная декомпозиция связана с выделением отдельных объектов, которые способны воспринимать направляемые им сообщения и отвечать выполнением тех или иных ответных действий.",ответных действий,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",классов,sys,0
"процесс макрообработки текстов концептуально делится на две фазы первая из них это ввод макроопределений, вторая фаза состоит в обработке макровызовов.",макровызовов,sys,0
"в дальнейшем программист имеет возможность, редактируя автоматически созданные таблицы свойств компонентов, изменять значения отдельных свойств, полученные компонентами форм по умолчанию, и создавать обработчики некоторых событий, связанных с компонентами форм.",компонентами форм,sys,0
"перед выполнением присваивания значение счетчика ссылок блока, на который ссылается указатель p, уменьшается на единицу, при этом одновременно увеличивается на единицу значение счетчика ссылок блока, на который ссылается указатель q. только после этого можно выполнять само присваивание.",выполнением присваивания,sys,0
"после получения от сервера ответа, он распаковывается из сетевого сообщения и возвращается клиенту в качестве результата работы процедуры.",качестве,sys,0
"эти программные комплексы не только работают, но и создаются в распределенном окружении, в котором разные программисты работают с разными системами программирования, создавая относительно независимые компоненты единой сложной программы.",распределенном окружении,sys,0
"этот язык можно даже рассматривать не как аналог, а как образец, используемый разработчиками новых объектно-ориентированных языков на базе языка паскаль.",языков,sys,0
"например, в системе программирования visual c++ компании microsoft при работе с программой в одном из окон интегрированной системы демонстрируется полная иерархия классов, относящаяся к активному проекту.",компании,sys,0
"концепция стандартных модулей, предложенная в языке под названием turbo pascal, некоторыми своими чертами напоминает подход, описанный в языке модула-2 с помощью модулей определений и модулей реализации.",определений,sys,0
система графическог о редактирова ния 25 в поисках преодоления этого недостатка разработчики систем программирования предложили концепцию командных файлов.,недостатка разработчики систем программирования,sys,0
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",внутреннего представления,sys,0
"пояснение дает разработчику представление о том, что может следовать дальше.",разработчику представление,sys,0
59 передача параметров через регистры процессора относится к машинно-зависимой оптимизации.,оптимизации,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",фиксированный интерфейс,sys,0
системы программирования компании borland 83 4.2.1 .,системы,sys,0
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",задачу создания единой универсальной,sys,0
"особенно профилировщики важны при отладке программ, предназначенных для работы в реальном масштабе времени, ошибки в которых могут проявляться далеко не сразу после их возникновения.",работы,sys,0
"этап компоновки есть этап формирования полной программы или программного комплекса из некоторого количества автономно запрограммированных, автономно отлаженных и автономно протестированных компонентов.",программы,sys,0
"для профессионалов"".",профессионалов,sys,0
"в настоящее время доступно множество специальных средств автоматизированного тестирования программ, обеспечивающих управление тестированием, высокую скорость тестирования и повторяемость тестов.",управление,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",пакетной подготовки,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",программирования,sys,0
некоторые языки допускают автоматическое преобразование типов несогласованных операндов выражений.,автоматическое преобразование,sys,0
"20 библиотеки содержательная часть (средства ввода/вывода, наборы функций, для объектно-ориентированных языков классы и компоненты как системы классов) средства работы с библиотеками (например, работа с иерархиями классов), то есть библиотекари.",библиотеки содержательная,sys,0
в основе каждого из видов внутреннего представления программ лежит некоторый метод представления синтаксического дерева.,метод представления синтаксического,sys,0
"в настоящее время можно считать, что ни одна вычислительная система не воспринимает напрямую программы, подготавливаемые к исполнению людьми: все программы для получения результата их работы должны пройти предварительную обработку.",людьми,sys,0
критерии проектирования стандартных библиотек 69 3.7.,критерии,sys,0
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",функции,sys,0
"примерами таких макропроцессоров могут служить препроцессоры, встроенные в компиляторы некоторых языков программирования (pl/1, си, си++, различные языки ассемблера).",препроцессоры,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",ситуации,sys,0
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",определение требований,sys,0
потребность создания прикладных пакетов существует для каждой прикладной области.,потребность создания прикладных,sys,0
профилировщик позволяет разработчику точно настраивать поведение системы в условиях реальной эксплуатации и визуализировать события для быстрого обнаружения проблемы.,проблемы,sys,0
"например, если в системе команд машины имеется формат непосредственных данных (данных, размещаемых непосредственно в самой команде), то распределять память для некоторых целочисленных (а иногда и вещественных) констант в статической памяти не обязательно, они будут размещены в самой программе.",системе,sys,0
"подсказка возникает на экране в том случае, когда разработчик ввел какую-то часть исходного текста, определенную лексическим анализатором как начало некоторого заслуживающего внимания фрагмента.",часть исходного,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",функций,sys,0
"это наиболее удобная для людей, но наименее удобная для автоматической обработки запись.",обработки,sys,0
"необязательное вхождение (нуль или один раз) двойные кавычки используются для цитирования, то есть непосредственного указания последовательности символов: a.+ обозначает строку из четырех символов (без самих кавычек) приведем примеры записи регулярных выражений, правильных с точки зрения программы lex: if / идентификатор if / [a-z][a-z0-9] / идентификатор / [0-9] / число / ([0-9]+ .",кавычек,sys,0
помощь в автоматизации графического интерфейса пользователя (graphical user interface gui).,помощь,sys,0
в системе программирования с++ builder явно прослеживается тенденция построения многоязыковых систем программирования.,построения многоязыковых,sys,0
"в задачу этих систем входит создание и изменение конфигураций программ, их комплексирование, регистрация поставок, а также обеспечение повторного использования программ.",повторного использования программ,sys,0
"написание текста чаще называется программированием или кодированием, этот этап заканчивается, когда в наличии оказывается текст программы на некотором языке программирования.",текст программы,sys,0
дополнение внутреннего представления 35 3.3.2.,представления,sys,0
в описании компонента реализация интерфейсов обычно не зафиксирована.,описании компонента реализация интерфейсов,sys,0
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",систем,sys,0
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",программе,sys,0
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",подготовке,sys,0
"имея представление программы в виде дерева, удобно проводить преобразования, связанные с перестановкой фрагментов программы и переупорядочением операций.",фрагментов,sys,0
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",объектов базовых,sys,0
"любая современная система программирования содержит не только трансляторы, но и служебные библиотеки процедур, функций, макроопределений, классов, а также средства компоновки программных комплексов из отдельных составляющих модулей современные системы программирования все чаще взаимосвязаны, а иногда и интегрированы с программными средствами, применяемыми на первых этапах жизненного цикла от формулирования требований и их анализа до автоматизированного проектирования программ, включая в свой состав средства автоматизированного проектирования (case-технологии).",служебные библиотеки процедур,sys,0
"работа в режиме командной строки, в том числе для выполнения обычных действий, с которых начинается непосредственная подготовка программ в системах программирования начального заведения и редактирования текстов, выполняется в системах unix с помощью специальных средств интерпретаторов языка управления заданиями, которые в unix называются командными интерпретаторами.",режиме командной,sys,0
система vba представляет собой единую комплексную среду для поддержки разработки сложных прикладных программ и автоматизированных документов.,разработки,sys,0
"проход это процесс последовательного чтения компилятором данных из внешней памяти, их обработки и записи результата во внешнюю память.",чтения,sys,0
"для записей о текущем состоянии процесса выполнения программ, а также для записей о входах в блоки операторов, которые можно рассматривать в качестве процедур без параметров.",текущем состоянии процесса выполнения,sys,0
"в последнее время системная поддержка распределенных программ, взаимодействующих в интернете, приняла форму, которая называется сервером приложений, а само взаимодействие в этой сети стало осуществляться посредством использования сетевых служб.",само взаимодействие,sys,0
"тем самым, назвать триады полностью линейной структурой нельзя.",линейной структурой,sys,0
"поскольку этап проектирования опирается на результаты первого этапа, уже на этом этапе широко используется база данных проекта.",проекта,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,анализа,sys,0
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",организации взаимодействия центральных процессоров,sys,0
"единственным их недостатком по сравнению с lr(1)-грамматиками является то, что lalr(1)-грамматики ограничивают возможности распознавателей по обнаружению ошибок во входных цепочках символов, точнее заставляют для обнаружения ошибок делать больше шагов вывода.",обнаружению,sys,0
можно наблюдать и обратное влияние на систему unix со стороны проекта gnu.,влияние,sys,0
"д. многие современные системы программирования предоставляют развитые средства этапа документирования создаваемых программных продуктов, сложность которых постоянно возрастает, что, в свою очередь, делает все более важной хорошую документацию.",многие современные системы программирования,sys,0
"клиентский переходник содержит те процедуры, которые будет непосредственно вызывать клиентская программа.",программа,sys,0
"в случае выбора стековой дисциплины необходимо выделить некоторый фрагмент свободной памяти, на котором при запросах ресурсов памяти будет моделироваться работа со стеком областей памяти в стиле первым освобождается последний из ранее размещенных фрагментов памяти .",фрагментов,sys,0
"эта программа обрабатывается компилятором lex, в результате чего получается текст на языке программирования си (в настоящее время существуют версии программы lex, создающие выходные тексты на других языках, например, си++, паскаль, java).",тексты,sys,0
"согласование результатов с пользователями производится только в точках, планируемых после завершения каждого этапа работ, требования к программному обеспечению зафиксированы в техническом задании на все время разработки.",время разработки,sys,0
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",обработки,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",синтеза,sys,0
иногда системы программирования строятся без какого-либо интегрирующего звена.,системы,sys,0
"можно также задавать правоассоциативность (%right) терминалов и их неассоциативность (%nonassoc), которая означает невозможность комбинирования операторов (например, операторов отношения > ).",невозможность,sys,0
"ключевым элементом данного способа является использование стандартных процедур языка управления заданиями (job control language, jcl), хранящихся в системной библиотеке и предназначенных для компиляции, редактирования связей и исполнения различных программ, написанных на том или ином языке высокого уровня.",ключевым элементом,sys,0
"в случае машинных команд распознавателем этой последовательности символов будет выступать целевая вычислительная система, для которой создается результирующая программа.",программа,sys,0
"кроме того, выпускается целый ряд продуктов, таких как ibm visual age, ibm application development tool, которые поставляются вне z/os и служат для автоматизации и повышения эффективности процесса разработки приложений.",повышения эффективности процесса разработки,sys,0
"отказ от универсального стекового механизма в определенных случаях может приводить к значительному снижению времени работы программы, но передача параметров через регистры зависит от количества доступных регистров в вычислительной системе и от используемого в компиляторе алгоритма их распределения.",значительному снижению времени,sys,0
архитектура строящейся системы описывается в терминах языка uml в виде набора графических моделей.,терминах языка,sys,0
"международной организаций по стандартам iso, институтом ieee и другими организациями, в том числе структурами правительства россии, утверждены стандарты, описывающие процессы, виды деятельности и задачи жизненного цикла программ и программно-аппаратных систем, а также результаты, достигаемые с помощью различных видов деятельности.",различных видов деятельности,sys,0
"подобные указания имеют для компиляторов рекомендательный характер, но часто помогают получить хорошо оптимизированные программы.",подобные указания,sys,0
"однако система com содержит все элементы, необходимые для построения распределенной системы, в частности, компонентную модель, библиотеки классов, которые могут быть импортированы для анализа структуры серверов сом, универсальный протокол обмена между клиентами и серверами и другие.",системы,sys,0
в некоторых случаях перестановка операций может приводить к потере точности вычислений.,случаях перестановка,sys,0
"для уменьшения зависимости прикладных программ от конкретной базы данных этот процессор предоставляет пользователям единый интерфейс, благодаря чему при смене базы данных приложение остается вполне работоспособным.",конкретной базы,sys,0
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",архив системы готовой,sys,0
"точно также только разработчик программы может точно знать, когда можно освободить память от используемой библиотеки.",программы,sys,0
"среди задач системы управления проектом находятся планирование работ (составление списка задач, длительности и графиков выполнения проекта, оценка затрат на выполнение проекта, распределение ресурсов, необходимых для решения задач, распределение ответственности по решаемым задачам).",задач системы управления проектом,sys,0
"для удобства использования над компонентами позволяется проводить операцию контейнеризации, то есть помещения в контейнеры, допускающие внешнее визуальное представление.",удобства,sys,0
"создаваемые с использованием универсальных модулей языковой среды приложения могут выполняться в различных операционных средах, включая как внутрисистемные (например, unix shell), так и среды промежуточного слоя (db2, cics).",использованием универсальных,sys,0
в обычных системах последовательность вызова процедур или обращений к методам классов формально никак не регламентирована.,обычных системах последовательность,sys,0
процессы жизненного цикла программных средств.,цикла программных,sys,0
на основе объектно- ориентированной декомпозиции сложные программные системы удается строить путем эволюционного развития небольших подсистем.,декомпозиции сложные программные системы,sys,0
"необходимо сначала подключить к программе недостающие фрагменты, одни из которых (может быть) надо сначала откомпилировать, а другие (может быть) добавить из набора уже откомпилированных программ, либо из библиотек.",библиотек,sys,0
транслятор обрабатывает конкретную последовательность предложений входного языка.,конкретную последовательность предложений входного,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",программу,sys,0
"компилятор может изменять характер и порядок следования операций на основании известных алгебраических и логических тождеств, например, заменять выражение a=b c+b d выражением a=b (c+d).",операций,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",анализатора исходная,sys,0
"эти модули могут быть получены редактором связей непосредственно от компилятора, а могут извлекаться им из библиотек, которые также указываются среди параметров запуска компоновщика.",связей,sys,0
"управление рисками заключается в идентификации рисков и в предупреждении рисков, то есть снижении степени их негативного влияния на выполнение проекта.",идентификации,sys,0
"каждый виток спирали соответствует созданию фрагмента или версии программ, на нем уточняются цели и характеристики проекта, определяется качество проектирования, планируются следующие работы.",виток спирали,sys,0
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",нисходящей схеме,sys,0
", а также для переменных, размеры которых меняются в процессе выполнения программы (объекты типа vector из библиотеки stl).",выполнения,sys,0
"однако в его заголовке имеется бит, указывающий на то, что файл относится к технологии .net.",заголовке,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",локальных объектов,sys,0
89 классическим примером проектирования библиотечных средств является пример библиотечной функции сортировки.,классическим примером проектирования,sys,0
"широко известны и свободно распространяемые системы управления версиями, среди которых лидером является система cvs (concurrent versions system).",версиями,sys,0
"обрабатывая информацию, содержащуюся в этой таблице, загрузчик создает окончательное представление тех команд программы, которые еще не были к этому времени сформированы.",представление,sys,0
система сом не является системой программирования в классическом значении этого термина.,система,sys,0
удк ббк 3 isbn издательский отдел факультета вычислительной математики и кибернетики мгу им. м.,кибернетики,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",основные методы,sys,0
системы управления версиями программных комплексов в настоящее время многие системы программирования начали включать в свой состав системы управления версиями.,комплексов,sys,0
"для проведения оптимизации программы делят на линейные участки, то есть на выполняемые по порядку последовательности операций.",последовательности операций,sys,0
"компонентная разработка предлагает строить такие системы последовательно из отдельных элементов компонентов , каждый из которых, в свою очередь, может рассматриваться как отдельная программная система.",разработка,sys,0
"особой заботой компиляторов являются имена внешних (глобальных) объектов, которые остаются видимыми в объектной программе и могут обрабатываться другими компонентами систем программирования, например, редакторами связей.",компонентами систем,sys,0
"он поставляется с большинством версий этой операционной системы, но в настоящее время он уступает по своим качествам отладчикам других распространенных систем программирования (например, отладчикам компаний borland и microsoft), а также другим отладчикам системы unix (например, objectworks\c++), поставляемым на коммерческой основе.",качествам отладчикам других распространенных,sys,0
"тем самым, удается добиться некоторой общности, то есть возможности сортировать некоторые объекты (доступные с помощью указателей, передаваемых функции сортировки в качестве других параметров) не только по возрастанию, но и по убыванию и, вообще, по произвольным критериям.",функции,sys,0
очень важным фактором развития системы eclipse является ее свободное распространение с полным набором исходных текстов.,важным фактором,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",распределении,sys,0
"работа с блоками, выделенными и освобождаемыми по неявным запросам, проводится по-разному, в зависимости от выбираемого алгоритма определения занятости блока.",выбираемого алгоритма,sys,0
"programming languages , academic press, 1968 ( языки программирования , под ред.",программирования,sys,0
"спецификация corba позволяет пользователям систем, построенных на ее основе, организовывать свои программы в виде служб, предоставляющих услуги другим программам, то есть таким же службам или более традиционно построенным программам пользователей.",спецификация,sys,0
"тетрады записываются в линейной последовательности, поэтому их легко преобразовать в последовательность команд объектной программы, либо в язык ассемблера, но в отличие от языка ассемблера, тетрады не зависят от архитектуры вычислительной системы, для которой ведется компиляция, и являются машинно-независимым представлением программ.",программы,sys,0
"каскадная схема хорошо пригодна для моделирования процессов разработки такого программного обеспечения, для которого с самого начала удается достаточно точно и полно сформулировать все требования, с тем, чтобы затем предоставить разработчикам свободу выбора наиболее подходящих технических методов реализации.",методов,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",различные функции,sys,0
"номенклатура готовых компонентов постоянно расширяется, библиотеки компонентов (vcl visual component library), настолько обширны, что позволяют легко создавать самые сложные диалоговые формы.",номенклатура готовых,sys,0
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",внутреннем представлении программы,sys,0
"интегрированная среда разработки программ объединяет в себе возможности текстовых редакторов и командного языка компилятора, а также некоторых других компонентов системы программирования, например, редактора связей и отладчика.",возможности текстовых,sys,0
"единственным их недостатком по сравнению с lr(1)-грамматиками является то, что lalr(1)-грамматики ограничивают возможности распознавателей по обнаружению ошибок во входных цепочках символов, точнее заставляют для обнаружения ошибок делать больше шагов вывода.",обнаружения,sys,0
"например, идентификаторы некоторого языка программирования, представляющие собой букву, за которой следует нуль или несколько букв или цифр, можно определить с помощью регулярного выражения таким образом: letter(letter digit) правила построения лексических единиц такого языка можно записать так: letter a b ... z a b ... z digit 0 1 2 ...",правила построения,sys,0
"чтобы обобщенная функция сортировки sort(), которая должна упорядочивать целые числа по возрастанию, производила упорядочения целых чисел по убыванию, достаточно привлечь понятие функционального объекта: class intgreater { public: bool operator()(int x, int y) const { return x > y; } }; int main () { int x [1024]; ............ // инициализация sort ( x [0], x [1024]); // обычное упорядочивание sort ( x [0], x [1024], intgreater ()); // упорядочивание по убыванию } при таком использовании эффективность по скорости выполнения будет такой же, как и при написании сортировки целых чисел вручную, а реально может оказаться и выше за счет удачного выбора алгоритма сортировки.",функционального объекта,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",оптимизация вычисления логических,sys,0
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",редактор,sys,0
"для получения готового клиентского приложения, она должна быть загружена вместе с программой клиента.",приложения,sys,0
"чтобы обобщенная функция сортировки sort(), которая должна упорядочивать целые числа по возрастанию, производила упорядочения целых чисел по убыванию, достаточно привлечь понятие функционального объекта: class intgreater { public: bool operator()(int x, int y) const { return x > y; } }; int main () { int x [1024]; ............ // инициализация sort ( x [0], x [1024]); // обычное упорядочивание sort ( x [0], x [1024], intgreater ()); // упорядочивание по убыванию } при таком использовании эффективность по скорости выполнения будет такой же, как и при написании сортировки целых чисел вручную, а реально может оказаться и выше за счет удачного выбора алгоритма сортировки.",использовании эффективность,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",программы,sys,0
"если же такого просмотра оказывается недостаточно, а его часто оказывается недостаточно, организуются дополнительные просмотры отдельных фрагментов программы, причем выполняются они не по исходному тексту, а по его внутреннему представлению.",просмотры,sys,0
"некоторые интерпретаторы построены так, что исполняют исходную программу последовательно, по мере поступления программы на вход интерпретатора.",поступления программы,sys,0
"только из неформальных описаний семантики процедур и методов, а также из примеров, обычно включаемых разработчиками в документацию, при программировании приложений удается добиться правильной последовательности вызовов.",программировании,sys,0
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",деятельности,sys,0
в эту систему заложена идея разделения функций отображения информации на экране по принципу функции клиента и функции сервера.,разделения функций отображения информации,sys,0
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",язык описания интерфейсов,sys,0
"основное назначение редактора связей завершить ту часть работы, которая принципиально не могла быть выполнена компилятором, а именно, осуществить привязку нескольких модулей друг к другу.",назначение редактора,sys,0
"это упростило работу по запуску компонентов систем и позволило перейти к еще более удобному способу работы использованию специализированных командных процессоров, ориентированных на запуск компонентов систем программирования.",работы использованию,sys,0
задача следующего преобразования преобразовать условные адреса разделов памяти в истинные (абсолютные).,разделов,sys,0
"примером таких событий может быть событие, возникающее при нажатии на левую кнопку мыши в тот момент, когда указатель мыши находится на экране эвм непосредственно в зоне, отведенной для изображения некоторого компонента формы, например, изображения какой-либо клавиши.",изображения,sys,0
карпов системы программирования удк ббк печатается по решению редакционно- издательского совета факультета вычислительной математики и кибернетики мгу им. м.,решению редакционно-,sys,0
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",выполнения программы,sys,0
подсказка может принимать форму пояснения или варианта дальнейшего ввода текста.,варианта дальнейшего,sys,0
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",конструкция,sys,0
первая перспектива служит для выбора репозиториев и модулей для подсоединения и анализа содержащихся в них файлов.,первая перспектива,sys,0
"большинство компиляторов и редакторов связей в своей работе формируют таблицы, в которых объектам программ сопоставлены зоны памяти целевой вычислительной системы.",зоны памяти целевой,sys,0
"в остальном схема формирования сетевой службы напоминает аналогичные схемы формирования серверной и клиентской частей в системах, основанных на моделях удаленного вызова процедур и удаленного обращения к методам.",сетевой службы,sys,0
"циклом в программе называется любая последовательность участков программы, которая может выполняться повторно.",участков программы,sys,0
"все более явственно просматривается тенденция строить сами системы программирования в объектно-ориентированном стиле, то есть включать в состав этих систем средства, позволяющие вести проектирование программ (и даже само техническое программирование) на основе принципов объектно- ориентированного подхода.",ориентированном стиле,sys,0
"как и все сложные системы, сложные программы имеют иерархическую структуру, а уровни их иерархии отражают различные уровни абстракции, следующие друг из друга, но не тождественные друг другу.",сложные системы,sys,0
"символ - используется для обозначения диапазона в классе символов, символ .",обозначения,sys,0
"способы задания параметров, режимов работы и действий пользователя во всех компонентах одинаковы или похожи, хотя каждый компонент обладает собственными специализированными средствами.",задания параметров,sys,0
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",набор системных,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",функцией,sys,0
"достигается это примененным методом описания той вычислительной машины, для которой должна осуществляться трансляция.",примененным методом,sys,0
неопределенность размера динамической памяти не позволяет компилятору непосредственно зафиксировать ее адрес.,неопределенность размера динамической памяти,sys,0
"128 огромное внимание в описываемой системе программирования уделяется подготовке программ для использования в пакетном режиме традиционном способе разработки программ, применяемом программистами для эвм, выпускавшимися компанией ibm, а также многими ее последователями в течение десятилетий.",программ,sys,0
управление сборкой программы ведется в этом случае вручную .,управление,sys,0
"во всех таких случаях компилятор должен сформировать команды, обеспечивающие своевременное выделение памяти, необходимой для выполнения операции, а также последующее освобождение этой памяти.",выделение памяти,sys,0
"так, например, в систему входят сразу два редактора связей: стандартный linkage editor и усовершенствованный program management binder.",редактора,sys,0
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",стандарта,sys,0
"для оптимизации циклов разработаны и специальные методы: вынесение инвариантных вычислений из тела цикла, замена операций с переменными цикла, слияние, расщепление и развертывание циклов.",вынесение,sys,0
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",цепными присваиваниями,sys,0
для таких имен в конкретных системах программирования могут существовать собственные соглашения именования.,конкретных системах,sys,0
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",типов параметров,sys,0
26 основное преимущество интегрированной среды в удобстве работы ее пользователя.,основное преимущество,sys,0
число оставшихс я в программе затраты на тестирование наивно-традиционный взгляд г. майерс современная теория хаоса 99 техническое тестирование дает возможность проверить безопасную и эффективную работу созданной программы в нормальном и пиковом режимах ее использования.,техническое тестирование,sys,0
"если это файл с текстом программы, один вид покажет физическое месторасположения в файле и иерархии пакета, а другой вид покажет методы класса и атрибуты.",иерархии,sys,0
"сегодня количество пользователей системы gnu, распространяемой с открытыми исходными текстами программ и электронной документацией, оценивается в десять миллионов человек.",текстами программ,sys,0
"основные требования к системам программирования важнейшим из требований, которые предъявляются системам программирования, является требование согласованности интерфейсов и непротиворечивости результатов работы компонентов этих систем.",основные требования,sys,0
"по-существу, при взаимодействии сетевых служб и происходит обращение одной службы (выступающей в данном случае в роли клиента) к удаленной процедуре, реализованной внутри другой службы, являющейся в этот момент сервером.",взаимодействии сетевых,sys,0
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",средах разработки,sys,0
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,системы,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",данные стек куча,sys,0
"в особенности триады удобны для трансляции в объектный код таких вычислительных машин, в командах которых первый операнд часто хранится в одном из регистров.",триады,sys,0
и. король.,король,sys,0
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",управления,sys,0
"при динамическом распределении возможно применение различных дисциплин, наиболее известны из которых стековая дисциплина распределения и дисциплина произвольного распределения (распределение в куче ).",стековая дисциплина распределения,sys,0
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",разработки программ,sys,0
"в основе курса изучение комплексной системы программирования, обеспечивающей поддержку всего жизненного цикла программных продуктов, начиная от их проектирования и заканчивая их сопровождением в процессе эксплуатации.",программирования,sys,0
"появление интегрированной среды разработки позволило интегрировать в них и текстовые редакторы, точнее диалоговые экранные редакторы текстов.",появление интегрированной,sys,0
некоторые известные своим широким применением в системах unix лицензированные программы имеют в системе gnu свои свободно распространяемые аналоги.,программы,sys,0
"кроме того, выпускается целый ряд продуктов, таких как ibm visual age, ibm application development tool, которые поставляются вне z/os и служат для автоматизации и повышения эффективности процесса разработки приложений.",разработки,sys,0
"построение системы (construction), то есть окончательное уточнение требований и собственно разработка системы в рамках ранее определенной структуры.",структуры,sys,0
"стратегия является эффективной, если тесты, включенные в нее, с большой вероятностью обнаружат ошибки тестируемого объекта.",объекта,sys,0
"в задачу этих систем входит создание и изменение конфигураций программ, их комплексирование, регистрация поставок, а также обеспечение повторного использования программ.",изменение,sys,0
"весь комплекс программ, поставляемых компанией microsoft, следует называть единой операционной средой, предназначенной для разработчиков системного и прикладного программного обеспечения.",разработчиков системного,sys,0
"все статические библиотеки подключаются к программам, готовящимся к выполнению, ровно один раз в момент формирования редактором связей полной программы.",связей полной,sys,0
эффективность уплотнения свободных участков областей памяти (эффективность объединения свободных фрагментов во фрагменты суммарного размера).,свободных участков областей памяти,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",програм объектн ая програм,sys,0
дейкстра.,дейкстра,sys,0
"именно это согласование превращает наборы системных программ в единую систему, нацеленную на решение своей основной задачи поддержку единого процесса подготовки программ.",задачи поддержку единого,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",автономной отладке,sys,0
"в таких файлах заранее записывались директивы операционной системы, необходимые для активации всего тракта обработки программ от запуска компилятора до записи в архив системы готовой программы или передачи ее на исполнение, как в таком файле, содержащем директивы операционной системы ms dos: echo off if exist t40.",активации,sys,0
"тесная связь с языком позволяет включать в состав интегрированных систем полезные вспомогательные средства, которые способны проводить анализ текстов программ и находить в них определения объектов данных, их структур, классов.",тесная связь,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",качестве параметра,sys,0
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",технологии,sys,0
"delphi появление новой серии программных продуктов фирмы borland, с маркой delphi, фактически привело к завершению ранее выпускавшейся серии turbo pascal.",продуктов,sys,0
"определение занятости блока с помощью счетчика ссылок основано на постоянном контроле числа указателей, имеющихся в программе и содержащих ссылки на объекты, размещенные в данном блоке памяти.",памяти,sys,0
"пользователю становятся доступными только результаты самого последнего прохода в виде объектной программы, сформированной компилятором, никакие промежуточные результаты компиляции пользователю не видны.",программы,sys,0
"в отличие от системы visual basic, система vba не предназначена для создания автономных программ.",программ,sys,0
часто подобные действия выполняются непосредственно при обнаружении лексемы в исходном тексте.,исходном тексте,sys,0
во время каждой итерации система автоматически контролирует приближение реализации к описанным вариантам использования.,итерации система,sys,0
"достаточный уровень масштабируемости больших систем, которые на практике могут поддерживать одновременную работу нескольких тысяч пользователей, может быть достигнут только с помощью децентрализации основных служб системы и управляющих ею алгоритмов, которая все шире внедряется в практику построения распределенных систем, в частности, современных сетевых служб.",достаточный уровень масштабируемости больших,sys,0
"по-существу, при взаимодействии сетевых служб и происходит обращение одной службы (выступающей в данном случае в роли клиента) к удаленной процедуре, реализованной внутри другой службы, являющейся в этот момент сервером.",роли клиента,sys,0
"уровни приоритетов лексем определяются порядком их перечисления в разделе объявлений, поэтому приоритет унарного минуса из приведенного примера оказывается выше приоритета умножения и деления.",приоритета умножения,sys,0
"только специальный вид lr(1)-грамматик, называемый грамматиками lalr(1), то есть look ahead lr(1)-грамматиками, позволяет разработать метод разрешения конфликтов на основании правого контекста длиной 1.",метод разрешения,sys,0
"если в схемах, выбираемых для обработки явных запросов, практически не возникает никаких накладных расходов, то при неявном управлении памятью без больших накладных расходов памяти обойтись не удается.",накладных расходов,sys,0
однако самый первый подкаталог имеет другое назначение.,первый подкаталог,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",программирования,sys,0
"загрузчики могут включаться в состав систем программирования, но чаще они оказываются составными частями операционных систем, поскольку выполняемые ими функции не только зависят от архитектуры вычислительной системы, в которой должна выполняться программа, но также и от конкретной физической конфигурации этой системы (в частности, от точного количества и размеров модулей памяти).",размеров,sys,0
"с учетом выделенных объектов для хранения в памяти наиболее целесообразно выбирать для кодов пользовательских программ, кодов системных программ, буферов ввода/вывода: статические области памяти и стратегию статического распределения.",буферов ввода,sys,0
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",помощью,sys,0
"доступны и другие системы управления проектами, например, система timeline, представляющая собой очень хорошую систему для ведения единой базы проектов.",хорошую систему,sys,0
"программистам стали предоставлять графический пользовательский интерфейс, ставший вскоре после своего появления неотъемлемой составной частью многих современных операционных систем и графических оболочек.",частью,sys,0
система программирования в процессе создания форм автоматически создает программу на языке visual basic.,процессе создания,sys,0
в программе не должно быть невыполняемых в принципе операторов.,программе,sys,0
"интегрированные среды позволяют гибко переходить от отладочной конфигурации комплексов к оптимизированной конфигурации, что облегчает процесс сопровождения уже разработанных программ.",процесс,sys,0
процесс подготовки большого числа почти одинаковых программ проводится в пакетном режиме работы операционной системы без оперативного контроля со стороны оператора и даже без его присутствия.,пакетном режиме работы,sys,0
после подключения компоненты статической библиотеки становятся неотъемлемой частью программы и в дальнейшем распространяются вместе с нею.,неотъемлемой частью программы,sys,0
"с этим можно было бы примириться, если бы разрывы между разработкой и сопровождением не приводили к разрыву между разработкой и использованием: приведенные схемы соответствуют, так называемым, одноразовым разработкам.",разрыву,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",использования,sys,0
их реализации позволяют скрытым от пользователей образом организовать маршалинг и сериализацию параметров и возвращаемых значений методов.,пользователей,sys,0
"удобны координаторы make тем, что позволяют отслеживать зависимости в больших наборах файлов, составляющих цельную программу, что упрощает процесс сборки проектов.",больших наборах файлов,sys,0
"однако в последнее время все большее распространение приобретают подходы, поддерживающие более динамичные асинхронные формы взаимодействия, а также системы распределенного программного обеспечения, взаимодействующие на основе обмена сообщениями.",основе,sys,0
"технология .net решает задачу создания единой универсальной платформы (базы) программирования, равно годящейся для разработки любых программ обычных приложений, приложений для работы с базами 115 данных, сетевых служб, приложений для мобильных и переносных устройств.",базами,sys,0
некоторые языки программирования (алгол-60 и паскаль) специально разрабатывались в расчете на использование подобной схемы компиляции.,схемы компиляции,sys,0
"например, для машин с конвейерной или векторной архитектурой очень важно распознавать в программах, так называемые ливерморские циклы.",программах,sys,0
более сложным является распределение на основе анализа графа потока управления.,основе анализа графа,sys,0
"это привело к созданию концепции java, в которой переносимость достигается трансляцией текста программы в промежуточный язык, называемый байт-кодом, который затем интерпретируется виртуальной машиной java (java virtual machine, jvm).",машиной,sys,0
"поскольку от программных продуктов, создаваемых и работающих под управлением системы z/os, требуется совместимость с продуктами, разработанными для ранее выпускавшегося аппаратного и системного программного обеспечения, обладавших ограниченными возможностями (например, ранее использовался только 24-разрядная система аппаратной адресации и короткие имена внешних объектов), в состав новой системы программирования включаются сразу по несколько компонентов, выполняющих сходные функции, но работающие в разных режимах совместимости.",внешних объектов,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",конвейера выполнением операции,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",назначения системы,sys,0
"базы данных справочных систем дополняются индексами, облегчающими поиск информации.",справочных систем,sys,0
"возможен и вариант, когда память, занимаемая динамически подгруженным компонентом, будет освобождена непосредственно после завершения выполнения этого компонента.",вариант,sys,0
"в стандартной библиотеке языка программирования си эта функция (в языке си функция сортировки реализует алгоритм быстрой сортировки и называется qsort()) получает в качестве параметра функцию сравнения сортируемых элементов, а не использует для сравнения какую-либо операцию языка си, например, операцию < .",программирования,sys,0
на этапе написания программ (кодирования) в системах программирования нужно иметь средства автоматизации (пусть частичной) написания программ.,средства,sys,0
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",программы,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",проблемы,sys,0
"они получают на вход исправляемый текст и пакетное задание на редактирование, в котором указано, какие фрагменты текста надо из текста исключить, какие переставить местами, какие фрагменты следует заменить другой информацией, которая также включена в пакетное задание.",пакетное задание,sys,0
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",завершения,sys,0
одним из примеров такой стандартизации является стандарт брокера объектов corba (common object request broker architecture).,примеров,sys,0
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",представлении программы,sys,0
"этапы жизненного цикла работа с программой и над программой (а значит и использование системы программирования) продолжается на протяжении всей жизни программ, которая у любой из них состоит из трех фаз фазы разработки, фазы использования и фазы сопровождения: разработка может вестись коллективом разработчиков новых продуктов.",цикла работа,sys,0
программа построения синтаксических анализаторов yacc.,построения синтаксических,sys,0
"первая часть выполняется после завершения синтаксического анализа очередной конструкции входного языка (процедуры, функции, блока операторов и т. п.) на 44 основе имеющихся в информационных таблицах данных.",основе,sys,0
"работая в текстовом редакторе, пользователь может выделить в тексте программы желаемый идентификатор и, нажав некоторую комбинацию клавиш на клавиатуре, получить информацию об объектах, имеющих такое имя.",программы,sys,0
"для описания услуг, предоставляемых сетевыми службами, как и в других распределенных системах, используется специальный язык описания интерфейсов wsdl (web service definition language), компилятор с которого включается в состав системы программирования.",язык описания,sys,0
"глобальная область памяти выделяется один раз при инициализации объектной программы и доступна в этой программе все время, пока эта программа выполняется.",инициализации,sys,0
"от языка ассемблера он отличается тем, что в нем могут не приниматься во внимание некоторые архитектурные особенности целевой машины, в частности, для псевдокода является обычным предположение о том, что объектная машина обладает неограниченной памятью и бесконечным числом регистров общего назначения.",регистров общего,sys,0
"определение занятости блока с помощью счетчика ссылок основано на постоянном контроле числа указателей, имеющихся в программе и содержащих ссылки на объекты, размещенные в данном блоке памяти.",контроле числа указателей,sys,0
распределение памяти нужно проводить не для всех элементов программы.,памяти нужно,sys,0
"в состав систем программирования стали включаться справочные системы, представляющие собой обширные базы данных с включенными в них сведениями по всем интересующим пользователей вопросам.",состав систем программирования,sys,0
"качество оптимизации оказывается особенно высоким, если удается заменять не отдельные дорогие команды, а связки команд.",качество оптимизации,sys,0
все большую важность в последнее время приобретает требование удобства работы с системами программирования и отдельными их компонентами.,удобства,sys,0
"в наилучшем случае переменная f совсем станет ненужной, значит, и память для нее тоже распределять не придется.",случае,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",процессе,sys,0
"динамическую стратегию со стековой дисциплиной (для языков программирования, поддерживающих рекурсивные процедуры).",процедуры,sys,0
в некоторых случаях перестановка операций может приводить к потере точности вычислений.,потере,sys,0
"на первом шаге разработки определяется интерфейс процедур, которые будут использоваться для удаленного вызова.",интерфейс процедур,sys,0
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",программы,sys,0
это один из самых 95 первых методов отладки программ.,методов отладки программ,sys,0
"иногда компиляторам удается таким образом переставить следующие друг за другом операции, что без изменения смысла программы удается применить какие-либо другие преобразования.",образом,sys,0
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",запуске компилятора,sys,0
"в тех вычислительных системах, в которых время выполнения операции умножения превышает время выполнения сложения, удается добиться немалого эффекта.",умножения,sys,0
системы программирования компании ibm 98 4.6.1 .,системы,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",дополнительные удобства,sys,0
"благодаря возможностям фильтрации событий и вывода информации о них на экран разработчик может выделять те участки программ, которые вызывают снижение производительности, и видеть полную картину взаимодействия процессов.",участки,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",экранные редакторы,sys,0
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",тестирования графических интерфейсов полезны,sys,0
"открытость системы есть использование синтаксических и семантических правил, основанных на открытых стандартах.",открытых стандартах,sys,0
"в состав процессора bde входят драйверы систем управления базами данных (субд) для некоторых, наиболее распространенных на персональных эвм субд: microsoft access, foxpro, paradox, dbase и некоторых других.",управления базами данных,sys,0
"эти системы способны вести централизованные базы данных программных проектов, к которым обеспечен коллективный доступ со стороны многих разработчиков одновременно.",централизованные базы данных программных,sys,0
"132 эта же техника может быть использована и для реализации взаимодействия компонентов, работающих в рамках различных процессов на одной машине.",взаимодействия компонентов,sys,0
такие системы обычно используются в целях обучения языкам и методам программирования.,целях обучения языкам,sys,0
"библиотеки компонентов могут включать в себя генераторы отчетов, компоненты для построения сводных таблиц, компоненты для построения графиков и диаграмм, компоненты для создания графических интерфейсов.",отчетов,sys,0
"возможности второго метода получения информации из содержимого областей памяти, связаны со способностью многих операционных систем выдавать такую информацию в момент завершения работы программы, в частности, при возникновении неперехватываемой исключительной ситуации.",момент завершения работы программы,sys,0
"в таком случае файл готовой программы (и размер, занимаемой ею памяти машины) будет максимальным, но в этом файле могут оказаться объекты, никогда в программе не используемые.",размер,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",тиражирование,sys,0
"все, что может сделать компилятор, вставить в программу специальную подпрограмму, к которой можно будет обращаться для выделения места в динамической области памяти и освобождения этого места, когда потребность в нем исчезнет.",подпрограмму,sys,0
"когаловский, ""стандарты omg: язык определения интерфейсов idl в архитектуре corba"", системы управления базами данных, no 2, стр. 115-129, 1996 robert orfali, dan harkey, jeri edwards.",данных,sys,0
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",системе,sys,0
"сюда входят управление документами, интернационализация, поддержка мобильных агентов.",мобильных агентов,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",функциональности,sys,0
"взаимодействие клиентов и серверов осуществляется на основе сетевых протоколов, что значительно облегчает работу в многопользовательском и многоэкранном режимах, а также повышает уровень безопасности взаимодействия.",безопасности,sys,0
"транслятор gcc обладает достаточной гибкостью, чтобы формировать различные последовательности команд при трансляции одних и тех же программ, работающих на одних и тех же эвм, в одном операционном окружении, но с разными прикладными системами, например, с разными пакетами прикладных программ.",пакетами,sys,0
"в программе lex предусмотрено, что дополнительные атрибуты лексемы могут содержаться в глобальной переменной yylval, текстовое представление лексемы находится в переменной yytext, а длина лексемы в символах в переменной yyleng.",yytext,sys,0
"отсутствие нужной библиотеки, а иногда и небольшого системного файла в системном каталоге неминуемо заблокирует работу программы.",каталоге,sys,0
"130 5.1.системы клиент-сервер в распределенных системах важнейшими являются два понятия, для обозначения которых используются термины клиент и сервер .",клиент,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",часть первого,sys,0
"генераторы тестов также способны генерировать тесты, содержащие ошибочные конструкции, что позволяет проверять диагностические средства трансляторов.",ошибочные конструкции,sys,0
работа в интегрированной среде ведется в терминах описания программного проекта и его характеристик.,характеристик,sys,0
"среди задач системы управления проектом находятся планирование работ (составление списка задач, длительности и графиков выполнения проекта, оценка затрат на выполнение проекта, распределение ресурсов, необходимых для решения задач, распределение ответственности по решаемым задачам).",планирование,sys,0
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",памяти,sys,0
"вынесение инвариантных вычислений из тела цикла сводится к вынесению за пределы цикла тех операций, операнды которых не изменяются в процессе выполнения цикла.",процессе,sys,0
"поскольку этап проектирования опирается на результаты первого этапа, уже на этом этапе широко используется база данных проекта.",проектирования,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",предыдущие этапы этап,sys,0
"проект gnu автором общего проекта мобильной (переносимой) операционной системы gnu (рекурсивный акроним gnu's not unix) и входящего в нее многоязыкового компилятора gcc является ричард столмен, сотрудник лаборатории искусственного интеллекта массачусетского технологического института, инициировавший работу в 1983 году.",лаборатории искусственного интеллекта массачусетского,sys,0
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",тестирования средства тестирования,sys,0
программа lex позволяет проводить и еще более сложный анализ лексем.,сложный анализ,sys,0
для ее решения вводят временные ограничения на каждый из этапов жизненного цикла.,временные ограничения,sys,0
"имея такой перечень, который обычно передается компоновщику в качестве одного из параметров его запуска, он может обеспечить загрузку всех библиотек в память перед началом работы основной программы.",перечень,sys,0
"распределенные системы andrew s. tanenbaum, maarten van steen.",системы,sys,0
"многие компиляторы, однако, построены с отступлениями (иногда значительными) от рассмотренной схемы.",рассмотренной схемы,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",разработчики программного,sys,0
"этот компонент может присутствовать в конкретной программной системе или отсутствовать в ней (если взаимодействие через интернет не является задачей системы), благодаря точному описанию интерфейса и независимости от других компонентов сервера приложений, он 104 может даже использоваться в других системах, не обязательно написанных на языке java.",приложений,sys,0
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",операторы,sys,0
"средства corba могут также включать службы, специфичные для отраслевых рынков, например, образования, здравоохранения или транспортных перевозок.",средства,sys,0
"особенностью оптимизации логических выражений является то, что для получения их значений не всегда требуется проводить вычисление всего выражения до конца.",оптимизации логических,sys,0
"компонентный подход и визуальное программирование к настоящему времени разработано и внедрено в практику программирования большое число систем разработки и сопровождения программ, написанных на языках, поддерживающих принципы объектно-ориентированного программирования.",языках,sys,0
"удобны координаторы make тем, что позволяют отслеживать зависимости в больших наборах файлов, составляющих цельную программу, что упрощает процесс сборки проектов.",удобны координаторы,sys,0
"в псевдокодах более вольно используются форматы генерируемых команд, а все уточнения об ограничениях делаются на этапах распределения памяти и регистров, а также при проведении машинно-зависимой оптимизации, когда уже точно становится известна окончательная последовательность команд, реальные номера регистров и адреса операндов в памяти.",номера,sys,0
"алгоритм работает следующим образом: все ранее выделявшиеся блоки памяти помечаются как свободные; анализируются все указатели (переменные программы) и помечаются занятыми все блоки, на которые они ссылаются; итеративно анализируются все указатели, хранящиеся в виде значений полей объектов, размещенных в блоках, помеченных, как занятые; процесс останавливается, когда новые занятые блоки перестают возникать; все недостижимые по указателям блоки памяти остаются свободными, занятая ими память может быть уплотнена; одновременно с уплотнением занятых блоков осуществляется модификация значений действующих указателей.",значений,sys,0
"например, для некоторых операций иногда требуется сразу пара регистров, причем имеется требование к четности номера первого регистра из этой пары.",четности номера первого,sys,0
"однако возникновение программы, готовой к интерпретации или выполнению в результате работы только компилятора, возможно не всегда.",возникновение,sys,0
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",вовлечение,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",программирования свойства систем,sys,0
"стартовым символом считается левая часть первого правила, но его можно определить с помощью директивы начала: компилятор yacc компилятор си программа анализатора исходная программа yacc translate.y y.tab.c входной поток символов программы y.tab.c программа анализатора выход 153 %start expr семантические правила записываются непосредственно на том языке программирования, на котором будет формироваться синтаксический анализатор, но в них допускается использование специальных символов: представляет значение атрибута, связанного с нетерминалом в левой части, i представляет значение, связанное с i-м грамматическим символом (терминалом или нетерминалом) справа.",терминалом,sys,0
"чтобы библиотека могла оказывать поддержку всем пользователям этого языка, она должна (требования по составу): обеспечивать поддержку свойств языка, например, управление памятью и предоставление информации об объектах во время выполнения программ; предоставлять информацию о зависящих от реализации аспектах языка, например, о максимальных размерах целых значений; предоставлять функции, которые не могут быть написаны оптимально для всех вычислительных систем на данном языке программирования, например, функции вычисления квадратного корня sqrt() или пересылок блоков памяти memmove()",максимальных размерах целых значений,sys,0
средства создания документации (soda); профилировщик единая база проекта в этой системе программирования (и проектирования) детально проработана итеративная модель жизненного цикла программного продукта.,единая база проекта,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",памяти,sys,0
"если p регулярное выражение, обозначающее регулярное множество p, то (p) есть регулярное выражение, обозначающее это же регулярное множество p. при записи регулярных выражений можно использовать скобки.",выражение,sys,0
"эти команды могут вставляться автоматически, что предполагает проведение динамической загрузки в момент запуска основной программы, либо вручную самим разработчиком программы, что обеспечит реализацию динамической загрузки в момент реального обращения к библиотечным компонентам.",реального обращения,sys,0
"эффективная реализация этого процесса является одной из важнейших характеристик, как систем программирования, так и программ системной поддержки.",процесса,sys,0
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",определения типов,sys,0
"этого преимущества удается добиться за счет разработки специального механизма операционной системы, который выполняет подключение фрагментов одних программ к другим в момент их выполнения.",подключение фрагментов,sys,0
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",функциональности,sys,0
"в метаданные помещаются имя и версия сборки, сведения о локализации, данные о типах, включенных в сборку, список внешних файлов (сборок), от которых зависит данная сборка и т.",сборка,sys,0
"первым шагом в подготовке программ клиента и сервера всегда является запуск системной программы, которая создает прототип файла на языке idl, содержащий уникальный ключ (идентификатор интерфейса), гарантированно не содержавшийся ни в одном интерфейсе, созданном ранее, определения типов, констант, типов параметров и результатов функций.",подготовке,sys,0
"в одних макропроцессорах (более традиционных) макроопределения напоминают определения функций и их формальных параметров, а макровызовы напоминают операции вызова функций с фактическими параметрами.",вызова функций,sys,0
"каскадная схема хорошо пригодна для моделирования процессов разработки такого программного обеспечения, для которого с самого начала удается достаточно точно и полно сформулировать все требования, с тем, чтобы затем предоставить разработчикам свободу выбора наиболее подходящих технических методов реализации.",свободу выбора,sys,0
"обычно перед построением синтаксических деревьев в грамматиках языка избавляются от ц е п н ы х п р а в и л в и д а a b, г д е a и b нетерминальные символы.",грамматиках языка,sys,0
"компонентный подход и визуальное программирование к настоящему времени разработано и внедрено в практику программирования большое число систем разработки и сопровождения программ, написанных на языках, поддерживающих принципы объектно-ориентированного программирования.",систем разработки,sys,0
поведенческое тестирование называется также тестированием черного ящика.,черного ящика,sys,0
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,программирования,sys,0
"в противном случае, программы, подготовленные системами программирования компании borland, нельзя было бы выполнять в операционной системе, предназначенной для работы с системами программирования компании microsoft.",программы,sys,0
"обычно алгоритм выбора регистра для выгрузки работает так, что им выбирается регистр, содержимое которого понадобится позднее других (это не всегда оптимально, но несложно определяется).",алгоритм выбора,sys,0
"кроме того, выпускается целый ряд продуктов, таких как ibm visual age, ibm application development tool, которые поставляются вне z/os и служат для автоматизации и повышения эффективности процесса разработки приложений.",эффективности,sys,0
второй главной работой компилятора является генерация результирующей программы.,генерация результирующей,sys,0
"особенно важно при проведении тестирования программ иметь заранее составленные сценарии тестирования и тестовые примеры, которые должны охватывать все варианты возможного поведения и реакции программы, как в режиме нормальной работы, так и в случае возникновения необычных ситуаций.",тестовые примеры,sys,0
"если от компилятора не требуется проведения серьезной оптимизации программ, выбирается схема, в которой синтаксический разбор, семантический анализ и генерация объектной программы совмещены в одном проходе компилятора.",оптимизации,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",сопровождения,sys,0
разнесение имен по пространствам именования распределение использованных в программе идентификаторов по пространствам именования есть одна из важных задач этапа семантического анализа.,именования,sys,0
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",обработки спецификаций,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,существенной особенностью систем,sys,0
семантический анализ в свою очередь тоже может разделяться на отдельные стадии.,отдельные стадии,sys,0
"создаваемые с использованием универсальных модулей языковой среды приложения могут выполняться в различных операционных средах, включая как внутрисистемные (например, unix shell), так и среды промежуточного слоя (db2, cics).",модулей языковой среды приложения,sys,0
буквальное следование каскадной схеме разработки приводит к существенному запаздыванию получения результатов.,существенному запаздыванию получения результатов,sys,0
"впоследствии, когда широко распространились принципы и приемы объектно-ориентированного программирования, система dce также была расширена и дополнена объектно-ориентированными языками.",программирования,sys,0
"компилятор обязан сообщить об ошибке, если в программе предписано выполнить некоторую операцию с несовместимым с ней операндом, например, произвести сложение указателей.",программе,sys,0
"известным примером текстового редактора является редактор vi, входящий в состав стандартной системы программирования операционной системы unix.",системы программирования операционной,sys,0
"наиболее близким их аналогом, широко распространенным во всем мире, является объектно- ориентированный язык программирования си++.",объектно- ориентированный язык программирования,sys,0
"основное преимущество модели удаленного вызова процедуры состоит в том, что сам клиент не знает, что вызов был удаленный.",модели,sys,0
"например, по имени функции можно легко перейти в то место программы, где эта функция определяется, а по имени сложного типа данных перейти к его описанию.",имени сложного,sys,0
"клиенты сетевых служб, то есть приложения, взаимодействующие с сервером приложений через стандартные протоколы сетевых служб.",сетевых служб,sys,0
"компоненты, включаемые в библиотеки, подчиняются правилам инкапсуляции, то есть имеют открытые реализованные интерфейсы, а детали реализации скрываются внутри библиотек и не видны пользователям.",правилам,sys,0
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",контекстных условий входного языка,sys,0
"этап программирования во многом сформировал современное представление о том, какие системы программирования нужны для создания высококачественного программного обеспечения.",обеспечения,sys,0
"брокеры объектов corba более адекватно соответствующим принципам построения распределенных систем, чем системы ""клиент-сервер"", надо признать системы не двухуровневые, а имеющие, по крайней мере, еще один ""промежуточный"" уровень, позволяющий разделить решаемые задачи на ""клиентские"" и ""серверные"" части.",объектов,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,создания разработчиком,sys,0
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",представления,sys,0
в этом состоит основное отличие динамических библиотек от статических.,библиотек,sys,0
"например, замена алгоритма сортировки вставками алгоритмом быстрой сортировки может привести к изменению времени сортировки n элементов с 2.02n2 на 12log2n.",времени сортировки n элементов,sys,0
приводит к потере информации о взаимосвязи этих операторов.,информации,sys,0
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",планировщика заданий,sys,0
"дисциплина произвольного распределения памяти, по-существу, означает отсутствие какой-либо дисциплины в этом распределении.",дисциплины,sys,0
"другой смысл вкладывается в этот термин, когда говорят о компонентах, как об элементах сборки программы некоторых ее относительно небольших (иногда незавершенных) фрагментах или заготовках, которые можно извлекать из библиотек (вообще говоря, из любых библиотек, но чаще при этом имеются в виду разрабатываемые специально для подобного стиля программирования библиотеки компонентов ).",программы,sys,0
"например, перестановка целочисленных операций в выражении i/j k может привести к неверному вычислению выражения 10 3/8.",неверному вычислению,sys,0
комплексное тестирование призвано проверить все аспекты работы программы от правильности взаимодействия внутренних программных компонентов до правильности взаимодействия программного комплекса с его пользователями.,взаимодействия,sys,0
"в интерпретаторе (точнее в трансляторе со смешанной стратегией трансляции) эта часть заменяется программой, которая интерпретирует внутреннее представление исходной программы.",смешанной стратегией трансляции,sys,0
"этап компоновки есть этап формирования полной программы или программного комплекса из некоторого количества автономно запрограммированных, автономно отлаженных и автономно протестированных компонентов.",компонентов,sys,0
"в тех случаях, когда имена объектов совпадают, а семантика их использования различается, могут возникать трудно обнаруживаемые ошибки.",семантика,sys,0
"в отличие от компилятора, который во время своего запуска обрабатывает только один объект (программный компонент), редактор связей в общем случае получает на вход сразу несколько 76 объектных модулей.",общем случае,sys,0
"машинно-зависимая оптимизация машинно-зависимые методы оптимизации ориентированы на конкретную архитектуру вычислительной системы, то есть на совокупность аппаратных и программных составляющих, а также взаимосвязи между ними.",оптимизация машинно,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",излишних команд,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",процедур,sys,0
"например, для правила грамматики e e+e e-e e e e/e (e) -e number в программе для yacc следует писать такие правила: %token number %left + - %left / %right uminus %% expr : expr + expr { = 1 + 3; } expr - expr { = 1 - 3; } expr expr { = 1 3; } expr / expr { = 1 / 3; } - expr %prec uminus { = - 2; } ( expr ) { = 2; } number; 154 из-за неоднозначности грамматики при генерации анализатора могут возникать конфликты, о количестве которых генератор выдаст сообщение.",грамматики,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",особенностей,sys,0
"отладка программ это выявление причин дефектов, а также их устранение.",выявление причин дефектов,sys,0
во время каждой итерации система автоматически контролирует приближение реализации к описанным вариантам использования.,реализации,sys,0
линейные участки имеют один вход и один выход.,участки,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",учетом блочной,sys,0
"обычно циклы содержат в себе один или более линейных участков, где производятся вычисления, поэтому для них могут применяться все методы оптимизации линейных участков.",оптимизации,sys,0
"многие алгоритмы устроены так, что в ходе вычислений некоторые величины оказываются пропорциональными номеру итерации.",ходе вычислений,sys,0
"формат файлов динамических библиотек полностью зависит от операционной системы, он близок к формату исполняемых файлов.",формату исполняемых,sys,0
"фаза разработки предшествует двум другим фазам, которые проходят во времени параллельно друг другу.",другим фазам,sys,0
"профилировщик позволяет получать информацию о вызовах функций ядра операционной системы, аппаратных прерываниях, состояниях потоков ввода/вывода, сообщениях и деятельности планировщика заданий операционной системы.",состояниях потоков ввода,sys,0
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",вариантов,sys,0
"в остальном схема формирования сетевой службы напоминает аналогичные схемы формирования серверной и клиентской частей в системах, основанных на моделях удаленного вызова процедур и удаленного обращения к методам.",схема формирования сетевой,sys,0
"средства стандартной библиотеки должны (требования по свойствам компонентов) быть важными и удобными для использования всеми программистами для решения всех задач, для которых предназначена библиотека (структуры данных и алгоритмы для работы с ними должны иметь общезначимый характер стек, очередь, список, ..., сортировка, поиск, копирование, ...);",средства стандартной,sys,0
"генератор программ на си++ и java, работающий на основе выбранного каркаса приложения (rational apex); средства автоматизации тестирования rational team test (rtt), rational robot (часть rtt, используемая для автоматизации прогонов тестов), rational test factory (для автоматизации тестирования интерактивных задач) и rational pure coverage (для контроля полноты покрытия тестами).",контроля полноты покрытия,sys,0
"фактически таблицы содержат условия, налагаемые на возможные входные данные, и эффекты, которые эти данные оказывают на поведение программы и выходные данные.",поведение программы,sys,0
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",функции,sys,0
"это ядро основано на использовании многопотоковых серверов, обменивающихся сообщениями и работающих поверх микроядра mach, разработанного в университете карнеги-меллон (carnegie mellon university) и позднее в университете штата юта (university of utah).",карнеги-,sys,0
"современные версии спецификации corba допускают и обратные отображения: например, в стандарте corba 3 прямо предусмотрено проведение отображения записи интерфейсов на языке java в записи интерфейсов на idl.",спецификации,sys,0
"при проведении оптимизации каждой команде присваивается некоторая характеристика, называемая ее стоимостью (с точки зрения времени выполнения команды, использования аппаратных ресурсов и т. п.).",команды,sys,0
один из способов определения ключевого слова if в программе lex состоит в указании его правого контекста с помощью прогностического оператора.,программе,sys,0
"всякий регулярный язык может быть одним из трех способов: с помощью регулярной (праволинейной или леволинейной) грамматики, с помощью конечного автомата, с помощью регулярного множества (так же, как и с помощью обозначающих их регулярных выражений).",способов,sys,0
"внедрение (transition), заключающееся в том, что система делается доступной пользователям.",внедрение,sys,0
"доцент, к.ф.-м.н. терехин а.",доцент,sys,0
"система cvs поддерживает историю дерева каталогов (репозитория) с исходным кодом, работая с последовательностью изменений.",исходным кодом,sys,0
"для реальной программы сортировки 100 чисел это изменение уменьшает совокупное время работы в 2.5 раза, для 100000 чисел снижение времени работы реальной программы в 1000 раз!",времени работы,sys,0
"они включают в себя как общие математические операции (скалярное произведение и умножение матриц), так и сложные алгоритмы поиска и хранения (поисковый цикл монте-карло), например, так на языке си выглядит четвертый ливерморский цикл, построенный на базе фрагмента подпрограммы решения ленточных линейных уравнений: void loop4 (int n, real x [ar 1001], real y [ar 1001]) { for (int k = 6; k < ar 1001; k += (ar 1001 - 7) / 2) { int lw = k - 6; for (int j = 4; j < n; j += 5) x [k - 1] -= x [lw ++] y [j]; x [k - 1] = y [4]; } } обнаружение подобной критической последовательности операторов позволяет вместо прямой подстановки обычной последовательности команд сформировать последовательность, специфическую для данного шаблона и конкретной вычислительной архитектуры.",математические операции,sys,0
"чтобы обобщенная функция сортировки sort(), которая должна упорядочивать целые числа по возрастанию, производила упорядочения целых чисел по убыванию, достаточно привлечь понятие функционального объекта: class intgreater { public: bool operator()(int x, int y) const { return x > y; } }; int main () { int x [1024]; ............ // инициализация sort ( x [0], x [1024]); // обычное упорядочивание sort ( x [0], x [1024], intgreater ()); // упорядочивание по убыванию } при таком использовании эффективность по скорости выполнения будет такой же, как и при написании сортировки целых чисел вручную, а реально может оказаться и выше за счет удачного выбора алгоритма сортировки.",функция сортировки,sys,0
"в свою очередь, разработчики библиотек, внося в библиотеки изменения, должны предпринимать меры, чтобы эти изменения минимальным образом сказывались на прикладных программах, основанных на предыдущих версиях библиотеки.",библиотек,sys,0
"к таким техническим характеристикам относят обычно две: объем памяти, необходимый для выполнения объектной программы (для хранения данных и самих команд программы), и скорость выполнения программы (ее быстродействие).",данных,sys,0
"определение занятости блока с помощью счетчика ссылок основано на постоянном контроле числа указателей, имеющихся в программе и содержащих ссылки на объекты, размещенные в данном блоке памяти.",блоке памяти,sys,0
"этапы жизненного цикла работа с программой и над программой (а значит и использование системы программирования) продолжается на протяжении всей жизни программ, которая у любой из них состоит из трех фаз фазы разработки, фазы использования и фазы сопровождения: разработка может вестись коллективом разработчиков новых продуктов.",разработчиков,sys,0
к таковым относятся ввод и обработка режимов запуска компилятора и первичное заполнение таблиц исходной информацией.,режимов,sys,0
"при анализе программы из имеющихся в ней описаний, заголовков процедур, блоков, циклов и других структурных операторов извлекается информация, которая должна сохраняться для использования на последующих фазах компиляции.",структурных операторов,sys,0
"смешанная стратегия трансляции применяется в системах, работающих в сети интернет, программы для которых пишутся на языке java.",стратегия,sys,0
"использовать локальную память вне пределов ее видимости, определяемых синтаксическими и семантическими правилами языков программирования, нельзя.",правилами,sys,0
общая схема работы компилятора 27 3.3.1.,схема работы компилятора,sys,0
"семантика всех программ подразумевает, что при выполнении программ области памяти будут необходимы для хранения: кодов пользовательских программ; данных, необходимых для работы этих программ; кодов системных программ, обеспечивающих поддержку пользовательских программ в период их выполнения; записей о текущем состоянии процесса выполнения программ (например, записей об активации процедур).",выполнении программ области,sys,0
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",загрузке библиотек,sys,0
"поскольку процедуры чтения из внешней памяти и записи на внешнюю память имеют относительно невысокую скорость, разработчики компиляторов всегда стремятся уменьшить количество проходов в своих компиляторах.",количество,sys,0
"некоторые объекты данных программы могут при распределении памяти получить одинаковые адреса (например, две одинаковые строковые константы или две разные локальные переменные, никогда не используемые одновременно).",памяти,sys,0
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",невозможность,sys,0
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",основе внутреннего,sys,0
"в ситуации с указанными языками программирования, чтобы считать if ключевым словом, а не именем массива, следует сканировать исходный текст в поисках правой (закрывающей) скобки, за которой следует буква, а не знак равенства.",поисках правой,sys,0
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",системой,sys,0
"некоторые виды внутреннего представления больше подходят для фиксации структуры компилируемой программы, другие ориентированы на проведение оптимизирующих преобразований, третьи наиболее удобны при синтезе (генерации) результата компиляции.",структуры,sys,0
"эти программные комплексы не только работают, но и создаются в распределенном окружении, в котором разные программисты работают с разными системами программирования, создавая относительно независимые компоненты единой сложной программы.",системами,sys,0
широко известны пакеты прикладных программ для управления базами данных (субд) и издательских систем.,управления базами данных,sys,0
"в составе системы unux также имеются: редактор текстов vi (visual editor визуальный редактор), представляющий собой диалоговый редактор, позволяющий в интерактивном режиме вводить тексты или приказы на редактирование.",системы,sys,0
на этой стадии совершенно не принимаются во внимание аспекты взаимодействия данной программы с другими программами комплекса.,другими программами комплекса,sys,0
компилятор преобразует cil по мере надобности и вставляет заглушки на место вызова методов объектов.,объектов,sys,0
префиксная запись.,запись,sys,0
"среди экранных редакторов выделяются текстовые процессоры, примером которых является текстовый процессор word, разработанный компанией microsoft и входящий в состав системы офисной автоматизации microsoft office.",состав,sys,0
"это максимально возможная общность для языка си: void qsort (const void base, size t nmemb, size t size, int ( compar)(const void , const void )); однако учитывая, что затраты на вызовы функции при проведении каждого элементарного сравнения элементов могут в некоторых случаях становиться слишком большими, надо стараться найти более эффективное решение.",сравнения элементов,sys,0
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",систем,sys,0
"такая схема разработки называется нисходящей, и она редко встречается на практике.",практике,sys,0
"ни промежуточный язык, ни общая система типов не зависят от конкретной платформы (т.",система,sys,0
"пользователь указывает редактору, какой текст он собирается редактировать, далее непосредственно вводятся редактирующие приказы.",редактору,sys,0
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",условиях система программирования,sys,0
"в последнее время компания microsoft активно продвигает новое поколение систем программирования, объединяемых общим наименованием .net framework (управляемая среда для разработки и исполнения приложений).",управляемая среда,sys,0
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",анализатора результаты синтаксического разбора,sys,0
"для интерфейса x window созданы многочисленные диспетчеры окон, самым известным из которых является, по-видимому, диспетчер motif, с помощью которого для работы с окнами интерфейса возникают дополнительные возможности.",диспетчеры,sys,0
"такие таблицы обычно называются таблицами перекрестных ссылок (иногда в них указываются не только места, где определяются объекты программы, но и номера строк текста, в которых эти объекты используются).",номера,sys,0
"известным недостатком динамических библиотек является зависимость программного обеспечения от библиотечных объектов, непосредственно не связанных с этим обеспечением, то есть зависимость программ пользователей от неизвестных им динамических библиотек.",недостатком,sys,0
"система автоматически строит взаимодействия клиента и сервера, независимо от того, как клиент и сервер распределены по компьютерам: они могут исполняться 135 на одном компьютере в рамках единого процесса, при этом взаимодействие между клиентом и сервером происходит при помощи интерфейса объекта в едином адресном пространстве с использованием динамических библиотек.",объекта,sys,0
"простейший способ управления сложными последовательностями вызовов системных программ, какими являются вызовы компонентов систем программирования, называется режимом работы с командной строкой оператора или операционной системы: g++ -c -s -da -dp -da b.cpp работая в этом режиме, программист подает операционной системе задания по вызову программ, указывая место размещения вызываемой программы, ее имя и параметры конкретного вызова.",вызовов,sys,0
"при управлении неявных запросов памяти в состав выделяемого блока приходится дополнительно включать специальный счетчик числа указателей, связанных с данным блоком, либо специальный признак занятости блока ( пометку ): в блок обычно включается также полный список всех указателей, связанных с объектами данного блока.",признак занятости блока,sys,0
от редактора связей не зависит эффективность выполнения готовой программы.,выполнения готовой,sys,0
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",случае других,sys,0
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",проектов,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",статические данные,sys,0
"во избежание большого ручного труда при составлении подобных каталогизированных процедур (командных файлов) в системе программирования z/os предусмотрен специальный диалоговый режим работы с компонентами этой системы, прежде всего, с компиляторами, редакторами связей и отладчиками.",системе,sys,0
"библиотеки классов могут представлять собой совокупности независимых классов, иерархии классов, иерархии шаблонов классов.",иерархии шаблонов,sys,0
"справочник снабжен большим количеством примеров, которые часто позволяют повысить 114 эффективность как процесса программирования, так и процесса работы уже подготовленной программы.",программирования,sys,0
очень важным фактором развития системы eclipse является ее свободное распространение с полным набором исходных текстов.,фактором развития,sys,0
"такое описание создается на языке определения интерфейсов (interface definition language, idl), трансляция с этого языка ведется в выбранный язык программирования (часто используются си++ и java) специальным компилятором, формирующим согласованные друг с другом заготовки текстов программ, как для серверной части программы, так и для клиентской части.",заготовки текстов,sys,0
"триады представляют собой запись операций в форме из трех составляющих: операции и двух операндов: <операция>(<операнд1>,<операнд2>) особенностью триад является то, что один или оба операнда в триаде могут быть ссылками на другую триаду в том случае, если в качестве операнда данной триады выступает результат выполнения другой триады, например, так в виде триад можно записать арифметическое выражение a=b c+d b 10: 1 b c 2 + 1 d 3 b 10 4 - 2 3 5 = a 4 ссылка на триады в реальных компиляторах обычно реализуется настоящим указателем, что делает триады списочной структурой и облегчает процессы преобразования триад.",запись,sys,0
"это привлекает к ее развитию большое сообщество разработчиков, проектирующих для этой системы подключаемые модули, как свободно распространяемые, так и коммерческие.",разработчиков,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",типами,sys,0
"однако от редактора связей может зависеть эффективность использования памяти вычислительной машины, поскольку именно при редактировании связей определяется истинный размер готовой программы.",редактора,sys,0
"пользователю дается удобный графический интерфейс, с помощью которого он может определять свои программные проекты, включать в их состав свои текстовые, ресурсные и библиотечные файлы, устанавливать параметры запуска отдельных компонентов системы.",системы,sys,0
"со временем были развиты сервисные средства операционных систем и появились командные процессоры, что позволило объединять последовательность вызовов системных программ в единые командные файлы.",последовательность вызовов,sys,0
"в приведенном выше примере задано, что приоритет сложения равен приоритету вычитания, но меньше приоритета умножения и деления.",выше примере,sys,0
"среди задач системы управления проектом находятся планирование работ (составление списка задач, длительности и графиков выполнения проекта, оценка затрат на выполнение проекта, распределение ресурсов, необходимых для решения задач, распределение ответственности по решаемым задачам).",графиков выполнения,sys,0
"основные методы динамического распределения памяти во время распределения памяти компилятор ставит в соответствие языковым единицам исходной программы адрес, определяет их размер и приписывает им атрибуты области памяти, необходимой для этой языковой единицы.",языковым единицам исходной программы,sys,0
на этапе анализа в компиляторе выполняется распознавание текста исходной программы и заполнение информационных таблиц.,анализа,sys,0
"результатом первого этапа являются сформулированные требования, то есть внешняя спецификация, описание системы с точки зрения пользователя.",описание,sys,0
"если первые системы программирования представляли собой простые наборы программ, объединенные только общим описанием структур данных, то в настоящее время из прежних систем программирования возникли интегрированные среды разработки.",первые системы,sys,0
"перед выполнением присваивания значение счетчика ссылок блока, на который ссылается указатель p, уменьшается на единицу, при этом одновременно увеличивается на единицу значение счетчика ссылок блока, на который ссылается указатель q. только после этого можно выполнять само присваивание.",значение,sys,0
"основными компонентами систем программирования, используемыми на этапе анализа требований являются текстовые и графические редакторы, а также программные средства автоматического контроля непротиворечивости таблиц решений, функциональных диаграмм, текстов на языках спецификаций.",основными компонентами систем,sys,0
в записи регулярных выражений программы lex имеются также следующие способы указания повторений некоторых последовательностей символов: p - итерация (повторение нуль или более раз) p+ - усеченная итерация (повторение один или более раз) p?,выражений программы,sys,0
"элементы теории трансляции"") по курсу системы программирования , который читается на факультете вм и к мгу им. м.",теории,sys,0
"из-за различных способов употребления и различных способов реализации ссылок на объекты в языке си++, эти ссылки при трансляции отображаются в два типа си++.",типа си++,sys,0
"при распределении памяти для элементов данных может вызывать определенные трудности учет требований выравнивания 68 адресов некоторых объектов данных на границы аппаратно поддерживаемых элементов данных слов, двойных слов, параграфов и страниц.",определенные трудности,sys,0
"они включают в себя как общие математические операции (скалярное произведение и умножение матриц), так и сложные алгоритмы поиска и хранения (поисковый цикл монте-карло), например, так на языке си выглядит четвертый ливерморский цикл, построенный на базе фрагмента подпрограммы решения ленточных линейных уравнений: void loop4 (int n, real x [ar 1001], real y [ar 1001]) { for (int k = 6; k < ar 1001; k += (ar 1001 - 7) / 2) { int lw = k - 6; for (int j = 4; j < n; j += 5) x [k - 1] -= x [lw ++] y [j]; x [k - 1] = y [4]; } } обнаружение подобной критической последовательности операторов позволяет вместо прямой подстановки обычной последовательности команд сформировать последовательность, специфическую для данного шаблона и конкретной вычислительной архитектуры.",обнаружение подобной,sys,0
проверка контекстных условий по виду (синтаксической записи) большинства операторов нельзя утверждать их семантическую правильность или ошибочность.,проверка контекстных,sys,0
выбор той или иной стратегии и дисциплины основывается на следующих критериях: эффективность начального распределения памяти; эффективность восстановления статуса свободной памяти ;,эффективность восстановления статуса свободной,sys,0
простые наборы описаний классов встречаются в системах программирования все реже и реже.,описаний классов,sys,0
"основной недостаток технологии com, который и привел к отказу от нее, это серьезные ограничения в организации взаимодействия между разными платформами, которые постоянно возникают в глобальных сетях.",технологии,sys,0
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",принципов объектно,sys,0
"выявление источников затруднений (устранимых и неизбежных рисков), которыми могут быть: недостаточное вовлечение в проект высшего руководства разработчиков, невозможность привлечения к работам над проектом будущих пользователей программного продукта, нестабильные требования к проекту, нехватка знаний или опыта в коллективе разработчиков, организационно-политические риски.",нехватка,sys,0
"быть настолько эффективными, чтобы у пользователей библиотеки не возникало потребности заново программировать библиотечные средства (эффективность не должна уступать ручному программированию); быть независимыми от конкретных алгоритмов или предоставлять возможность указывать алгоритм в качестве параметра; оставаться элементарными, чтобы не терять эффективности из-за излишних усложнений или попыток совместить различные функции в одной; быть безопасными (устойчивыми к неправильному использованию) в большинстве типичных случаев использования (использование библиотеки не должно провоцировать ошибки, а наоборот, снижать их вероятность); обладать достаточной полнотой (завершенностью) в той своей функциональности, которая включаются в библиотеку, чтобы ни у кого не возникало желания что-то заменить или доопределить; обладать удобной и безопасной системой умолчаний; поддерживать общепринятые стили программирования; обладать способностью к расширению, чтобы работать с типами, определяемыми пользователем так же хорошо, как и со встроенными (базовыми) типами (сочетаемость с базовыми типами данных и базовыми операциями).",расширению,sys,0
при использовании динамических объектов говорят о динамическом связывании объекта данных и области памяти.,области,sys,0
"обработка программы на языке java обратным компилятором позволяет получить эквивалентный интерфейс, написанный на idl, имея который, можно построить (на языке java или другом языке программирования) программу клиента corba, имеющую доступ к нужному объекту.",программы,sys,0
"библиотеки компонентов могут включать в себя генераторы отчетов, компоненты для построения сводных таблиц, компоненты для построения графиков и диаграмм, компоненты для создания графических интерфейсов.",генераторы отчетов,sys,0
"в каждом языке программирования имеются операторы ввода/вывода, которые не могут быть реализованы никаким образом, кроме обращений к системным программам, собранным в библиотеку, представляющую собой коллекцию объектных модулей, сформированных заранее при разработке самого компилятора.",образом,sys,0
"последнее важно не только при вводе сложных арифметических выражений, но и при работе с языками программирования, построенными на длинных конструкциях со сбалансированными скобками, например, с языком lisp.",работе,sys,0
"тем самым, удается добиться некоторой общности, то есть возможности сортировать некоторые объекты (доступные с помощью указателей, передаваемых функции сортировки в качестве других параметров) не только по возрастанию, но и по убыванию и, вообще, по произвольным критериям.",общности,sys,0
"в то же время, отсутствие компонентов, ответственных за первые этапы проектирования программ от фиксации первичных требований к разрабатываемому программному продукту до разработки подробных спецификаций и структурированных описаний программ, в настоящее время еще не считается существенным недостатком систем программирования, и многие из них обходятся без таких компонентов, оставляя их системам проектирования другого рода.",недостатком,sys,0
среди современных систем программирования уже трудно найти системы без интерактивных отладчиков и справочных систем.,справочных систем,sys,0
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",обеспечения системам,sys,0
"многие системы контроля версий позволяют разработчику блокировать файл, предотвращая внесение в него изменений до тех пор, пока его собственные изменения не будут зафиксированы.",контроля версий,sys,0
системы программирования компании borland 83 4.2.1 .,программирования компании,sys,0
"суммируя, можно говорить о том, что все современные библиотеки делятся на две категории: библиотеки, связанные с конкретными системами программирования, и библиотеки, связанные с конкретными задачами, решаемыми с помощью вычислительных машин.",задачами,sys,0
эта информация собирается на основе обработки операторов описания объектов данных программы и пополняется при компиляции исполняемых операторов программы на основе семантических правил входного языка.,данных,sys,0
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",стратегии распределения памяти,sys,0
"значительное облегчение пользователям приносят также библиотеки стандартных форм и элементов управления ( библиотеки компонентов ), а также развитая система оказания помощи пользователям, снабженная огромным количеством примеров.",оказания помощи пользователям,sys,0
"все современные языки программирования нуждаются в поддержке имеющихся в них средств, причем поддержка им необходима именно в период выполнения программ, полученных путем компиляции с этих языков.",выполнения,sys,0
"таким образом, проектирование и программирование диалога с пользователем сводится к определению и установке значений свойств некоторых компонентов форм и программированию обработчиков событий.",проектирование,sys,0
"средства стандартной библиотеки должны (требования по свойствам компонентов) быть важными и удобными для использования всеми программистами для решения всех задач, для которых предназначена библиотека (структуры данных и алгоритмы для работы с ними должны иметь общезначимый характер стек, очередь, список, ..., сортировка, поиск, копирование, ...);",средства,sys,0
"однако синтаксис языков программирования может быть описан грамматиками без неоднозначностей (т.к. любая правильная программа должна иметь единственную структуру), т.е. языки программирования являются детерминированными.",единственную структуру,sys,0
"использование этих языков предполагает, что при запуске компилятора компилируется только некоторая часть полной программы, а остальные части добавляются к ней по мере готовности другими компонентами системы программирования, например, редактором связей.",языков,sys,0
некоторые аспекты методов машинно- зависимой оптимизации имеют общий характер и применяются многими разработчиками.,аспекты методов машинно-,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",помощью тектсового,sys,0
"выгруженное значение может понадобиться в последующих вычислениях, и его придется снова читать из памяти.",вычислениях,sys,0
"эти действия обычно выполняются всяким лексическим анализатором в его работе, они могут состоять, например, в создании записей в информационной таблице компилятора.",информационной таблице компилятора,sys,0
"например, в архитектуре с одним потоком вычислений операцию a+b+c+d+e+f надо выполнять в порядке ((((a+b)+c)+d)+e)+f.",вычислений,sys,0
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",данных версий,sys,0
"по функциональному наполнению все используемые в составе современных систем программирования библиотеки можно классифицировать следующим образом: библиотеки функций, процедур и макроопределений, библиотеки классов, библиотеки компонентов.",наполнению,sys,0
"формат таблицы трансляции адресов зависит не только от архитектуры вычислительной системы, но и от той операционной системы, которая должна управлять выполнением готовых программ.",формат,sys,0
", а со стороны синтаксического анализатора результаты синтаксического разбора конструкций языка.",конструкций языка,sys,0
общая схема работы компилятора на следующей странице изображена схема работы компилятора языка программирования.,работы,sys,0
"команды cil помещаются в единицу распространения сборку (assembly) и сопровождаются метаданными, которые делают сборку полностью самодостаточным объектом.",распространения сборку,sys,0
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",задачи редактора связей,sys,0
"на этом этапе возникает множество организационных проблем по обучению 14 пользователей, тестированию работоспособности и устойчивости программы при работе в конкретной организации и конкретной операционной среде.",обучению,sys,0
"такое древовидное представление программы удобно для проведения семантического анализа потому, что для анализа семантики компилируемой программы важно знать именно общую структуру этой программы.",компилируемой программы,sys,0
"процесс макрообработки текстов концептуально делится на две фазы первая из них это ввод макроопределений, вторая фаза состоит в обработке макровызовов.",вторая фаза,sys,0
"замена операций с переменными цикла производится на основе понимания того, что с каждым шагом цикла значение переменной цикла меняется на один шаг цикла .",переменной цикла,sys,0
технологии com/dcom 106 5.3.,технологии,sys,0
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",этапах,sys,0
в таких случаях часто используют представление программы с помощью псевдокода.,помощью псевдокода,sys,0
"однако генераторы синтаксических анализаторов на основе произвольных lr(1)-грамматик порождает анализаторы очень большого объема, что не позволяет использовать такие генераторы на практике.",объема,sys,0
"перед компиляторами это ставит задачу перераспределения последовательности вычислений так, чтобы рядом оказывались операции, не зависящие друг от друга (в противном случае, их нельзя будет выполнять параллельно).",последовательности,sys,0
"каждый объект программы, определенный в некотором объектном модуле относится редактором связей к одной из областей, для всех 77 этих объектов редактор связей вычисляет их относительные адреса.",связей,sys,0
"""архитектура распределенных систем программного обеспечения"", м., макс пресс, 2007.",обеспечения,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",старшинство операций,sys,0
"некоторые современные теории предсказывают, что по мере приближения к теоретическому минимуму числа ошибок исправления, вносимые в программы, могут приводить к появлению даже большего числа ошибок, чем было ранее: во время пользовательского тестирования результаты работы программы проверяются с прикладной точки зрения.",минимуму,sys,0
"разнородность оборудования, с которой постоянно приходится сталкиваться в глобальных информационных сетях, например, в сети интернет, препятствует использованию компиляторов, но способствует развитию систем, интерпретирующих тексты исходных программ, либо систем с двойной технологией компиляции и интерпретации, в которых, в зависимости от требований пользователя исходная программа либо компилируется, либо интерпретируется.",требований пользователя,sys,0
"наиболее широко применяются эвристические методы верификации, основанные на тестировании.",методы,sys,0
"синхронным называется такое взаимодействие, при котором клиент, отослав запрос, блокируется и может продолжать работу только после получения ответа от сервера.",взаимодействие,sys,0
ведь в каждом конкретном случае (для каждого конкретного типа данных) можно найти такое эффективное решение.,эффективное решение,sys,0
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",систем,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",использования,sys,0
"в программе lex предусмотрено, что дополнительные атрибуты лексемы могут содержаться в глобальной переменной yylval, текстовое представление лексемы находится в переменной yytext, а длина лексемы в символах в переменной yyleng.",представление лексемы,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",возможность,sys,0
"библиотеки классов могут представлять собой совокупности независимых классов, иерархии классов, иерархии шаблонов классов.",иерархии классов,sys,0
"при рассмотрении полезности оптимизирующих преобразований нужно учитывать, что наибольший выигрыш возникает при участии самого программиста, причем возникает он еще на этапе выбора алгоритма, который реализуется в программе.",этапе выбора,sys,0
пакетные редакторы не требуют непосредственного присутствия программиста для своей работы.,присутствия программиста,sys,0
выбор зависит от размеров библиотек и количества обращений к их компонентам.,компонентам,sys,0
в современных компиляторах лексический и синтаксический анализаторы это взаимосвязанные части общего процесса.,взаимосвязанные части,sys,0
"можно встретить системы команд с аппаратными возможностями по вычислению тригонометрических функций, с одновременным вычислением частного и остатка в целочисленном делении, с выполнением некоторых команд в режиме автоувеличения или автоуменьшения, при которых к операнду прибавляется (или вычитается из него) единица до или после использования его значения в операции.",автоуменьшения,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,блоков памяти,sys,0
"; предоставлять программисту нетривиальные средства, на которые он может рассчитывать, заботясь о переносимости программ, например, средства работы со списками, функции сортировки, потоки ввода/вывода; предоставлять основу для расширения собственных возможностей, в частности, соглашения и средства 88 поддержки, позволяющие обеспечить операции для данных, имеющих определяемые пользователями типы, в том же стиле, в котором обеспечиваются операции для встроенных типов (например, ввод/вывод); служить основой и теоретическим базисом других библиотек.",сортировки,sys,0
"разработчик прикладной программы должен тщательно придерживаться правил, предложенных разработчиками библиотек.",разработчиками,sys,0
существенным дополнением к возможностям обычных систем программирования в системах delphi является наличие средств подключения и работы с локальными и распределенными системами баз данных.,данных,sys,0
"в последнее время стал применяться метод удаленной работы с документацией: сами тексты документов не тиражируются и не передаются пользователям, но становятся доступными через интернет.",последнее время,sys,0
системы программирования компании borland фирма borland внесла существенный вклад в создание современных представлений о системах программирования персональных эвм.,программирования,sys,0
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",компилятора должна,sys,0
"достаточный уровень масштабируемости больших систем, которые на практике могут поддерживать одновременную работу нескольких тысяч пользователей, может быть достигнут только с помощью децентрализации основных служб системы и управляющих ею алгоритмов, которая все шире внедряется в практику построения распределенных систем, в частности, современных сетевых служб.",основных служб,sys,0
"независимо от выбранного способа реализации основная работа семантического анализатора связана с проверкой соблюдения во входной программе семантических соглашений и контекстных условий входного языка, с включением во внутреннее представление компилируемой программы дополнительных операторов, связанных с семантикой входного языка, с проверкой семантических (смысловых) норм языка, напрямую не связанных с входным языком и его синтаксисом.",основная работа семантического анализатора,sys,0
"эта программа содержит табличное представление диаграммы переходов, построенной по регулярным выражениям из файла lex.l.",табличное представление диаграммы переходов,sys,0
"подобные преобразования становятся особенно актуальными при компиляции автоматически сгенерированных программ, работающих с многочисленными переменными и цепными присваиваниями перестановка независимых смежных участков программ.",перестановка независимых смежных участков,sys,0
"однако обычно (по аналогии с библиотеками стандартных программ) вместе с базовой системой (самим брокером corba) могут распространяться программы служб, спецификации которых также стандартизованы.",базовой системой,sys,0
"в то же время эти стандарты направлены на решение задач, являющихся одновременно и задачами систем программирования обеспечение поддержки программных продуктов на протяжении их жизненного цикла.",задачами систем программирования обеспечение,sys,0
"перечисленные способы управления обладают своими преимуществами (простотой или удобством), но имеют один существенный недостаток.",преимуществами,sys,0
": издательский отдел факультета вмк мгу (лицензия ид no 05899 от 24.09.2001), 2009 129 с. isbn настоящее пособие является дополнением к ранее выпущенному несколькими изданиями пособию (волкова и.",настоящее пособие,sys,0
во время каждой итерации система автоматически контролирует приближение реализации к описанным вариантам использования.,система,sys,0
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",схема использования,sys,0
"для программных продуктов разрабатывается документация, необходимая для пользователей, чтобы они могли работать с программным продуктом в целях решения собственных задач, и разработчиков, модифицирующих продукт.",целях решения,sys,0
"при выполнении различных задач, таких как программирование, отладка или синхронизация изменений текстов программ с централизованным репозиторием, можно устанавливать расположение окон, удобное для конкретной задачи.",централизованным репозиторием,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",элемент,sys,0
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",версии,sys,0
"компоненты классической системы программирования свойства систем программирования определяются не только компиляторами, но и многими другими компонентами этих систем, всей их совокупностью и способностью взаимодействовать друг с другом в процессе подготовки программ.",процессе подготовки,sys,0
"для языков ассемблера разработан стандарт, в котором специально указано, что все подобные языки должны обрабатываться соответствующими ассемблерами на основе принципа один-в-один .",языки должны,sys,0
среда eclipse обладает всеми современными возможностями по проверке синтаксической правильности вводимых текстов программ.,программ,sys,0
"службы в свою очередь вносят сведения о своих свойствах в справочник, при этом разные службы имеют разные свойства, описывающие их нефункциональные характеристики.",сведения,sys,0
"наиболее характерной для архитектуры zseries является система программирования, работающая под управлением z/os, так как система программирования linux в точности соответствует всем остальным системам, построенным на базе операционных систем типа unix, а операционная система виртуальных машин z/vm обычно работает в качестве промежуточной системной платформы, над которой в свою очередь надстраиваются другие операционные системы, в частности, и linux, и z/os (возможно даже одновременно).",системам,sys,0
"во- вторых, процедуры, оптимизированные таким образом, не могут включаться в общие библиотеки, поскольку используют нестандартный метод получения параметров.",нестандартный метод,sys,0
"определение процедуры для удаленных вызовов компилируется компилятором idl в описание этой процедуры на языках программирования, на которых будут разрабатываться клиент и сервер (например, заголовочные файлы на языке си или си++), и два дополнительных компонента клиентский и серверный переходники.",удаленных вызовов,sys,0
"результатом первого этапа являются сформулированные требования, то есть внешняя спецификация, описание системы с точки зрения пользователя.",пользователя,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",случае архитектурный,sys,0
в целом оптимизация на уровне исходной программы может дать наибольший эффект для улучшения технических характеристик программы.,программы,sys,0
"по-другому организована работа компилятора для работы с динамической памятью, ответственность за распределение которой возложена на компилятор.",работа компилятора,sys,0
"захват фрагментов памяти может осуществляться по произвольным запросам, так же производится и освобождение памяти.",захват фрагментов памяти,sys,0
"единственным их недостатком по сравнению с lr(1)-грамматиками является то, что lalr(1)-грамматики ограничивают возможности распознавателей по обнаружению ошибок во входных цепочках символов, точнее заставляют для обнаружения ошибок делать больше шагов вывода.",цепочках символов,sys,0
"язык java решил многие проблемы переносимости программ, однако, выбранная технология работы с этим языком (использование java как единственного языка для программирования любых приложений) поставила его в изолированное положение по отношению к другим языкам программирования.",другим языкам программирования,sys,0
"триады требуют меньше памяти для представления программ и имеют в этом преимущество перед тетрадами, к тому же триады ближе к двухадресным машинным командам, чем тетрады, поэтому их легче преобразовывать к окончательному виду объектной программы.",памяти,sys,0
"в интегрированных системах таблицы компилятора не уничтожаются после завершения компиляции, а сохраняются и используются в процессе отладки непосредственно.",интегрированных системах,sys,0
перед фиксацией система запускает текстовый редактор и просит ввести описание изменений.,фиксацией система,sys,0
"кроме того, выпускается целый ряд продуктов, таких как ibm visual age, ibm application development tool, которые поставляются вне z/os и служат для автоматизации и повышения эффективности процесса разработки приложений.",приложений,sys,0
"полиз наиболее удобна при трансляции арифметических выражений: a b c d + b 10 = обычно в компиляторах для перевода программ в полиз разрабатывается специальное представление не только арифметических операций, но и всех других исполняемых операторов, что позволяет полностью автоматизировать процесс преобразования стандартного представления на исходном языке программирования в полиз.",операторов,sys,0
"при проведении оптимизации каждой команде присваивается некоторая характеристика, называемая ее стоимостью (с точки зрения времени выполнения команды, использования аппаратных ресурсов и т. п.).",зрения,sys,0
"языковая среда le состоит из следующих элементов: базовые программы, обеспечивающие универсальную обработку сообщений, запуск и завершение программ, динамическое распределение памяти, обработку событий (в том числе ошибок) времени выполнения, взаимодействие между программами, написанными на разных языках; общие библиотеки, содержащие набор модулей для поддержки математических функций и функций даты и времени, реализуемых на основе стандартного интерфейса вызовов функций le; специфические библиотеки, содержащие модули, применяемые только для одного из поддерживаемых языков высокого уровня.",языков,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",элемента,sys,0
"чтобы загрузчик (в какую бы систему он ни входил) мог выполнить свои функции, редактор связей вставляет в заголовок исполняемого файла специальную таблицу, с помощью которой можно определить все места в программе, где надо произвести модификацию условных или относительных адресов в абсолютные.",модификацию,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,выделении лексем,sys,0
"для широкого распространения библиотечных средств в программировании имеются, по крайней мере, две причины: необходимость оказывать поддержку программам во время их исполнения на вычислительной машине, потребность накапливать полезные программы и передавать их другим пользователям, не раскрывая деталей реализации алгоритмов, запрограммированных в них.",исполнения,sys,0
"этот загрузчик входит в состав операционной системы и контролирует все обращения к динамически загружаемым библиотекам и модулям, считает эти обращения, а также освобождает память, когда количество действующих обращений оказывается равным нулю.",память,sys,0
"в программах на фортране достаточно сложно распознавать такие операторы do 1 i = 1.3 do 1 i = 1,3 которые в этом языке эквивалентны следующим: do1i=1.3 do1i=1,3 в первом операторе (присваивания) до ввода десятичной точки невозможно определить, являются ли буквы d и o частью идентификатора do1i .",программах,sys,0
37 начальные установки.,установки,sys,0
основное содержание понятия модуля наличие четко описанного интерфейса между ним и его окружением.,понятия модуля наличие,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",устройство отображения информации,sys,0
"кроме того, языковое окружение упрощает взаимодействие между приложениями, написанными на разных языках или для разных операционных сред, за счет специальных интерфейсных средств.",средств,sys,0
текстовые редакторы стали основой интегрированных сред разработки.,редакторы,sys,0
"точно так же, как книгу выписывают из библиотеки, следует сначала получить из репозитория рабочее дерево каталогов.",репозитория,sys,0
"он выполняет операции, обратные к действиям клиентскому переходнику принимает сообщение, содержащее фактические параметры вызова, распаковывает эти параметры при помощи десериализации и демаршалинга, вызывает локально соответствующую функцию серверного компонента, получает ее результат, упаковывает его и посылает по сети на клиентскую машину.",машину,sys,0
"семантика всех программ подразумевает, что при выполнении программ области памяти будут необходимы для хранения: кодов пользовательских программ; данных, необходимых для работы этих программ; кодов системных программ, обеспечивающих поддержку пользовательских программ в период их выполнения; записей о текущем состоянии процесса выполнения программ (например, записей об активации процедур).",памяти,sys,0
"появились и элементы объектно-ориентированного программирования, в частности, привязка процедур и функций к 106 описаниям сложных объектов.",программирования,sys,0
"чтобы удалить файл из проекта, его помечают для удаления.",удаления,sys,0
тестирование черного ящика.,черного ящика,sys,0
некоторые языки допускают автоматическое преобразование типов несогласованных операндов выражений.,выражений,sys,0
примыкает к такому способу управления конфигурацией работа в интегрированных средах разработки программного обеспечения.,интегрированных средах разработки программного,sys,0
"например, после ввода переменной, соответствующей некоторому классу, подсказка может предложить перечень методов и свойств этого класса, из которого можно выбрать нужный простым выбором нужной строки в перечне.",классу,sys,0
"управление рисками заключается в идентификации рисков и в предупреждении рисков, то есть снижении степени их негативного влияния на выполнение проекта.",рисками,sys,0
"проверка ведется с точки зрения разработчика: проверяется, насколько данный компонент соответствует своей спецификации.",разработчика,sys,0
процессор bde является посредником 109 между прикладными программами и базами данных.,данных,sys,0
"так как перед началом генерации кода уже выполнен синтаксический разбор, отсеяны очевидно ошибочные конструкции и получено полное внутреннее представление исходной программы, во внутреннем представлении программы эти объекты обозначаются специально построенными внутренними именами, по которым записи об объектах легко отыскать в информационных таблицах, а не теми именами, которые присвоил им программист.",разбор,sys,0
"ни компилятор, ни редактор связей не в состоянии знать, в какой именно области физической памяти будет размещаться программа в момент ее выполнения.",области,sys,0
"конечно, разработчик должен быть осведомлен о семантике интерфейсов методов и других ограничениях (например, о специфическом порядке, в котором следует вызывать методы для достижения той или иной цели).",специфическом порядке,sys,0
"перспектива может иметь много видов, но только один редактор, являющийся центральным объектом рабочего стола.",перспектива,sys,0
"такие имена должны быть уникальными на уровне библиотек, в которые они могут попадать после завершения компиляции.",завершения компиляции,sys,0
"идея, лежавшая в основе разработке языка rtl, заключалась в интерпретации пар последовательно сгенерированных транслятором машинных команд и их замены (где это оказывается возможным) на эквивалентные одиночные команды.",разработке языка,sys,0
"захват фрагментов памяти может осуществляться по произвольным запросам, так же производится и освобождение памяти.",освобождение,sys,0
"все, что можно сделать для повышения этой эффективности, делается в период компиляции.",эффективности,sys,0
"прямая подстановка функций в основной цикл программы может привести к существенному увеличению скорости работы программы, но одновременно и к увеличению размеров программы (если функция вызывается из нескольких разных мест).",увеличению размеров,sys,0
"трансляторы (используются также на других этапах разработки, например, при тестировании и отладке).",разработки,sys,0
"линейные участки имеются в любой программе и чаще всего содержат последовательности вычислений, состоящие из арифметических выражений и операторов присваивания значений переменным программы.",присваивания значений переменным программы,sys,0
"для языков программирования, которые строились с учетом возможного упрощения процесса трансляции, удается строить такую схему построения компилятора: 41 лексический анализатор в данном случае работает как сопрограмма для программы синтаксического анализатора.",упрощения процесса,sys,0
"тетрады представляют собой запись операций в форме четырех составляющих: операции, двух операндов и результата операции: <операция>(<операнд1>,<операнд2>,<результат>) тетрады составляют линейную последовательность команд, как в следующей записи арифметического выражения a=b c+d b 10 в виде последовательности тетрад: + b c d b 10 a = представление арифметического выражения языка си++ a = b c + d b 10 в виде дерева операций (один из возможных 51 1 b c t1 2 + t1 d t2 3 b 10 t3 4 - t2 t3 t4 5 = t4 ? a при вычислении выражения, записанного в форме тетрад, они вычисляются последовательно одна за другой, без каких-либо приоритетов.",операций,sys,0
"все более явственно просматривается тенденция строить сами системы программирования в объектно-ориентированном стиле, то есть включать в состав этих систем средства, позволяющие вести проектирование программ (и даже само техническое программирование) на основе принципов объектно- ориентированного подхода.",основе принципов объектно-,sys,0
"таких языков в настоящее время существует несколько, наиболее перспективным в настоящее время можно считать язык выполнения бизнес-процессов bpel.",выполнения бизнес-,sys,0
"слияние смежных циклов с независимыми внутренними операторами s1 и s2 позволяет снизить накладные расходы на организацию циклической работы: for (i = 0; i < n; i ++) { s1 } for (i = 0; i < n; i ++) { s1; s2 } for (i = 0; i < n; i ++) { s2 } замену циклов последовательностями операций можно выполнять для циклов, кратность которых известна уже на стадии компиляции.",внутренними операторами,sys,0
верификация проверяет саму программу и метаданные в поисках выходов из надежного окружения.,саму программу,sys,0
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",автоматизация построения синтаксических,sys,0
"выбор подсистем часто зависит от разработчика и существенно влияет как на сложность процесса проектирования, так и на конечное качество программного продукта.",качество программного,sys,0
26 основное преимущество интегрированной среды в удобстве работы ее пользователя.,основное преимущество интегрированной среды,sys,0
существует несколько вариантов взаимодействия программ с аппаратурой.,вариантов,sys,0
"важными являются возможности по поддержке работы в различных режимах, а также по поддержке ведения в системе нескольких разных проектов разработки программного обеспечения.",разных проектов разработки,sys,0
"загрузчики: основные функции, принципы работы работа редактора связей заканчивается формированием собранной программы, для которой остались неизвестными лишь начальные адреса размещения разделов памяти.",работа редактора связей,sys,0
"например, не допускается обращение к полям, которые выходят за отведенные им границы.",обращение,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",объединения,sys,0
"к указанным вариантам управления конфигурацией относятся: конфигурирование из командной строки, использование командных файлов, работа в интегрированных средах с проектами программных комплексов, использование систем управления версиями программных комплексов.",вариантам,sys,0
"в программе lex предусмотрено, что дополнительные атрибуты лексемы могут содержаться в глобальной переменной yylval, текстовое представление лексемы находится в переменной yytext, а длина лексемы в символах в переменной yyleng.",программе,sys,0
"библиотеки классов могут представлять собой совокупности независимых классов, иерархии классов, иерархии шаблонов классов.",совокупности независимых,sys,0
"эти операторы и функции, в свою очередь, могут использовать возможности операционной системы, а могут производить распределение памяти самостоятельно в рамках статически выделенного большого участка памяти.",операторы,sys,0
"применение отладчика объединяет возможности двух других методов отладки и дополнительно позволяет: проводить пошаговое выполнение отлаживаемой программы на основе шагов по машинным командам, строкам текста или операторам входного языка (интеграция с текстовым редактором); выполнять отлаживаемую программу до достижения ею одной из заранее заданных точек остановки (или до курсора текста); выполнять отлаживаемую программу до возникновения ситуации, в которой оказывается истинным некоторое логическое выражение над переменными и адресами программы; проводить трассировку и обратную трассировку работы программы; выдавать диагностические сообщения в терминах входного языка отлаживаемой программы; 96 просматривать (а иногда и изменять) значения переменных программы и содержимое областей памяти, занятых программой; изменять текст отлаживаемой программы (с помощью тектсового редактора) и продолжать отладку без полной перекомпиляции.",строкам текста,sys,0
"начиная с версии 4.0 системы turbo pascal, появившейся примерно 15 лет назад, язык программирования, использованный в них, значительно отличается от того языка паскаль, классическое описания которого, дано его автором никлаусом виртом и другими в их многочисленных работах.",многочисленных работах,sys,0
"в сложившихся условиях система программирования ос unix (по крайней мере, на первом этапе своего развития) стала ориентироваться на работу с командной строкой.",развития,sys,0
"программным продуктом называется такая программа, которая работает без авторского присутствия в рамках некоторого набора операционных сред.",программа,sys,0
"этого нельзя сделать даже символически, передав указание следующим компонентам системы программирования: редактор связей также не в состоянии будет определить этот адрес.",редактор,sys,0
определение занятости блоков памяти с помощью пометок позволяет избежать обозначенной проблемы циклических ссылок и необходимости отслеживания всех присваиваний указателям за счет организации сложного и затратного механизма сборки мусора .,механизма,sys,0
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",обработки,sys,0
"в то же время, класс lalr(1)-грамматик достаточно широк и подходит для описания синтаксиса реальных языкоа программирования (даже таких нетривиальных, как си++).",реальных языкоа,sys,0
"автоматизация построения синтаксических анализаторов 11 9 литература 12 7 4 8 авторы выражают глубокую признательность тамаре васильевне руденко, советы которой помогли им при подготовке настоящего пособия.",автоматизация построения,sys,0
это один из самых 95 первых методов отладки программ.,методов,sys,0
"такие системы имеют следующие характерные особенности: поддержка единой базы проектов (репозитория); 23 поддержка визуальных методов проектирования (графическое создание, редактирование, визуализация, печать отчетов по ходу выполнения проектов); использование унифицированного языка моделирования для фиксации решений, принятых при проектировании; наличие и интеграция всех средств поддержки для всех этапов жизненного цикла программных продуктов.",визуализация,sys,0
архитектура строящейся системы описывается в терминах языка uml в виде набора графических моделей.,набора графических,sys,0
"в основе их всех язык idl, в котором функции описываются образом, похожим на прототипы функций в языке си, а в файлах имеются определения типов и констант для маршалинга параметров и демаршалинга результатов.",определения типов,sys,0
эта среда состоит из общеязыковой исполняющей среды (common language runtime clr) и библиотеки классов.,библиотеки,sys,0
"команды cil помещаются в единицу распространения сборку (assembly) и сопровождаются метаданными, которые делают сборку полностью самодостаточным объектом.",сборку,sys,0
"обрабатывая эти файлы, компилятор автоматически получает всю необходимую информацию о компонентах библиотеки, причем эта информация поставляется в терминах входного языка компилятора.",информацию,sys,0
"если организация заказчика представляет собой разветвленную сеть рабочих мест, проводится тиражирование продукта.",тиражирование,sys,0
"дерево операций строится непосредственно и автоматически из дерева вывода, порождаемого синтаксическим анализатором.",вывода,sys,0
"98 тестирование проводится не только на той стадии разработки программ, которая специально для этого предназначена, но и на предшествующих стадиях при автономной отладке программ, еще до объединения их в единый программный комплекс.",разработки программ,sys,0
"некоторые современные теории предсказывают, что по мере приближения к теоретическому минимуму числа ошибок исправления, вносимые в программы, могут приводить к появлению даже большего числа ошибок, чем было ранее: во время пользовательского тестирования результаты работы программы проверяются с прикладной точки зрения.",ошибок,sys,0
"в такой схеме внутреннее представление программы существует только на концептуальном уровне, выражаясь только в последовательности шагов преобразований.",шагов преобразований,sys,0
"согласование результатов с пользователями производится только в точках, планируемых после завершения каждого этапа работ, требования к программному обеспечению зафиксированы в техническом задании на все время разработки.",техническом задании,sys,0
"внутреннее представление программ дополнительную сложность задаче компиляции придает тот факт, что из-за серьезных различий между входным и выходным языками провести непосредственное преобразование из одного языка в другой не всегда представляется возможным.",программ,sys,0
"эти системы способны вести централизованные базы данных программных проектов, к которым обеспечен коллективный доступ со стороны многих разработчиков одновременно.",централизованные базы,sys,0
"это стало возможным благодаря переходу от использования ms-dos к работе в операционной системе нового поколения windows и постепенной стабилизации и стандартизации возможностей, предоставляемых этой системой пользователям, в частности создателям систем программирования.",систем,sys,0
в определенных ситуациях объект может употребляться только один раз.,определенных ситуациях,sys,0
"это стало возможным благодаря переходу от использования ms-dos к работе в операционной системе нового поколения windows и постепенной стабилизации и стандартизации возможностей, предоставляемых этой системой пользователям, в частности создателям систем программирования.",поколения,sys,0
компонентный подход и визуальное программирование 82 4.2.,компонентный подход,sys,0
47 условные операторы (всех разновидностей) должны предусматривать возможность хода выполнения программы по любой из своих ветвей.,хода выполнения программы,sys,0
": издательский отдел факультета вмк мгу (лицензия ид no 05899 от 24.09.2001), 2009 129 с. isbn настоящее пособие является дополнением к ранее выпущенному несколькими изданиями пособию (волкова и.",изданиями,sys,0
"такие системы умеют работают с проектом программного комплекса , который включает в себя все файлы комплекса (как с текстами программ, так и с библиотечными модулями), а также режимы их обработки.",комплекса,sys,0
"в метаданные помещаются имя и версия сборки, сведения о локализации, данные о типах, включенных в сборку, список внешних файлов (сборок), от которых зависит данная сборка и т.",сборки,sys,0
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",записи значений,sys,0
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",генератор,sys,0
"определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние определение требований проектирование программирова ние компоновка (интеграция) тестирование документирова ние только для каскадной схемы, в нисходящей схеме реальный ход разработки программного обеспечения (каскадно- возвратная схема) идеальный случай разработки программного обеспечения (нисходящая и каскадная схемы) 16 технологические процессы, составляющие жизненный цикл любого программного продукта, стандартизованы.",разработки,sys,0
"требования выравнивания адресов могут приводить к потерям памяти, а также к трудностям при совместной работе программ, написанных на разных языках программирования и обрабатываемых разными компиляторами, имеющими разные стратегии распределения памяти.",распределения,sys,0
с их помощью построены реальные анализаторы для различных компиляторов и прикладных систем.,различных компиляторов,sys,0
<alt n> {семантическое действие n} ; такой вид правил полностью соответствует нормальным формам бэкуса-наура с учетом специфики представления информации в текстах программ.,учетом специфики,sys,0
"перспективы являются простым и естественным способом работы, поскольку удаляют из интерфейса все инструментальные кнопки, меню и виды, которые не относятся к текущей задаче.",способом работы,sys,0
"компилятор gcc получает основную информацию об объектной вычислительной машине из ее описаний, выполненных в виде алгебраических формул каждой из машинных команд.",алгебраических формул,sys,0
в результате для клиента удаленный вызов процедуры выглядит как обращение к обычной функции.,клиента,sys,0
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",оптимизации,sys,0
"вызов процедуры и ее аргументы упаковываются в сообщение в некотором стандартном для данной конкретной системы формате, понятном серверному переходнику.",системы,sys,0
"средства автоматизации прогонов тестов, позволяющие избежать ручного запуска большого количества тестов.",ручного запуска большого количества,sys,0
машина при этом описывалась в терминах передачи элементов данных между регистрами и памятью.,элементов данных,sys,0
"одно из самых существенных предположений, которые делаются при разработке генераторов кода, состоит в том, что в поступающем на его вход внутреннем представлении программы отсутствуют ошибки (хотя иногда генерация кода выполняется параллельно с семантическим анализом программ).",представлении,sys,0
"естественным следствием внедрения в практику интегрированных систем программирования явилось перенесение технологических приемов, использованных при их разработке на разработку того программного обеспечения, которая выполняется с их помощью.",практику интегрированных систем программирования,sys,0
"параллельно с разработкой системных библиотек началась работа по разработке библиотек прикладных программ, которые со временем превратились в пакеты прикладных программ, то есть в совокупности программ, позволяющих выполнить весь комплекс операций по обработке информации.",программ,sys,0
"определение занятости блока с помощью счетчика ссылок основано на постоянном контроле числа указателей, имеющихся в программе и содержащих ссылки на объекты, размещенные в данном блоке памяти.",постоянном контроле числа,sys,0
система vba представляет собой единую комплексную среду для поддержки разработки сложных прикладных программ и автоматизированных документов.,поддержки разработки сложных прикладных,sys,0
"например, в языке ада 45 процедура блок или цикл может иметь имя, которое должно находиться и в начале, и в конце синтаксической конструкции.",конструкции,sys,0
"символьные отладчики позволяют вести отладку в терминах исходного языка, а наибольшую отдачу от них удается получать в тех системах программирования, где символьные отладчики интегрированы в общую среду разработки программ.",среду разработки программ,sys,0
"структурированные типы данных class, struct, union, sequence отображаются в структуры или классы си++.",структурированные типы данных,sys,0
"например, непосредственное вычисление выражения a=(b+c)+(d+e) может потребовать, по крайней мере, одной временной переменной для хранения промежуточного результата сложения b и c. если же провести перестановку операций, эта переменная будет не нужна, а результат останется прежним: a=((b+c)+d)+e.",непосредственное вычисление выражения,sys,0
"сплошные стрелки на этом рисунке указывают порядок работы компилятора, а пунктирные линии потоки информации.",линии потоки информации,sys,0
"библиотеки шаблонов построены на основе параметрического полиморфизма, то есть параметризации типов, использования типовых параметров.",основе параметрического,sys,0
"ливерморские циклы представляют собой 24 программы (первоначально написанные на фортране) из состава производственных программ, разработанных ливеpмоpской национальной лабораторией имени лоуренса (сша).",национальной лабораторией,sys,0
концепция .net и c# 91 4.4.,концепция,sys,0
"единственное, что может измениться это начальный адрес самой области, но и это изменение происходит до выполнения программы, перед загрузкой ее в память.",выполнения программы,sys,0
"виды текстовых редакторов в соответствии со схемой классической системы программирования можно выделить три начальных элемента процесса создания программы: редактор текста исходной программы, подсистема автоматизированного проектирования и редактор графических форм ведения диалога.",процесса,sys,0
в правило можно вставлять явное задание приоритета правила с помощью конструкции %prec <терминал> (как в предпоследней альтернативе на приведенном выше примере).,приоритета,sys,0
"можно ожидать, что в будущем, по мере внедрения автоматизированных технологий разработки программного обеспечения, системы, предназначенные для автоматизации различных стадий общего процесса проектирования и разработки, будут объединяться в единые комплексы.",автоматизированных технологий разработки программного,sys,0
"-oriented analysis and design with applications , benjamin/cummings, 1990, addison-wesley publishing company, inc., 1994 (г. буч объектно-ориентированный анализ и проектирование с примерами приложений на с++ , 2-е издание, м., спб.",примерами,sys,0
"линейные участки имеются в любой программе и чаще всего содержат последовательности вычислений, состоящие из арифметических выражений и операторов присваивания значений переменным программы.",присваивания значений,sys,0
некоторые аспекты методов машинно- зависимой оптимизации имеют общий характер и применяются многими разработчиками.,аспекты,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",постановки задачи,sys,0
на этой стадии совершенно не принимаются во внимание аспекты взаимодействия данной программы с другими программами комплекса.,аспекты взаимодействия,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",способ,sys,0
верификация проверяет саму программу и метаданные в поисках выходов из надежного окружения.,окружения,sys,0
"машинно-независимая оптимизация основные преобразования машинно-зависимой оптимизации выполняются для отдельных выражений, линейных участков программ, циклов, вызовов процедур и функций.",основные преобразования машинно-,sys,0
"все статические библиотеки подключаются к программам, готовящимся к выполнению, ровно один раз в момент формирования редактором связей полной программы.",программам,sys,0
"однако возникновение программы, готовой к интерпретации или выполнению в результате работы только компилятора, возможно не всегда.",программы,sys,0
"итогом работы интерпретатора является результат, определяемый смыслом исходной программы, если исходная программа правильна синтаксически и семантически, либо сообщение об ошибке, в противном случае.",работы интерпретатора,sys,0
в то же время каких-либо команд обращения к этим компонентам компиляторы для динамических библиотек вставить не могут.,обращения,sys,0
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",стадии,sys,0
аналогично может работать программа семантического анализа и генератора команд.,анализа,sys,0
эквивалентные преобразования сохраняют семантику исходной программы; стоимость преобразования должна быть сопоставима с затрачиваемыми усилиями и полученными эффектами.,эквивалентные преобразования,sys,0
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",библиотека,sys,0
"вызов процедуры и ее аргументы упаковываются в сообщение в некотором стандартном для данной конкретной системы формате, понятном серверному переходнику.",аргументы,sys,0
"иногда операция доступа к данным по указателю приводит к введению в программу целой серии команд по настройке внутренних регистров, выделению фрагментов данных, размеры которых не кратны целому числу машинных слов или байтов и т.",настройке внутренних,sys,0
"память вычислительной машины при таком методе загрузке библиотек используется более рационально, но этот метод сложнее для реализации.",метод сложнее,sys,0
"семантическое действие, входящее в правило, обычно сводится к вычислению по i: expr : expr + term { = 1 + 3; } term ; по умолчанию выполняется простейшее семантическое действие: { = 1; } подпрограммы поддержки пишутся на том языке программирования, на котором будет сформирован синтаксический анализатор.",правило,sys,0
"некоторые современные теории предсказывают, что по мере приближения к теоретическому минимуму числа ошибок исправления, вносимые в программы, могут приводить к появлению даже большего числа ошибок, чем было ранее: во время пользовательского тестирования результаты работы программы проверяются с прикладной точки зрения.",результаты работы,sys,0
"если один разработчик добавляет новый параметр в функцию и исправляет все ее вызовы, пока другой разработчик одновременно добавляет новый вызов этой функции, и не передает ей этот новый параметр, что определенно является конфликтом (два изменения несовместимы), то система cvs не сообщит об этом.",изменения,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",конфигурации аппаратных,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,библиотеками существенной особенностью систем,sys,0
"спецификация corba позволяет пользователям систем, построенных на ее основе, организовывать свои программы в виде служб, предоставляющих услуги другим программам, то есть таким же службам или более традиционно построенным программам пользователей.",программам,sys,0
"брокером объектов называют распределенные системы программного обеспечения, основанные на использовании понятия распределенного объекта и модели удаленного обращения к методам этого объекта, являющейся объектно-ориентированным расширением модели удаленного вызова процедуры.",объекта,sys,0
"например, если в системе команд машины имеется формат непосредственных данных (данных, размещаемых непосредственно в самой команде), то распределять память для некоторых целочисленных (а иногда и вещественных) констант в статической памяти не обязательно, они будут размещены в самой программе.",самой программе,sys,0
"тетрады представляют собой запись операций в форме четырех составляющих: операции, двух операндов и результата операции: <операция>(<операнд1>,<операнд2>,<результат>) тетрады составляют линейную последовательность команд, как в следующей записи арифметического выражения a=b c+d b 10 в виде последовательности тетрад: + b c d b 10 a = представление арифметического выражения языка си++ a = b c + d b 10 в виде дерева операций (один из возможных 51 1 b c t1 2 + t1 d t2 3 b 10 t3 4 - t2 t3 t4 5 = t4 ? a при вычислении выражения, записанного в форме тетрад, они вычисляются последовательно одна за другой, без каких-либо приоритетов.",последовательности,sys,0
"например, после ввода переменной, соответствующей некоторому классу, подсказка может предложить перечень методов и свойств этого класса, из которого можно выбрать нужный простым выбором нужной строки в перечне.",выбором,sys,0
"семантическое действие, входящее в правило, обычно сводится к вычислению по i: expr : expr + term { = 1 + 3; } term ; по умолчанию выполняется простейшее семантическое действие: { = 1; } подпрограммы поддержки пишутся на том языке программирования, на котором будет сформирован синтаксический анализатор.",подпрограммы,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",проектирования,sys,0
"87 примерами библиотек компонентов являются распространяемые компанией microsoft библиотеки com (component object module) и dcom (distributed com), библиотеки различных компаний, построенные на основе стандарта corba (common object request broker architecture), библиотеки, входящие в состав серверов приложений j2ee и .net.",библиотеки различных,sys,0
в самых простых системах проведенный анализ используется только для выделения лексем в тексте с помощью графических средств дисплея.,средств дисплея,sys,0
"результат проектирования диалога непосредственно виден на экране эвм, никакой компиляции не требуется.",экране эвм,sys,0
лексический анализ на лету суть лексического анализа на лету в поиске и выделении лексем входного языка в тексте программы непосредственно в процессе ее создания разработчиком.,поиске,sys,0
"машинно-зависимая оптимизация машинно-зависимые методы оптимизации ориентированы на конкретную архитектуру вычислительной системы, то есть на совокупность аппаратных и программных составляющих, а также взаимосвязи между ними.",оптимизация машинно-зависимые,sys,0
"иногда в компиляторах, даже очень сложных и проводящих глубокую оптимизацию, тоже возникает потребность на некотором этапе преобразования транслируемой программы перевести программу к виду, более приближенному к ее окончательному представлению.",транслируемой программы,sys,0
системный (интегрированный) программный продукт есть комплекс программных продуктов (пакет).,продукт,sys,0
техника работы с библиотеками существенной особенностью систем программирования является наличие и номенклатура библиотек подпрограмм.,особенностью систем,sys,0
"в настоящий момент активно ведется разработка нового проекта subversion, учитывающего положительные стороны системы cvs.",стороны системы,sys,0
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",обеспечением,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",снижение времени выполнения,sys,0
"однако в последнее время все большее распространение приобретают подходы, поддерживающие более динамичные асинхронные формы взаимодействия, а также системы распределенного программного обеспечения, взаимодействующие на основе обмена сообщениями.",взаимодействия,sys,0
при использовании динамических объектов говорят о динамическом связывании объекта данных и области памяти.,использовании,sys,0
"запись операций и операндов в традиционном виде применяется только в программах, подаваемых на вход компиляторов.",традиционном виде,sys,0
использование компонента подразумевает возможность поставки или удаления компонента отдельно от всей остальной системы.,возможность,sys,0
"создаваемые с использованием универсальных модулей языковой среды приложения могут выполняться в различных операционных средах, включая как внутрисистемные (например, unix shell), так и среды промежуточного слоя (db2, cics).",промежуточного слоя,sys,0
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",иерархии программно,sys,0
"в современных условиях, когда библиотеки достигли высокой степени развития, доля компонентов библиотек в объеме готовых программ уже превышает половину этого объема.",развития,sys,0
"правильная организация процессов верификации, тестирования и документирования имеет особое значение для последующего внедрения, тиражирования и сопровождения создаваемых программ.",организация процессов,sys,0
"в настоящее время отладчикам поддержка оказывается как системой программирования, так и аппаратурой вычислительных систем, в системы команд которых обычно вводятся специальные команды, облегчающие работу отладчиков.",команды,sys,0
использование абстракций и спецификаций при разработке программ .,спецификаций,sys,0
в идеальном случае процесс разработки может иметь вид последовательно выполняемых слабо связанных между собой этапов.,случае,sys,0
"известным примером текстового редактора является редактор vi, входящий в состав стандартной системы программирования операционной системы unix.",системы программирования операционной системы,sys,0
"внутреннее представление исходной программы в компиляторе в наибольшей степени зависит от той обработки, которой должна подвергнуться программа.",внутреннее представление исходной программы,sys,0
"алгоритм работает следующим образом: все ранее выделявшиеся блоки памяти помечаются как свободные; анализируются все указатели (переменные программы) и помечаются занятыми все блоки, на которые они ссылаются; итеративно анализируются все указатели, хранящиеся в виде значений полей объектов, размещенных в блоках, помеченных, как занятые; процесс останавливается, когда новые занятые блоки перестают возникать; все недостижимые по указателям блоки памяти остаются свободными, занятая ими память может быть уплотнена; одновременно с уплотнением занятых блоков осуществляется модификация значений действующих указателей.",виде значений полей,sys,0
"если используется объектно-ориентированный подход к проектированию и объектно-ориентированная декомпозиция, полезными оказываются средства, позволяющие разработчикам автоматически строить визуальные описания классов объектов, просматривать их и согласованно редактировать.",визуальные описания классов,sys,0
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",текстовые документы,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",оптимизация,sys,0
"управление рисками заключается в идентификации рисков и в предупреждении рисков, то есть снижении степени их негативного влияния на выполнение проекта.",управление,sys,0
"например, если в системе команд машины имеется формат непосредственных данных (данных, размещаемых непосредственно в самой команде), то распределять память для некоторых целочисленных (а иногда и вещественных) констант в статической памяти не обязательно, они будут размещены в самой программе.",самой команде,sys,0
"иногда в вызовах процедур и функций допускается указывать не все фактические параметры, остальные параметры получают значения по умолчанию.",параметры,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",дополнительные удобства работы,sys,0
"это означает, что загрузчик системы программирования в принципе не способен решить все проблемы модификации адресов, поскольку он не может знать точных характеристик конфигурации аппаратных средств и состояния внутренних таблиц подсистемы управления памятью операционной системы в момент, когда программа начнет выполняться.",характеристик конфигурации аппаратных средств,sys,0
"эта компиляция формирует три файла: файл-заголовок (например, ""interface.h"") файл клиентского переходника файл серверного переходника в файл-заголовок из исходного описания на idl передаются уникальный идентификатор интерфейса, определения типов, констант и описания функций (прототипы).",файл серверного,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",управления динамической,sys,0
"в принципе можно было продолжить работу над совершенствованием технологии java, но компания выбрала другой путь и предложила новый язык программирования си#.",совершенствованием,sys,0
"порядок вычисления тетрад может быть изменен только явно с помощью специальных тетрад, вызывающих переходы по последовательности тетрад вперед или назад.",вычисления,sys,0
"кроме видов рабочий стол содержит одну специальную панель редактор, в котором можно редактировать документы различных типов, например, исходный текст программы.",документы,sys,0
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",возврат,sys,0
"машинно-независимая оптимизация получила такое название потому, что проводимые в рамках этого процесса преобразования не зависят от архитектуры вычислительной системы, для которой предназначена объектная программа.",процесса,sys,0
кулямин.,кулямин,sys,0
"на различных (вообще говоря, несовместимых друг с другом аппаратно и имеющих разные операционные системы) компьютерах в рамках информационной сети (технология dcom), использующих модель удаленного обращения к методу полностью, включая сериализацию и обработку сообщений.",сообщений,sys,0
"в метаданные помещаются имя и версия сборки, сведения о локализации, данные о типах, включенных в сборку, список внешних файлов (сборок), от которых зависит данная сборка и т.",локализации,sys,0
"к типичным для многих языков контекстным условиям относятся такие семантические ограничения: каждое имя, используемое в программе, должно быть описано, причем только один раз; в операторе присваивания типы переменной и выражения должны совпадать (либо относиться к некоторым семантически близким типам); в условном операторе и в операторе цикла в качестве условия возможно только логическое выражение; операнды операций отношения должны быть целочисленными (либо иметь какие-либо другие, но точно известные типы); тип выражения и совместимость типов операндов в выражении определяются по фиксированным для данного языка правилам; старшинство операций обычно задано синтаксическими правилами; каждая метка, на которую есть ссылка или переход, должна один раз присутствовать в программе (несколько вхождений одной метки легко проверяются во время анализа синтаксиса); единственность описаний идентификаторов рассматривается с учетом блочной структуры программы; при вызове функции число фактических параметров и их типы должны соответствовать числу и типам формальных параметров; обычно в языке накладываются ограничения на типы операндов каждой операции, определенной в этом языке; на типы левой и правой частей в операторе присваивания; на тип параметра цикла; на тип условия в операторах цикла и условном операторе и т.",блочной структуры программы,sys,0
"он позволяет готовить и вносить изменения в тексты исходных программ, однако в современных системах программирования его функции стали еще более широкими.",изменения,sys,0
"таким образом, основные задачи редактора связей таковы: связывание между собой по внешним данным объектных модулей, порождаемых компилятором и составляющих единую программу; подготовка таблицы трансляции относительных адресов для загрузчика;",таблицы трансляции относительных,sys,0
получающийся в данном случае компилятор никогда не может быть однопроходным.,данном случае компилятор,sys,0
"активную роль в таком подходе приобретают данные программ, то есть объекты.",программ,sys,0
"например, для некоторых векторных архитектур снижение времени выполнения программы иногда можно получить, не проводя вынесение вычислений из циклов, а внося их туда: в таких архитектурах оказывается эффективнее провести повторные вычисления с помощью векторных регистров, чем нарушать работу векторного конвейера выполнением операции со скалярной переменной.",выполнением операции,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",программ фазы синтеза программ,sys,0
"наличие виртуальных функций (иногда семантически далеких друг от друга) заставляет при формировании нижних уровней иерархии реализовывать их все, даже в тех случаях, когда для некоторого конкретного производного класса конкретные функции не могут быть реализованы сколько-нибудь эффективно в виду невозможности придать им полезную интерпретацию.",функции,sys,0
"в случае выбора стековой дисциплины необходимо выделить некоторый фрагмент свободной памяти, на котором при запросах ресурсов памяти будет моделироваться работа со стеком областей памяти в стиле первым освобождается последний из ранее размещенных фрагментов памяти .",памяти,sys,0
"реализации cli включают в себя также .net compact framework (компания microsoft для мобильных устройств и игровых приставок xbox), mono (проект с открытым кодом для ос linux), portable .net (часть более общего проекта с открытым кодом dotgnu) и ряд других.",общего проекта,sys,0
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",вызовов,sys,0
"распределение статической памяти (как глобальной, так и локальной) не вызывает особых сложностей, размеры объектов базовых типов данных точно определены для каждой вычислительной системы, компилятору надо лишь приспособить аппаратные элементы для хранения значений программных объектов, то есть выбрать оптимальный из многих возможных вариантов.",значений программных,sys,0
"лучше иметь синтаксически ориентированные текстовые редакторы, которые обеспечивают подсветку служебных слов, обеспечивают работу с функциональной клавиатурой, позволяющей вводить сложные языковые конструкции одним нажатием на клавишу, проверяют баланс скобок.",редакторы,sys,0
"технология разработки распределенного программного обеспечения тоже может обладать прозрачностью настолько, насколько она позволяет разработчику забыть о том, что создаваемая система распределена, и насколько легко в ходе разработки можно отделить аспекты построения системы, связанные с ее распределенностью, от решения задач прикладной области, в рамках которых системе предстоит работать.",разработчику,sys,0
"этим достигается возможность комплектования программ, оттранслированных с помощью gcc, с программами, полученными при использовании других компиляторов и ассемблеров, а значит построения гибких, мощных и удобных систем программирования.",возможность комплектования программ,sys,0
"работая в текстовом редакторе, пользователь может выделить в тексте программы желаемый идентификатор и, нажав некоторую комбинацию клавиш на клавиатуре, получить информацию об объектах, имеющих такое имя.",пользователь,sys,0
"интегрированная среда разработки eclipse интегрированная среда eclipse является примером системы, построенной на базе обычного диалогового редактора, и превратившейся в интегрированную самодостаточную среду разработки программного обеспечения, служит приобретающая все больше пользователей среда разработки eclipse.",разработки программного,sys,0
модули и низкоуровневые компоненты часто тестируются с помощью структурной стратегии.,помощью,sys,0
"клиентские части работают под управлением unix систем, а также системы windows.",систем,sys,0
"с другой стороны скелетон защищает от проблем распределенности сервер, поэтому сервер может разрабатываться так, как если бы вызовы к нему поступали из локального окружения.",другой стороны скелетон,sys,0
"этот загрузчик входит в состав операционной системы и контролирует все обращения к динамически загружаемым библиотекам и модулям, считает эти обращения, а также освобождает память, когда количество действующих обращений оказывается равным нулю.",обращений,sys,0
"можно также задавать правоассоциативность (%right) терминалов и их неассоциативность (%nonassoc), которая означает невозможность комбинирования операторов (например, операторов отношения > ).",операторов отношения,sys,0
"захват фрагментов памяти может осуществляться по произвольным запросам, так же производится и освобождение памяти.",захват фрагментов,sys,0
на основе объектно- ориентированной декомпозиции сложные программные системы удается строить путем эволюционного развития небольших подсистем.,эволюционного развития,sys,0
"означает, что в классе символов на этом месте может стоять любой символ, кроме символа новой строки.",строки,sys,0
"например, в составе систем visual studio компании microsoft, имеется система visual sourcesafe, позволяющая создавать базы данных версий, включать файлы в состав версий программных проектов, 92 отслеживать историю их изменений, сравнивать различные версии между собой.",состав,sys,0
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",использовании,sys,0
"достигается это примененным методом описания той вычислительной машины, для которой должна осуществляться трансляция.",методом описания,sys,0
во многих языках программирования действуют правила хорошего программирования.,программирования,sys,0
"например, после ввода переменной, соответствующей некоторому классу, подсказка может предложить перечень методов и свойств этого класса, из которого можно выбрать нужный простым выбором нужной строки в перечне.",простым выбором,sys,0
можно наблюдать и обратное влияние на систему unix со стороны проекта gnu.,стороны,sys,0
"техническая реализация методов управления динамической памяти в команды и константы статические данные стек куча 70 значительной степени зависит от тех потребностей, которые демонстрируют пользователи, определяя в своих программах объекты, память для которых должна выделяться на основе динамической стратегии.",основе,sys,0
"отладчик позволяет менять значения переменных, что иногда помогает программисту проверить гипотезу о причинах неправильного поведения программы, а впоследствии и исправить программу.",значения переменных,sys,0
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",языком промежуточного,sys,0
"в состав процессора bde входят драйверы систем управления базами данных (субд) для некоторых, наиболее распространенных на персональных эвм субд: microsoft access, foxpro, paradox, dbase и некоторых других.",персональных эвм субд,sys,0
"этого преимущества удается добиться за счет разработки специального механизма операционной системы, который выполняет подключение фрагментов одних программ к другим в момент их выполнения.",разработки специального,sys,0
"обычно после компоновки проводится этап комплексного тестирования программных систем, на котором проверяется правильность взаимодействия всех автономно разработанных составных частей между собой.",тестирования программных,sys,0
"избежать подобных ошибок при работе с библиотеками удается только, если точно следовать правилам работы с внешними компонентами, которые подробно разъясняются их поставщиками.",компонентами,sys,0
"так как программа изменяется при исправлении ошибок и росте ее функциональности, типы ошибок, находимые в ней, меняются со временем, и, следовательно, меняется эффективность стратегии.",временем,sys,0
эта модель основана на объектно-ориентированном расширении понятия вызова процедуры и понятии о распределенном объекте.,расширении понятия вызова,sys,0
задачи семантического анализа семантический анализ пользуется всеми результатами предыдущих стадий компиляции.,предыдущих стадий компиляции,sys,0
"такое свойство триад приводит к необходимости использования в компиляторах специальных алгоритмов распределения памяти для хранения 52 промежуточных результатов, поскольку в отличие от тетрад, какие- либо явные временные переменные в триадах не используются.",использования,sys,0
"этот механизм включается в момент, когда перед системой управления памяти возникает необходимость выделить фрагмент памяти такого размера, который невозможно обеспечить, не проведя уплотнения занятых блоков памяти.",системой управления,sys,0
"поэтому часто для оптимизации выбирается один, главный критерий, либо некоторый интегрированный критерий, основанный на сбалансированном подходе к достижению многих целей одновременно.",сбалансированном подходе,sys,0
"необязательное вхождение (нуль или один раз) двойные кавычки используются для цитирования, то есть непосредственного указания последовательности символов: a.+ обозначает строку из четырех символов (без самих кавычек) приведем примеры записи регулярных выражений, правильных с точки зрения программы lex: if / идентификатор if / [a-z][a-z0-9] / идентификатор / [0-9] / число / ([0-9]+ .",последовательности символов,sys,0
"системами типа клиент-сервер называются простейшие распределенные программные системы, построенные только в двух уровнях уровне клиента и уровне сервера.",типа клиент,sys,0
"локальная область памяти выделяется в начале выполнения некоторого фрагмента работающей программы (оператора, блока, функции, процедуры).",оператора,sys,0
"существенную роль в процессах освобождения и повторных захватах памяти начинает играть процедура сборки мусора , то есть поиска ранее освобожденных участков памяти, которые можно использовать повторно.",участков,sys,0
"для этого из него удаляются цепочки нетерминальных символов, а также узлы, не несущие семантической нагрузки при генерации объектной программы (например, скобки, меняющие порядок операций): 50 грамматика исходного языка не имеет никакого влияния на то, какой узел в дереве будет операцией, а какой операндом.",генерации объектной,sys,0
"например, для записей об активации процедур, которые содержат всю необходимую информацию для обеспечения выполнения процедур и возврата в точки вызова, в частности, фактические параметры, локальные, в том числе временные переменные, адреса возврата, значения регистров в момент входа в процедуру, ссылки на подобные записи объемлющих и вызвавших процедур.",возврата,sys,0
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",текста,sys,0
"аналогичным образом производится оптимизация специальных регистров сумматоров, индексных регистров, регистров базирования и других.",специальных регистров,sys,0
"реально процесс разработки программного обеспечения никогда не бывает простым, чаще применяется каскадно-возвратный метод: 15 е для преодоления проблем каскадно-возвратного метода используется спиральная модель жизненного цикла, упор в которой делается на начальные этапы: определение требований, их анализ и проектирование.",определение требований,sys,0
"для тех языков, в которых имеются макросредства, дополнительно выполняется расширение макровызовов.",расширение макровызовов,sys,0
"например, при создании программ, взаимодействующих друг с другом с помощью брокеров запросов объектов, требуется перед программированием составить описание интерфейсов программных компонентов.",запросов,sys,0
"важной возможностью, имеющейся в среде eclipse, является ее способность осуществлять рефакторинг текстов программ, то есть изменение структуры текста без изменения его функциональности: переименование полей, переменных, классов, интерфейсов, изменение логической организации программ на уровне классов, например, перемещение методов или полей из класса во вложенный или объемлющий класс, изменение состава классов, например, преобразование локальных переменных в поля класса, выделение части метода и организация нового метода на ее основе, генерация установочных методов для полей.",нового метода,sys,0
"занято свободно свободн занято о 71 выделяемый блок памяти уже не может состоять из фрагмента, нужного пользователю и (может быть) дополнительного небольшого расхода на хранение размера блока.",памяти,sys,0
"64 в каждой вычислительной машине могут оказаться аппаратно реализованные команды, удобные для выполнения специфических операций (машинные идиомы).",машинные идиомы,sys,0
"если один разработчик добавляет новый параметр в функцию и исправляет все ее вызовы, пока другой разработчик одновременно добавляет новый вызов этой функции, и не передает ей этот новый параметр, что определенно является конфликтом (два изменения несовместимы), то система cvs не сообщит об этом.",другой разработчик,sys,0
наличие общего корня библиотеки классов позволяет использовать полиморфизм для реализации общих алгоритмов и структур данных.,структур,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",разработкой,sys,0
"всякая система, подчиняющаяся спецификации corba, состоит из трех основных частей: брокер запросов объектов, содержащий базовые функции взаимодействия объектов.",взаимодействия объектов,sys,0
на этом этапе производится окончательное преобразование внутреннего представления транслируемой программы к записи на машинном языке или на языке ассемблера.,представления,sys,0
динамически загружаемые библиотеки компоненты динамических библиотек (динамически загружаемые компоненты и библиотеки) подключаются к программам во время выполнения этих программ.,библиотеки,sys,0
"экранные редакторы это самое удобное средство редактирования файлов, а строчные обычно применяются в условиях, когда устройство отображения информации не позволяет одновременно показывать сразу несколько строк текста.",средство,sys,0
"имея такой перечень, который обычно передается компоновщику в качестве одного из параметров его запуска, он может обеспечить загрузку всех библиотек в память перед началом работы основной программы.",библиотек,sys,0
"развитием интегрированных систем (сред) программирования являются системы программирования, интегрирующие компоненты, обеспечивающие поддержку на этапах разработки программ, предшествующих этапу кодирования, то есть на этапах, связанных с проектированием программ.",поддержку,sys,0
однако простой демонстрацией текстов документов справочные системы современных систем программирования не ограничиваются.,современных систем,sys,0
"неявное освобождение памяти проводится в случае автоматического управления распределением памяти, которое выполняет компилятор и программы системной поддержки при отсутствии явных операторов управления памятью в программе пользователя.",явных операторов управления памятью,sys,0
"в состав этих средств входят отладчики, как очень простые, уже давно включенные в состав систем программирования, так и более сложные, позволяющие устанавливать точки останова, просматривать значения переменных, проводить прямую и обратную трассировку хода выполнения программ.",обратную трассировку хода выполнения,sys,0
п. конкретный состав подобных требований жестко связан с семантикой компилируемого языка.,семантикой,sys,0
существенным недостатком работы в таком режиме является необходимость постоянного присутствия квалифицированного пользователя системы на рабочем месте для постоянного запуска следующих и следующих компонентов.,постоянного присутствия,sys,0
"процедура заносит лексему в таблицу анализатора / } третий раздел программы содержит различные вспомогательные процедуры, которые могут быть скомпилированы отдельно, но загружены должны быть вместе с лексическим анализатором.",третий раздел программы,sys,0
"20 библиотеки содержательная часть (средства ввода/вывода, наборы функций, для объектно-ориентированных языков классы и компоненты как системы классов) средства работы с библиотеками (например, работа с иерархиями классов), то есть библиотекари.",наборы,sys,0
"к таким системам относятся, например, системы, работающие с языками uml, visual basic.",системам,sys,0
"с одной стороны это означает, что объекты нельзя использовать вне тех блоков, где они описаны и видны, с другой стороны, это ослабляет требования уникальности имен, поскольку объектам, относящимся к разным блокам, можно давать одинаковые имена, не внося при этом путаницы в программу.",уникальности,sys,0
схемы работы трансляторов степень преобразования программ трансляторами может быть различной.,трансляторов степень преобразования программ,sys,0
"современные генераторы синтаксических анализаторов yacc (а также другие генераторы, выполняющие аналогичные построения, например, bison) представляют собой мощные программные 155 инструменты.",инструменты,sys,0
"обработка программы на языке java обратным компилятором позволяет получить эквивалентный интерфейс, написанный на idl, имея который, можно построить (на языке java или другом языке программирования) программу клиента corba, имеющую доступ к нужному объекту.",клиента,sys,0
"отладчик, встроенный в систему программирования, работает в терминах языка visual basic, поэтому отладка программ не представляет особой сложности.",терминах языка,sys,0
"в состав системы программирования включаются несколько компонентов, важнейшим из которых является компонент, ответственный за преобразование исходной программы к виду, в котором она может быть понята вычислительной системой.",программирования,sys,0
"важность данного метода постоянно возрастает с ростом возможностей вычислительной аппаратуры, но метод имеет ряд выраженных недостатков.",ростом возможностей,sys,0
"в программе для командного процессора (makefile) перечислялись все используемые входные (исходные) текстовые файлы, библиотеки программ, все порождаемые объектные файлы (отдельно и независимо откомпилированные исходные файлы), а также параметры запуска отдельных компонентов систем программирования и правила обработки каждого отдельного файла.",запуска отдельных,sys,0
"при выполнении различных задач, таких как программирование, отладка или синхронизация изменений текстов программ с централизованным репозиторием, можно устанавливать расположение окон, удобное для конкретной задачи.",программ,sys,0
"пользователю теперь предоставляют набор как традиционных редакторских возможностей, основанных на редактировании строк по их номерам, которые обычно показываются среди другой служебной информации, так и контекстное редактирование.",контекстное редактирование,sys,0
"программный продукт может исполняться, тестироваться и модифицироваться без участия автора (он отчужден от автора).",участия,sys,0
"результатом работы второго этапа являются схема иерархии подсистем (или модулей, для алгоритмической декомпозиции), функциональность и интерфейсы каждой подсистемы, то есть их внешние спецификации (первые два результата возникают от проектирования в большом ), 13 внутреннее представление (структура) данных для каждого отдельного модуля программы, алгоритмы, обрабатывающие данные в каждом отдельном модуле программы (последние два результата от проектирования в малом ).",подсистемы,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",компилятор входные,sys,0
"при проведении оптимизации каждой команде присваивается некоторая характеристика, называемая ее стоимостью (с точки зрения времени выполнения команды, использования аппаратных ресурсов и т. п.).",использования,sys,0
"система управления сборкой и компиляцией программ (make), позволяющая отслеживать изменения файлов, составляющих программный комплекс, задавать взаимозависимости файлов, оптимизировать процесс подготовки программных комплексов на основе взаимозависимостей и правил компиляции и компоновки.",взаимозависимости,sys,0
"однако некоторые языки программирования имеют настолько близкую семантику вызовов процедур и представления данных, что компиляторы для них могут создавать программы, которые можно вызывать из программ, написанных на других языках.",представления,sys,0
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",решения,sys,0
"общая схема работы систем программирования большинство систем программирования включают в свой состав ограниченный набор компонентов: средства интеграции компонентов системы программирования редакторы текстов, в том числе макрогенераторы компиляторы и ассемблеры библиотеки редакторы связей средства конфигурирования и управления версиями отладчики и средства тестирования средства тестирования профилировщики справочные системы.",тестирования профилировщики,sys,0
"например, при создании программ, взаимодействующих друг с другом с помощью брокеров запросов объектов, требуется перед программированием составить описание интерфейсов программных компонентов.",программ,sys,0
"например, многие системы программирования позволяют строить на экране монитора графические формы, состоящие из отдельных более или менее независимых элементов ( компонентов ) графических кнопок, надписей, диаграмм, окон для ввода и вывода информации и так далее.",вывода информации,sys,0
реальную помощь таким коллективам при управлении конфигурацией формируемых программных комплексов могут оказать только специально разрабатываемые системы управления версиями программ.,системы,sys,0
описанные ранее методы анализа программ и генерации этих программ на других языках позволяют решить главную задачу компиляции отыскать эквивалентное представление исходной программы в терминах выходного языка.,генерации,sys,0
"наиболее наглядным примером может быть пример реализации операций, связанных с вводом и выводом информации.",реализации операций,sys,0
"подсказка возникает на экране в том случае, когда разработчик ввел какую-то часть исходного текста, определенную лексическим анализатором как начало некоторого заслуживающего внимания фрагмента.",исходного текста,sys,0
"все ранее описанные виды системных платформ базируются чаще всего на синхронных методах обращений, когда клиентское приложение обращается к методу, предлагаемому (возможно, динамически определяемым) поставщиком службы.",клиентское приложение,sys,0
"выполнение работ на этапах внедрения и тиражирования требует использования средств управления проектами, а также средств управления версиями программных продуктов.",внедрения,sys,0
"первая часть выполняется после завершения синтаксического анализа очередной конструкции входного языка (процедуры, функции, блока операторов и т. п.) на 44 основе имеющихся в информационных таблицах данных.",таблицах,sys,0
процесс подготовки большого числа почти одинаковых программ проводится в пакетном режиме работы операционной системы без оперативного контроля со стороны оператора и даже без его присутствия.,процесс подготовки большого числа,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",возможность получения справочной информации,sys,0
"в реальных компиляторах применяются следующие общепринятые способы внутреннего представления программ: связные списочные структуры, представляющие синтаксическое дерево; многоадресный код с явно именуемыми результатами (тетрады оператор, операнд, операнд, результат); 49 многоадресный код с неявно именуемыми результатами (триады оператор, операнд-результат, операнд), иногда этот способ представления модифицируется и используется последовательность косвенных триад (сами триады хранятся в отдельной таблице, формируемая программа представляет собой последовательность ссылок на таблицу); инфиксная запись (операции записываются между своими операндами, как в обычной записи арифметических выражений); префиксная запись (операции записываются перед своими операндами, как в записи вызова процедуры или функции с параметрами); постфиксная запись (операции записываются после своих операндов);",отдельной таблице,sys,0
передача функции загрузчика из системы программирования в операционную систему позволила обеспечить повторное использование библиотечных компонентов при обращении к ним нескольких различных программ.,функции,sys,0
одинаковые размеры выделяемых блоков памяти делают проблему фрагментации памяти практически не актуальной.,памяти,sys,0
"основное преимущество модели удаленного вызова процедуры состоит в том, что сам клиент не знает, что вызов был удаленный.",процедуры,sys,0
"введение в системное программирование , м.: мир , 1988).",программирование,sys,0
при обработке этого вызова клиентский переходник выполняет следующие действия: 131 1.,действия,sys,0
"при их отсутствии операции выполняются слева направо с учетом приоритетов, наивысший из которых имеет левоассоциативная операция итерации, средний операция конкатенации, низший операция объединения множеств.",операция конкатенации,sys,0
"некоторые системы программирования предлагают поддержку пользовательской оптимизации, в частности, имеют в своем составе профилировщики, помогающие выявить те фрагменты программ, которые для своего выполнения требуют максимальной доли времени работы программы.",максимальной доли времени,sys,0
"например, при генерации вызовов процедур с параметрами, транслятор gcc может формировать различные последовательности команд записи значений фактических параметров в стек (в прямом или в обратном порядке), что позволяет точно согласовывать порядок и способы передачи параметров процедурам и функциям, а также методы обратной передачи значения функций после завершения их выполнения.",завершения,sys,0
"например, в архитектуре с одним потоком вычислений операцию a+b+c+d+e+f надо выполнять в порядке ((((a+b)+c)+d)+e)+f.",операцию,sys,0
"основную роль, как и во всех системах клиент/сервер, играет интерфейс объектов, формируемый при помощи некоторого языка idl, в данном случае объектно-ориентированного.",данном случае,sys,0
"в тех случаях, когда такую формулу записать слишком сложно, в свободно распространяемые тексты программ компилятора можно добавить новый параметр, описывающий дополнительный режим трансляции.",программ,sys,0
47 условные операторы (всех разновидностей) должны предусматривать возможность хода выполнения программы по любой из своих ветвей.,выполнения,sys,0
результат тетрады никогда опущен быть не может.,результат,sys,0
"профилировщики один из способов повысить эффективность работы программы провести ее профилирование, то есть определить время, затрачиваемое на выполнение отдельных ее фрагментов.",эффективность работы,sys,0
"при генерации команд на основе внутреннего представления отдельных операторов программы довольно часто возникают ситуации, когда в общем потоке возникают лишние команды.",общем потоке,sys,0
"в интегрированных средах разработки символьные отладчики получили возможность более тесного взаимодействия с другими компонентами систем программирования, прежде всего с текстовыми редакторами, компиляторами и редакторами связей.",разработки,sys,0
"справочные системы с самого своего появления системы программирования снабжались огромным количеством документации разного уровня: для системных программистов распространялись документы с инструкциями по установке и настройке компиляторов и библиотек, для обычных пользователей-программистов с системами программирования поставлялись документы с описаниями языков 101 программирования, описаниями библиотечных функций, перечнями фиксируемых компиляторами ошибок, правил запуска отдельных компонентов и многие другие.",настройке компиляторов,sys,0
"такие средства должны быть реализованы в рамках дополнительных библиотек, предназначенных для решения более конкретных задач.",средства должны,sys,0
"при редактировании и отладке это позволяет легко отыскивать в тексте места определения объектов, проверять способы использования объектов на соответствие определениям, отлаживать не только процедуры обработки объектов, но и сами данные и их структуры.",места определения объектов,sys,0
"проблемой при таком подходе является обработка недостижимых циклических ссылок: размер данного блока памяти счетчик ссылок или пометки занятости указатели, ссылающиеся на данный блок память, выделяемая по 72 при работе программ возможно возникновение сложных списочных структур, создающих закольцованные последовательности ссылок.",работе программ,sys,0
"при редактировании и отладке это позволяет легко отыскивать в тексте места определения объектов, проверять способы использования объектов на соответствие определениям, отлаживать не только процедуры обработки объектов, но и сами данные и их структуры.",способы использования объектов,sys,0
"они включают в себя как общие математические операции (скалярное произведение и умножение матриц), так и сложные алгоритмы поиска и хранения (поисковый цикл монте-карло), например, так на языке си выглядит четвертый ливерморский цикл, построенный на базе фрагмента подпрограммы решения ленточных линейных уравнений: void loop4 (int n, real x [ar 1001], real y [ar 1001]) { for (int k = 6; k < ar 1001; k += (ar 1001 - 7) / 2) { int lw = k - 6; for (int j = 4; j < n; j += 5) x [k - 1] -= x [lw ++] y [j]; x [k - 1] = y [4]; } } обнаружение подобной критической последовательности операторов позволяет вместо прямой подстановки обычной последовательности команд сформировать последовательность, специфическую для данного шаблона и конкретной вычислительной архитектуры.",ливерморский цикл,sys,0
"например, в фортране и pl/1 строка if(i,j) = 3 представляет собой правильный оператор присваивания элементу массива, но не условный оператор.",массива,sys,0
"130 5.1.системы клиент-сервер в распределенных системах важнейшими являются два понятия, для обозначения которых используются термины клиент и сервер .",клиент-сервер,sys,0
текстовый редактор является наиболее частым начальным элементом процесса создания программы.,программы,sys,0
"классическая система программирования практически невозможно встретить систему программирования, в которой последовательно и полно были бы представлены сразу все компоненты, обеспечивающие полноценную поддержку процесса создания программ на всех стадиях и этапах.",классическая система программирования,sys,0
"заготовки процедур, реализующих такие реакции, вставляются в текст программы автоматически, пользователю остается лишь 112 наполнить их реальным содержанием, что очень просто, учитывая существенное разделение первоначальной сложной задачи проектирование диалога на множество простых подзадач.",сложной задачи проектирование диалога,sys,0
"интегрированная среда автоматически осуществляет запуск необходимых компонентов (фактически создавая невидимый программисту командный файл), получает от этих компонентов результаты их работы и сообщает пользователю обо всех допущенных им ошибках на разных этапах подготовки программ.",ошибках,sys,0
"иногда компиляторам удается таким образом переставить следующие друг за другом операции, что без изменения смысла программы удается применить какие-либо другие преобразования.",изменения смысла программы,sys,0
"например, замена алгоритма сортировки вставками алгоритмом быстрой сортировки может привести к изменению времени сортировки n элементов с 2.02n2 на 12log2n.",замена,sys,0
стратегия гибридного теста является комбинацией поведенческой и структурной стратегий.,структурной стратегий,sys,0
"оптимизация передачи параметров и вызовов функций проводится на основе двух подходов: прямой подстановки тел функций в основной текст программы и передачи параметров не с помощью общего стекового механизма, а через глобальные переменные, которые впоследствии связываются с регистрами центральных процессоров.",прямой подстановки тел,sys,0
"удобны координаторы make тем, что позволяют отслеживать зависимости в больших наборах файлов, составляющих цельную программу, что упрощает процесс сборки проектов.",сборки проектов,sys,0
вторая часть связана с проведением полного семантического анализа всей программы.,программы,sys,0
"в результате формируется компилятор языка программирования таблицы компилят ора таблицы служебны х идентифи -каторов таблица констант таблица имен таблица процедур таблица блоков таблица циклов множеств о других таблиц фазы анализа программ фазы синтеза программ лексический анализ (сканер) текст лексемы внутреннее представление внутреннее представлен ие синтаксический и семантический анализ (контроль контекстных условий) объектна я программ текст или код фазы оптимизации программ начальные установки распределение памяти распределение регистров внутреннее представление внутреннее представление анализ и локализация обнаруженных ошибок сообщен ия об ошибках исходная программ а генерация команд и машинно-зависимая оптимизация 38 некоторое внутреннее представление программы, понятное следующим фазам компиляции.",фазы анализа программ,sys,0
"в частности, имена локальных объектов блоков дополняются именами блоков (функций, процедур), в которых они описаны, имена внутренних (в терминах языка си++ статических) переменных и функций модулей программы дополняются именами самих этих модулей, имена процедур и функций, принадлежащих классам в объектно-ориентированных языках (си++) или вложенных в другие процедуры и функции в процедурных языках дополняются именами этих классов или процедур, имена методов в описаниях классов дополняются именами, строящимися в зависимости от числа и типов их формальных параметров, это же относится и к именам перегруженных функций си++.",именам перегруженных,sys,0
"лексический анализатор текст синтаксичес кий анализатор объектная программа текст или код исходная программ а лексем а обращение за лексемой начальные установки семантический анализатор, распределитель памяти, генератор команд синтаксическая возврат конструкция управлен ия завершение формирован ия программы 42 при параллельном варианте лексический анализ текста исходной программы выполняется поэтапно.",кий анализатор,sys,0
возможны два принципиально различных метода организации взаимосвязи лексического и синтаксического анализа последовательный и параллельный.,организации,sys,0
"такой поиск можно сделать контекстно-зависимым, то есть можно искать лексему именно того типа, который допустим в данном конкретном месте текста программы.",текста программы,sys,0
более детально распределение памяти рассматривается в разделе 3.3.5.,распределение,sys,0
"разрыв во времени и в пространстве выполнени е исходна я програм объектн ая програм компилятор входные данные результа т программа no 3, результирующа я программа no 1, транслирую программа no 2, транслируем 34 третий способ использования вычислительной аппаратуры для получения результата программы связан с процессом, называемым интерпретацией языка.",объектн ая програм компилятор,sys,0
"эта система в наибольшей степени автоматизирует сам процесс программирования (написания программ) и отладки программ, в ее состав входят многооконный экранный редактор текстов, позволяющий быстро отыскивать в архиве файловой системы необходимые тексты программ и их составных частей (например, модулей), показывать в экранных окнах и редактировать тексты.",необходимые тексты программ,sys,0
"средства конфигурирования одним из важнейших свойств современной системы программирования становится возможность этой системы участвовать не только в процессе разработки программных комплексов, но и в процессе их сопровождения.",средства,sys,0
"в состав системы программирования z/os входят все необходимые средства, с помощью которых можно создавать, модифицировать, хранить и распространять новое прикладное программное обеспечение на различных языках программирования, включая язык ассемблера и языки высокого уровня, такие как си, си++, кобол, pl/1, фортран, ада, java и др.",необходимые средства,sys,0
"например, в языках си и си++ оператор выхода из цикла break может встречаться только внутри операторов цикла или перебора.",языках,sys,0
"ломоносова, научно-исследовательский вычислительный центр, библиотека численного анализа , http://www.srcc.msu.su/num anal/lib na/libnal.htm. ю. в.",численного анализа,sys,0
": издательско- торговый дом русская редакция , 2001).",редакция,sys,0
"он требует либо существенного усложнения операционной системы, либо внесения в программы специальных указаний для динамической загрузки, поскольку только разработчик программы может точно знать, когда потребуется загрузка в память той или иной библиотеки (или какого-либо компонента библиотеки).",внесения,sys,0
"проблемой при таком подходе является обработка недостижимых циклических ссылок: размер данного блока памяти счетчик ссылок или пометки занятости указатели, ссылающиеся на данный блок память, выделяемая по 72 при работе программ возможно возникновение сложных списочных структур, создающих закольцованные последовательности ссылок.",обработка недостижимых циклических ссылок,sys,0
"кроме общей системы типов cts и общего языка внутреннего представления программ, в общеязыковую инфраструктуру входят следующие спецификации: 116 extensible metadata - расширяемые метаданные.",программ,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",классической модели жизненного цикла,sys,0
архитектура строящейся системы описывается в терминах языка uml в виде набора графических моделей.,графических моделей,sys,0
"extended portable executable (pe) file format стандартный формат исполняемых файлов, используемый для хранения объектов технологии.",хранения объектов,sys,0
правильное распределение задач между разработчиками уменьшает вероятность конфликтов.,разработчиками,sys,0
"раздел объявлений состоит из описаний переменных, именованных констант (идентификаторов, используемых для представления констант) и регулярных определений, которые используются в качестве компонентов регулярных выражений в правилах трансляции: %{ / определение именованных констант, обозначающих коды лексем, например, id, number, delimiter / %} / регулярные определения / delim [ \t\n\b\v\r] spaces {delim}+ letter [a-za-z] digit [0-9] id {letter}({letter} {digit}) number {digit}+ %% обычно описания переменных и констант записываются внутри скобок %{ и %} .",идентификаторов,sys,0
"для оптимизации циклов разработаны и специальные методы: вынесение инвариантных вычислений из тела цикла, замена операций с переменными цикла, слияние, расщепление и развертывание циклов.",оптимизации,sys,0
"обычно на этапе семантического анализа используются некоторые варианты синтаксических деревьев, построенных в результате синтаксического разбора.",разбора,sys,0
"локальная глобальная статическая область памяти динамическая распределяе мая программист распределяе мая компиляторо стековая дисциплина дисциплина произвольного распределения 66 стратегия динамического распределения выбирается в тех случаях, когда на стадии компиляции не удается определить положение объекта в некоторой области памяти и/или его размер.",распределения,sys,0
"процесс подготовки программ на языке си к работе выглядит в системе dce так: клиентский программ процесс а клиента интерфейс вызова, заквлиисяещнитйскоит й переходни серверный процесс программ а сервера интерфейс вызова, засвеирсвящеринйыот й переходни окружение разработки idl тексты на idl заголовк и компилят ор idl 133 в состав dce входит много компонентов: языки, библиотеки, службы.",состав,sys,0
"\) {letter} точка со звездочкой означает многократное повторение любого символа, кроме символа конца строки, а обратная косая черта перед скобками указывает, что скобки не являются метасимволами группирования, а являются обычными символами.",группирования,sys,0
"пользователь должен помнить 91 варианты сборки программы, режимы, в которых выполнялось их формирование, имена файлов, в которых размещены результаты работы системы программирования.",работы системы программирования,sys,0
"этот пользовательский интерфейс включает как реляционные, так и не реляционные базы данных, электронную почту, поддержку системных, текстовых и графических файлов.",поддержку системных,sys,0
"в частности, были введены длинные имена файлов, поддержка версий файла, отказоустойчивая файловая система, поддержка дисплея, независимая от терминала.",система,sys,0
"в ходе работы над проектом могут создаваться различные таблицы информации, базы данных, текстовые документы, тексты программ, объектные модули, а также различные модели поведения системы, описываемые в виде диаграмм uml.",программ,sys,0
"клиентский переходник содержит те процедуры, которые будет непосредственно вызывать клиентская программа.",переходник,sys,0
удаление недостижимых фрагментов программы часто требует глобального анализа программы для определения достижимости .,недостижимых фрагментов,sys,0
"однако синтаксис языков программирования может быть описан грамматиками без неоднозначностей (т.к. любая правильная программа должна иметь единственную структуру), т.е. языки программирования являются детерминированными.",программа,sys,0
"второй вариант обработки явных запросов пользователей основан на более гибком подходе, при котором размер блоков не фиксируется заранее, а выбирается на основе параметров запроса и хранится в самом блоке: это позволяет оставить почти без изменения работу системы при захвате памяти, но значительно усложняет ее при освобождении, а особенно при повторном выделении, которое может потребовать склеивания смежных блоков, а иногда и уплотнения занятых участков.",изменения,sys,0
"это привлекает к ее развитию большое сообщество разработчиков, проектирующих для этой системы подключаемые модули, как свободно распространяемые, так и коммерческие.",развитию,sys,0
"например, после ввода переменной, соответствующей некоторому классу, подсказка может предложить перечень методов и свойств этого класса, из которого можно выбрать нужный простым выбором нужной строки в перечне.",подсказка,sys,0
"генерация текстов на языке ассемблера имеет особенный смысл при наличии готового ассемблера, который можно использовать для завершения работы по компиляции, этот подход также используется в составе многоязыковых систем программирования для связи компонентов, написанных на разных языках, между собой.",особенный смысл,sys,0
все свои действия он выполняет непосредственно в окне редактирования исходного текста программы.,редактирования исходного,sys,0
такое деление никак не связано с технической реализацией библиотечных средств.,реализацией библиотечных,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",генератора,sys,0
"дополнительные удобства работы в таком режиме связаны с реальным объединением в одном технологическом процессе нескольких компонентов системы программирования текстовых редакторов, компиляторов, редакторов связей, отладчиков.",объединением,sys,0
"преимуществом всех этих систем и вариантов является то, что в любой системе всегда имеется в наличии некоторый стандартный набор системных программ, обеспечивающий единообразие технологических приемов во всех системах.",единообразие технологических,sys,0
"полезной функцией современных систем программирования является возможность получения справочной информации, которая может выдаваться по трем направлениям: справки по семантике и синтаксису используемого языка программирования; справки по операционной системе и системе программирования; справки по библиотечным компонентам, входящим в систему программирования.",синтаксису,sys,0
"например, после ввода переменной, соответствующей некоторому классу, подсказка может предложить перечень методов и свойств этого класса, из которого можно выбрать нужный простым выбором нужной строки в перечне.",свойств,sys,0
"на выходе компилятора должна быть построена последовательность символов ( цепочка ) выходного языка по тем правилам, которые предлагаются языком машинных команд или языком ассемблера.",выходе компилятора должна,sys,0
"другие преобразования, основанные на сложном анализе потока управления и потока данных, а также на использовании результатов этого анализа при модификации программ, требуют дополнительного анализа представительного набора реальных программ на данном языке программирования.",другие преобразования,sys,0
"при выполнении различных задач, таких как программирование, отладка или синхронизация изменений текстов программ с централизованным репозиторием, можно устанавливать расположение окон, удобное для конкретной задачи.",синхронизация,sys,0
"достаточный уровень масштабируемости больших систем, которые на практике могут поддерживать одновременную работу нескольких тысяч пользователей, может быть достигнут только с помощью децентрализации основных служб системы и управляющих ею алгоритмов, которая все шире внедряется в практику построения распределенных систем, в частности, современных сетевых служб.",помощью,sys,0
"прикладные программы, входящие в этот пакет, предназначены для подключения к программам пользователей, написанным на языке си и разных вариантах языка фортран (фортран 77, фортран 90, фортран 95), причем для разных вычислительных систем (intel x86-32, intel x86-64, compaq alpha tru64, ibm rs/6000), операционных систем (microsoft windows, linux, sun solaris, silicon graphics irix) и трансляторов (intel linux pgf77, intel linux g77).",подключения,sys,0
их реализации позволяют скрытым от пользователей образом организовать маршалинг и сериализацию параметров и возвращаемых значений методов.,сериализацию,sys,0
"загрузка при начале выполнения программы менее экономно расходует оперативную память, но проще реализуется, поскольку может быть полностью автоматизирована, а задача такой динамической загрузки может быть решена компоновщиком программ (редактором связей).",программы,sys,0
"обычно списки используются для представления синтаксических деревьев таких структур, вершинами которых являются операции, а листьями операнды.",представления,sys,0
миграция на eclipse: руководство разработчика по сравнительной оценке eclipse и jbuilder ).,оценке,sys,0
в целом оптимизация на уровне исходной программы может дать наибольший эффект для улучшения технических характеристик программы.,характеристик,sys,0
"если исходная запись программы ведется на языках, близких к машинному представлению программ, такая обработка может быть относительно несложной.",обработка,sys,0
"отличие от систем delphi в данном случае заключается в том, что базовым языком данной системы программирования является язык си++.",программирования,sys,0
"компонентами таких библиотек обычно являются законченные программные модули, из которых достаточно легко строить наиболее типичные приложения, относящиеся к самым произвольным прикладным областям.",самым произвольным прикладным областям,sys,0
некоторым недостатком имеющихся средств тестирования является их высокая стоимость и большие затраты времени на подготовку полноценных тестовых примеров.,стоимость,sys,0
"процесс сборки мусора запускается системой управления памятью в произвольные моменты времени, что может влиять на процесс решения сразу многих задач, работающих в вычислительной системе в одно и то же время.",процесс сборки,sys,0
системы программирования компании borland фирма borland внесла существенный вклад в создание современных представлений о системах программирования персональных эвм.,программирования персональных,sys,0
"неправильный подход к организации процесса разработки, применение неподходящих для этого средств разработки и систем программирования может привести к искажению жизненного цикла получающихся программ, к возникновению патологического цикла с разрывом между разработкой и сопровождением: фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 10 такого рода процессы часто возникают, если разработчики программного обеспечения пренебрегают правилами и стандартами разработки.",разработки,sys,0
"все системы имеют развитые отладчики, которые работают в терминах базового языка программирования (basic/cи++/язык ассемблера).",программирования,sys,0
системы клиент-сервер 103 5.2.,клиент-сервер,sys,0
"одновременно с вводом текста программы с помощью текстового редактора система программирования отыскивает в этом тексте лексемы по правилам того языка программирования, на работу с которым она в данный момент настроена.",правилам,sys,0
"этот компилятор имеет четкий, хорошо описанный интерфейс и достаточное количество средств управления режимами работы.",работы,sys,0
"например, в области математических расчетов созданы многочисленные пакеты программ, лидером среди которых является пакет, принадлежащий международной группе численных алгоритмов (the numerical algorithms group).",области математических,sys,0
"д. многие современные системы программирования предоставляют развитые средства этапа документирования создаваемых программных продуктов, сложность которых постоянно возрастает, что, в свою очередь, делает все более важной хорошую документацию.",хорошую документацию,sys,0
"необходимость оказания системной поддержки программам, проходящим обработку в системах программирования, повлияло на первоначальное наименование библиотек, которые сначала назывались библиотеками системных программ или библиотеками стандартных программ.",наименование,sys,0
"такие ссылки учитываются при подсчете значений счетчиков ссылок блоков памяти, но сами структуры могут реально оказаться недостижимыми в программе, так как ни один из указателей, не входящих в созданное кольцо (внешних по отношению к этому кольцу), не ссылается ни на один из элементов списочного кольца.",ссылки,sys,0
"алгоритмы в такой модели теряют свою независимость, они превращаются в операции над выделенными объектами.",модели,sys,0
"некоторые операции могут заменяться более простыми , что делает их выполнение более эффективным: x := y 2 => x := y y; x := y 2 => x := y + y; устранение общих подвыражений (избыточных вычислений).",устранение,sys,0
"гораздо интереснее и продуктивнее такие отступления от классической модели жизненного цикла, в которых фаза сопровождения становится непосредственным продолжением разработки, при этом разработчик сам сопровождает свои программы: процессы разработки и сопровождения включают в себя этапы: анализ (определение) требований проектирование написание текста программ (программирование, кодирование ) компоновка или интеграция программного комплекса верификация, тестирование и отладка документирование внедрение тиражирование сопровождение, повторяющее все предыдущие этапы этап постановки задачи и определения и анализа требований во многом не формализован, но он влияет на всю фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) фаза разработки фаза использования фаза сопровождения (продолжающейся разработки) 11 разработку и качество конечного продукта.",модели жизненного,sys,0
"визуальным называется такой стиль программирования, который предусматривает создание приложений с помощью наглядных средств.",приложений,sys,0
потребность создания прикладных пакетов существует для каждой прикладной области.,пакетов,sys,0
"вычисление выражений из известных операндов (свертка операций) выполняется в случаях: непосредственного использования констант программистом: a = sin (2 3.14 b); возникновения констант-операндов после макрорасширений, #define pi 3.1415926 a = sin (2 pi b); возникновения констант-операндов в результате компиляции языковых конструкций, например, многомерных массивов: int a [10][10][10], b [10][10][10], c [10][10][10]; a [3][4][i] = b [8][3][k] c [3][2][j]; a [((3 10) + 4) 10 + i] := b [((8 10) + 3) 10 + k] c [((3 10) + 2) 10 + j]; компилятор должен выполнить вычисления и внести записи о новых литеральных константах в таблицу констант, как если бы эти 57 константы были введены самим программистом.",вычисление выражений,sys,0
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",программах,sys,0
"к таким возможностям, прежде всего, можно отнести возможность прямого использования одного из самых популярных в мире языков программирования языка паскаль (хотя и в виде языков object pascal и delphi).",возможностям,sys,0
"профилировщики позволяют разработчикам выявлять ошибки в программах, обнаруживать фрагменты, выполняющиеся неоправданно долго, и множество других узких мест программ, влияющих на производительность системы, которые традиционные отладчики просто не замечают.",системы,sys,0
на этой стадии совершенно не принимаются во внимание аспекты взаимодействия данной программы с другими программами комплекса.,стадии,sys,0
"среди задач системы управления проектом находятся планирование работ (составление списка задач, длительности и графиков выполнения проекта, оценка затрат на выполнение проекта, распределение ресурсов, необходимых для решения задач, распределение ответственности по решаемым задачам).",выполнение проекта,sys,0
"например, спецификация corba 3 поддерживает трансляцию с idl на си, си++, java, smalltalk, аду, кобол, лисп, pl/1, python и idlscript.",спецификация,sys,0
"например, процесс приобретения программного обеспечения включает такие виды деятельности, как определение потребности в программном обеспечении, определение требований, подготовку стратегии покупки, подготовку запроса предложений и выбор поставщика.",подготовку стратегии,sys,0
"для линейных участков проводятся следующие преобразования: вычисление выражений из констант на стадии компиляции, арифметические преобразования, устранение общих подвыражений (избыточных вычислений), удаление ненужных присваиваний и других операций, распространение копий значений, перестановка независимых смежных участков программ, удаление недостижимых фрагментов программы, оптимизация вычисления логических выражений.",смежных участков программ,sys,0
"до настоящего времени в языке object pascal отсутствуют или выглядят чрезмерно усложненными некоторые элементы, реализованные в си++ легко и просто, хотя в нем есть и объекты, и классы, и наследование их свойств, и полиморфизм.",элементы,sys,0
"это делается при помощи языка определения интерфейсов (interface definition language, idl), в качестве которого может выступать специализированный язык или обычный язык программирования, с ограничениями, определяющимися возможностью передачи вызовов на удаленную машину.",вызовов,sys,0
"он должен уметь выполнять такие действия, как запись выделенной лексемы в таблицу лексем, поиск ее в таблице идентификаторов или в таблице констант, а также запись нового имени или новой константы в соответствующую таблицу.",действия,sys,0
"изменение свойств основного языка программирования, являющего ядром системы программирования повлияло на свойства самой системы программирования.",основного языка,sys,0
"основная задача лексического анализатора просмотреть весь текст исходной программы и выделить в нем лексемы (минимальные лексические единицы или элементы текста программы, обладающие смыслом в рамках данного языка).",данного языка,sys,0
"при интерпретации некоторой программы она размещается не в той области памяти вычислительной машины, которая предназначена для выполняемых программ, а там, где обычно размещаются исходные данные выполняемых программ.",программ,sys,0
средства автоматизации (хотя бы частичной) анализа результатов прогона тестов.,прогона,sys,0
"в этом случае генератор выдает сообщение об ошибке, то есть о наличии неразрешимого конфликта в lalr(1)-грамматике.",наличии неразрешимого,sys,0
"программирование не сводится к проектированию диалоговой формы, поэтому в системах delphi имеется еще множество возможностей, позволяющих существенно облегчить процессы программирования и отладки систем программного обеспечения.",проектированию,sys,0
"например, при создании программ, взаимодействующих друг с другом с помощью брокеров запросов объектов, требуется перед программированием составить описание интерфейсов программных компонентов.",описание интерфейсов программных компонентов,sys,0
"наиболее известным и широко распространенным (хотя и не самым лучшим) профилировщиком является программа prof, входящая в состав операционных систем unix.",программа,sys,0
"после получения от сервера ответа, он распаковывается из сетевого сообщения и возвращается клиенту в качестве результата работы процедуры.",клиенту,sys,0
обычно с динамическими областями памяти связаны многие операции с указателями и конструкторами экземпляров классов (объектов).,экземпляров,sys,0
"к таким программам относятся система пользовательского оконного интерфейса x window, библиотека классов motif, библиотека компонентов пользовательского интерфейса qt (в системе gnu ее аналогом являются библиотека kde и библиотека harmony, предназначенная для работы с программами kde, не используя лицензированную библиотеку qt).",работы,sys,0
"именно поэтому на фазе разработки программных комплексов обязательно проводятся мероприятия по тестированию программ, которое представляет собой процесс сравнения результатов работы программ с заранее рассчитанными результатами выполнения тестовых примеров.",разработки,sys,0
"по- существу, язык jcl (точнее первые его версии, существенные развитые к настоящему времени) еще 1960-х годах стал основой для проектирования множества различных командных языков множества операционных систем, в том числе систем, используемых на персональных эвм, хотя многие программисты справедливо называли этот язык ""птичьим"", намекая на нечитабельность и непонятность программ на этом языке.",языков множества операционных систем,sys,0
"приложения, такие же, как и в традиционных системах (возможность подключать к сетевым службам другие прикладные системы позволяет интегрировать множество разнородных приложений в единые слаженно работающие 143 комплексы, при этом в сами приложения никаких изменений вносить не требуется).",множество разнородных,sys,0
"важными являются возможности по поддержке работы в различных режимах, а также по поддержке ведения в системе нескольких разных проектов разработки программного обеспечения.",возможности,sys,0
"работа с блоками, выделенными и освобождаемыми по неявным запросам, проводится по-разному, в зависимости от выбираемого алгоритма определения занятости блока.",выбираемого алгоритма определения занятости,sys,0
"в составе системы gnu также имеются развитый, самодокументированный, расширяемый экранный редактор реального времени emacs, настраиваемый на разные типы терминалов и потребности пользователей редактор, программа flex аналог стандартного генератора лексических анализаторов lex, позволяющий получать более эффективные по сравнению с lex анализаторы, программа построения синтаксических анализаторов yacc и ее свободно распространяемый аналог bison, отладчик gdb и программа пакетной подготовки программ make, системы, поддерживающие работу с версиями программ в больших программных проектах, rcs (revision control system) и cvs (concurrent version system), 121 программа криптографического кодирования gnu privacy guard, почти полностью совместимый с языком postscript графический язык ghostscript, расширенный вариант стандартной архивной утилиты tar, программу сжатия файлов gzip, более быстрые по сравнению со стандартными варианты утилит grep и diff, интерактивная программа для рисования математических выражений и данных gnuplot, электронные таблицы, игровые программы (например, для игры в шахматы) и многое другое, включая документацию.",подготовки,sys,0
"тесные связи между отдельными компонентами помогают отладчику так представить информацию о ходе выполнения программы, что отладка оказывается значительно более простым мероприятием, чем это обычно бывает.",программы,sys,0
"однако последовательного внедрения принципов объектно-ориентированного программирования в системы программирования для ms dos компанией borland произведено не было, это было осуществлено только в другой серии в системах программирования для операционных систем ms windows.",последовательного внедрения принципов объектно,sys,0
при последовательном варианте лексический анализатор просматривает весь текст исходной программы от начала до конца и преобразует его в таблицу лексем.,таблицу лексем,sys,0
"в этих условиях особенно важно, чтобы работа с репозиторием файлов велась в сетевом режиме с возможностью одновременного доступа с многих рабочих мест.",режиме,sys,0
сама компания borland также продолжила развитие собственной системы программирования в части поддержки работы с базами данных.,базами,sys,0
"результатом работы транслятора также является программа, строится она по синтаксическим правилам выходного языка, ее семантика определяется семантикой выходного языка (программа no 3, результирующая).",работы,sys,0
"к таким аспектам относятся: учет регистровой структуры вычислительной аппаратуры, 62 удаление излишних команд, оптимизация потока управления и удаление недостижимых участков программ, снижение стоимости программы, использование машинных идиом, слияние, дробление и развертывание циклов, иногда требующееся из-за технических особенностей аппаратуры, учет векторных и конвейерных свойств архитектуры.",оптимизация,sys,0
"в отличие от отладки тестирование не выявляет причины дефектов в программах, а лишь обнаруживает эти дефекты, которые связаны с несоответствием программы исходным требованиям и спецификациям.",отладки тестирование,sys,0
"каждое отдельное офисное приложение (текстовый процессор microsoft word, электронные таблицы microsoft excel, система управления базой данных microsoft access, система электронной почты microsoft outlook и другие) представлено в системе библиотекой встроенных иерархических классов.",классов,sys,0
"в эту систему авторами были внесены 120 усовершенствования, которые они считали удобными, основываясь на собственном опыте работы с другими операционными системами.",авторами,sys,0
"при проведении преобразований машинно-зависимой оптимизации может оказаться необходимым учитывать аппаратные особенности вычислительных систем число и способ организации взаимодействия центральных процессоров, иерархию устройств памяти, количество и размеры регистров, а также многое другое.",многое,sys,0
"этот компилятор известен также тем, что его подключение к системе программирования к очередной вычислительной машине существенно проще, чем в случае других, тоже многоязыковых, а иногда и многоплатформенных компиляторов.",компилятор известен,sys,0
"клиентом называется программная система (программный компонент), посылающий запрос серверу на выполнение какой-либо услуги, сервером называется программная система (программный компонент), выполняющая задание, полученное по запросу от клиента.",клиентом,sys,0
регулярные выражения часто используются для записи грамматических правил лексического разбора языков программирования.,разбора,sys,0
"из определения компилятора, как частного случая транслятора с языка программирования высокого уровня на машинный язык или язык ассемблера, понятно, что представление программы в виде машинных команд или ассемблерной записи является обязательным.",определения компилятора,sys,0
"подсказки делаются лишь на основании лексического и синтаксического анализа, а этого не всегда достаточно для полного понимания ситуации, поэтому подсказки не всегда оказываются правильными.",подсказки,sys,0
"вместо них в программы вставляются команды обращения к функциям операционной системы, которые обеспечивают обращения к компонентам динамических библиотек.",команды обращения,sys,0
"например, литеральные константы могут выделяться одним цветом, служебные слова могут подчеркиваться, простые идентификаторы показываться каким-либо другим шрифтом и т.",идентификаторы,sys,0
"пользователь должен сам вводить этот текст, но при этом пояснение будет помогать ему.",пользователь должен,sys,0
необходимость сопровождения объясняется двумя причинами.,причинами,sys,0
"по своей функциональности библиотека vcl в значительной степени пересекается с другими широко распространенными библиотеками си++, в частности, со стандартной библиотекой си++, в том числе со стандартной библиотекой шаблонов stl.",распространенными библиотеками,sys,0
"от систем программирования требуется поддерживать как режим отладки программ, так и режим получения наиболее эффективного варианта программ.",режим отладки программ,sys,0
большинство современных редакторов связей могут работать в режиме формирования таких библиотек и модулей.,большинство,sys,0
"жизненный цикл программного продукта в иерархии программно-аппаратного обеспечения системам программирования отводится место между программами управления логическими ресурсами и прикладным программным обеспечением: определение: системой программирования называется комплекс программных средств, предназначенных для поддержки программного продукта на протяжении всего жизненного цикла этого продукта.",комплекс,sys,0
"однако расширение возможностей грамматического описания языков введением описаний действий, то есть замена обычных грамматик на грамматики с действиями, позволяет снизить требования к используемым грамматикам, а значит, к синтаксическим анализаторам и их генераторам.",описания языков введением описаний,sys,0
"тогда операции a+b и d+e, а также сложение с использованием их результатов могут выполняться параллельно.",операции,sys,0
"циклы необязательно должны оформляться с помощью операторов цикла, и чтобы их обнаружить, используется граф управления программы.",граф управления,sys,0
вновь они попадают в память только после очередного реального обращения к ним.,реального обращения,sys,0
"помимо базовых средств разработки, включающих текстовый редактор, набор компиляторов, редакторы связей и средства загрузки программ, в z/os реализована универсальная языковая среда le (language environment), содержатся многочисленные библиотеки программ и классов, представлен менеджер сопровождения разработки программного обеспечения (ispf/sclm).",базовых средств,sys,0
"он может соответствовать термину программный модуль , обозначая в таком случае архитектурный компонент программной системы некоторый абстрактный элемент структуры программы, выделенный для решения некоторых конкретных подзадач в рамках общего назначения системы и имеющий некоторый фиксированный интерфейс взаимодействия с другими программными модулями (подсистемами).",общего назначения системы,sys,0
"примером интегрированного программного продукта может служить пакет аппаратура программы управления физическими ресурсами программы управления логическими ресурсами системы программирования прикладное программное обеспечение 9 microsoft office, включающий в себя около десятка программных продуктов, обладающих согласованными интерфейсами.",десятка,sys,0
"некоторое неудобство прямой польской записи, которое привело к использованию обратной записи, состоит в том, что операторы в ней следуют не в том порядке, в каком они должны выполняться в вычислительной машине: = a - + b c d b 10 постфиксная (инверсная, обратная, суффиксная) запись.",неудобство,sys,0
"в настоящее время аппаратная платформа ibm носит наименование zseries, она является развитием выпускающейся на протяжении нескольких десятилетий линии эвм s/360, s/370 и s/390.",десятилетий линии,sys,0
"однако модель удаленного обращения к методу допускает динамическое обнаружение новых объектов и построение обращений к ним в процессе работы, даже если для данного клиента не был создан никакой переходник.",объектов,sys,0
"на этапе лексического анализа разрешить все эти проблемы абсолютно невозможно там уникальность имен определяется только их записью как последовательности букв, цифр и других разрешенных символов.",записью,sys,0
"фактически, система сохраняет историю каталогов вместе с историей файлов, однако, система не считает, что все созданные файлы должны оказаться под ее контролем; это не так во многих случаях.",контролем,sys,0
"серверы приложений представляют собой крупные библиотеки компонентов, содержащих средства поддержки, как на этапе программирования (проектирования интерфейсов), так и на этапе выполнения.",средства поддержки,sys,0
"вторая команда оказывается излишней, а компилятор старается удалить из созданной последовательности команды все излишние команды.",последовательности,sys,0
"такой способ работы подразумевает высокую квалификацию пользователя системы программирования, который должен точно знать все компоненты конкретной системы программирования, необходимые для формирования нужной ему программы, необходимые им параметры, а также правильную последовательность их вызова.",компоненты,sys,0
в записи регулярных выражений программы lex имеются также следующие способы указания повторений некоторых последовательностей символов: p - итерация (повторение нуль или более раз) p+ - усеченная итерация (повторение один или более раз) p?,следующие способы указания повторений,sys,0
"такой поиск можно сделать контекстно-зависимым, то есть можно искать лексему именно того типа, который допустим в данном конкретном месте текста программы.",текста,sys,0
работа с обратной польской записью в компиляторах подробно рассмотрена в пособии формальные грамма тики и языки.,записью,sys,0
эта информация собирается на основе обработки операторов описания объектов данных программы и пополняется при компиляции исполняемых операторов программы на основе семантических правил входного языка.,правил,sys,0
транслятор с языка программирования turbo pascal с подсистемой фиксации и индикации синтаксических ошибок в текстах.,языка программирования,sys,0
генерация синтаксического анализатора для произвольной контекстно-свободной грамматики оказывается слишком сложным процессом.,грамматики,sys,0
"9 id letter (letter digit) num digit+ одним из лучших инструментов для автоматического построения лексических анализаторов является программа lex, осуществляющая построение программы анализатора на основе обработки спецификаций, использующих регулярные выражения.",автоматического построения,sys,0
широкое внедрение программных систем в различные прикладные области привело к разнообразию способов применения этих систем.,внедрение программных,sys,0
"в это понятие входит не только архитектура аппаратных средств эвм, но и операционная система, работающая на этой аппаратуре, а также набор динамически подключаемых библиотек, которые необходимы для выполнения объектной программы и, фактически, становятся ее частью: сам компилятор может работать в другом операционном окружении, нежели то, в котором будет выполняться откомпилированная им программа.",сам компилятор,sys,0
"именно это согласование превращает наборы системных программ в единую систему, нацеленную на решение своей основной задачи поддержку единого процесса подготовки программ.",задачи,sys,0
"проект gnu автором общего проекта мобильной (переносимой) операционной системы gnu (рекурсивный акроним gnu's not unix) и входящего в нее многоязыкового компилятора gcc является ричард столмен, сотрудник лаборатории искусственного интеллекта массачусетского технологического института, инициировавший работу в 1983 году.",лаборатории,sys,0
компоненты классической системы программирования 21 3.1.,классической системы программирования,sys,0
"в случаях тестирования графических интерфейсов полезны средства запоминания (и последующего воспроизведения) действий пользователей по нажатию клавиш и открытию элементов управления интерфейсом (окон, форм).",действий пользователей,sys,0
"cvs использует его для хранения дополнительной информации о каждом файле в этом каталоге, чтобы определять, какие изменения внесены в них с тех пор, как их извлекли из репозитория.",каталоге,sys,0
грамматики с действиями нашли себе применение в программе автоматической генерации синтаксических анализаторов yacc (yet another compiler-compiler еще один компилятор компиляторов).,программе автоматической генерации синтаксических,sys,0
"каскадная схема хорошо пригодна для моделирования процессов разработки такого программного обеспечения, для которого с самого начала удается достаточно точно и полно сформулировать все требования, с тем, чтобы затем предоставить разработчикам свободу выбора наиболее подходящих технических методов реализации.",реализации,sys,0
"общий подход при использовании той или технологии таков: клиентская программа использует объекты своего программного сервера так, как если бы эти объекты являлись частью клиентской программы.",программного сервера,sys,0
"схема использования программы lex представляет собой трехшаговый алгоритм: 146 на первом шаге подготавливается спецификация лексического анализатора, то есть на языке lex записываются регулярные выражения, описывающие лексемы анализируемого языка (файл lex.l).",выражения,sys,0
"достаточный уровень масштабируемости больших систем, которые на практике могут поддерживать одновременную работу нескольких тысяч пользователей, может быть достигнут только с помощью децентрализации основных служб системы и управляющих ею алгоритмов, которая все шире внедряется в практику построения распределенных систем, в частности, современных сетевых служб.",децентрализации,sys,0
"в приведенном выше примере задано, что приоритет сложения равен приоритету вычитания, но меньше приоритета умножения и деления.",приоритет,sys,0
"другой стороной разрыва связи программы и библиотеки в момент их объединения является трудоемкость исправления программ в случае, если внесение изменений в библиотеку объясняется исправлением существовавшей в ней ошибки.",трудоемкость исправления программ,sys,0
"программа yacc работает примерно по тому же трехшаговому алгоритму, что и программа lex: сначала создается текст искомого анализатора на языке си (си++, java, pascal, ...), затем он 152 компилируется нужным компилятором, после чего может передаваться на исполнение, во время которого будет анализировать синтаксис подаваемых ему на вход текстов: исходная yacc-программа имеет три части: объявления, правила трансляции и подпрограммы поддержки.",нужным компилятором,sys,0
"кроме того, для использования на этом этапе создается специальный инструментарий, в котором особую важность имеют средства контроля версий программных компонентов.",компонентов,sys,0
"генерация кода завершающей стадией работы компилятора является генерация кода (команд, констант и т. д.) объектной программы.",программы,sys,0
"помощь со стороны системы программирования, в которой текстовый редактор интегрирован не только с лексическим, но и с синтаксическим анализатором компилятора, может быть организована в виде подсказок и гиперссылок.",системы,sys,0
"эта спецификация определяет, в частности, единый промежуточный язык (common intermediate language cil), а также общую систему типов (common type system cts), обеспечивающую совместимость типов между всеми языковыми компонентами.",систему,sys,0
"таблицы, создаваемые в процессе ввода текста, могут использоваться для поиска сохраненных там лексем по типу или по некоторым информационным символам (например, по первым буквам).",ввода текста,sys,0
"выбирая тот или иной способ представления таблиц в программах компилятора, следует руководствоваться следующими требованиями к ним: структура таблиц должна обеспечивать эффективность поиска в таблицах; структура таблиц должна обеспечивать эффективность вставок в таблицы (имеются в виду, как вставки новых элементов, так и вставки новой информации в ранее имевшиеся записи); структура таблиц должна обеспечивать возможность динамического роста объемов таблиц.",эффективность вставок,sys,0
"при этом в силе остается использование принципов объектно-ориентированного программирования, на которых основываются и современные серверы приложений и сетевые службы.",использование принципов объектно,sys,0
"технологию .net с языком промежуточного представления cil поддерживает и система программирования delphi, начиная с версии 8.",технологию,sys,0
"избежать подобных ошибок при работе с библиотеками удается только, если точно следовать правилам работы с внешними компонентами, которые подробно разъясняются их поставщиками.",правилам работы,sys,0
"международной организаций по стандартам iso, институтом ieee и другими организациями, в том числе структурами правительства россии, утверждены стандарты, описывающие процессы, виды деятельности и задачи жизненного цикла программ и программно-аппаратных систем, а также результаты, достигаемые с помощью различных видов деятельности.",стандарты,sys,0
"множество из одного элемента алфавита {a, a v} есть регулярное множество.",элемента,sys,0
"такой подход позволяет компаниям поставщикам систем программирования своевременно вносить все необходимые исправления, поддерживая актуальность документации.",поставщикам,sys,0
"выбирая тот или иной способ представления таблиц в программах компилятора, следует руководствоваться следующими требованиями к ним: структура таблиц должна обеспечивать эффективность поиска в таблицах; структура таблиц должна обеспечивать эффективность вставок в таблицы (имеются в виду, как вставки новых элементов, так и вставки новой информации в ранее имевшиеся записи); структура таблиц должна обеспечивать возможность динамического роста объемов таблиц.",способ,sys,0
"такое связывание выполняется редактором связей, а размещение в памяти загрузчиком.",памяти загрузчиком,sys,0
недостатком деревьев является сложность их преобразования в линейную последовательность команд объектной программы.,последовательность,sys,0
